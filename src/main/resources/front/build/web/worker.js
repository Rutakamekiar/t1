// Generated by dart2js (fast startup emitter, strong), the Dart to JavaScript compiler version: 2.11.0-213.5.beta.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error.
//
// dartCallInstrumentation(id, qualifiedName):
//    if this function is defined, it will be called at each entry of a
//    method or constructor. Used only when compiling programs with
//    --experiment-call-instrumentation.
(function dartProgram() {
  function copyProperties(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      to[key] = from[key];
    }
  }
  var supportsDirectProtoAccess = function() {
    var cls = function() {
    };
    cls.prototype = {p: {}};
    var object = new cls();
    if (!(object.__proto__ && object.__proto__.p === cls.prototype.p))
      return false;
    try {
      if (typeof navigator != "undefined" && typeof navigator.userAgent == "string" && navigator.userAgent.indexOf("Chrome/") >= 0)
        return true;
      if (typeof version == "function" && version.length == 0) {
        var v = version();
        if (/^\d+\.\d+\.\d+\.\d+$/.test(v))
          return true;
      }
    } catch (_) {
    }
    return false;
  }();
  function setFunctionNamesIfNecessary(holders) {
    function t() {
    }
    ;
    if (typeof t.name == "string")
      return;
    for (var i = 0; i < holders.length; i++) {
      var holder = holders[i];
      var keys = Object.keys(holder);
      for (var j = 0; j < keys.length; j++) {
        var key = keys[j];
        var f = holder[key];
        if (typeof f == 'function')
          f.name = key;
      }
    }
  }
  function inherit(cls, sup) {
    cls.prototype.constructor = cls;
    cls.prototype["$is" + cls.name] = cls;
    if (sup != null) {
      if (supportsDirectProtoAccess) {
        cls.prototype.__proto__ = sup.prototype;
        return;
      }
      var clsPrototype = Object.create(sup.prototype);
      copyProperties(cls.prototype, clsPrototype);
      cls.prototype = clsPrototype;
    }
  }
  function inheritMany(sup, classes) {
    for (var i = 0; i < classes.length; i++)
      inherit(classes[i], sup);
  }
  function mixin(cls, mixin) {
    copyProperties(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function lazyOld(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      holder[getterName] = function() {
        H.throwCyclicInit(name);
      };
      var result;
      var sentinelInProgress = initializer;
      try {
        if (holder[name] === uninitializedSentinel) {
          result = holder[name] = sentinelInProgress;
          result = holder[name] = initializer();
        } else
          result = holder[name];
      } finally {
        if (result === sentinelInProgress)
          holder[name] = null;
        holder[getterName] = function() {
          return this[name];
        };
      }
      return result;
    };
  }
  function lazy(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      if (holder[name] === uninitializedSentinel)
        holder[name] = initializer();
      holder[getterName] = function() {
        return this[name];
      };
      return holder[name];
    };
  }
  function lazyFinal(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      if (holder[name] === uninitializedSentinel) {
        var value = initializer();
        if (holder[name] !== uninitializedSentinel)
          H.throwLateInitializationError(name);
        holder[name] = value;
      }
      holder[getterName] = function() {
        return this[name];
      };
      return holder[name];
    };
  }
  function makeConstList(list) {
    list.immutable$list = Array;
    list.fixed$length = Array;
    return list;
  }
  function convertToFastObject(properties) {
    function t() {
    }
    t.prototype = properties;
    new t();
    return properties;
  }
  function convertAllToFastObject(arrayOfObjects) {
    for (var i = 0; i < arrayOfObjects.length; ++i)
      convertToFastObject(arrayOfObjects[i]);
  }
  var functionCounter = 0;
  function tearOffGetter(funcs, applyTrampolineIndex, reflectionInfo, name, isIntercepted) {
    return isIntercepted ? new Function("funcs", "applyTrampolineIndex", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "(receiver) {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, applyTrampolineIndex, reflectionInfo, false, true, name);" + "return new c(this, funcs[0], receiver, name);" + "}")(funcs, applyTrampolineIndex, reflectionInfo, name, H, null) : new Function("funcs", "applyTrampolineIndex", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "() {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, applyTrampolineIndex, reflectionInfo, false, false, name);" + "return new c(this, funcs[0], null, name);" + "}")(funcs, applyTrampolineIndex, reflectionInfo, name, H, null);
  }
  function tearOff(funcs, applyTrampolineIndex, reflectionInfo, isStatic, name, isIntercepted) {
    var cache = null;
    return isStatic ? function() {
      if (cache === null)
        cache = H.closureFromTearOff(this, funcs, applyTrampolineIndex, reflectionInfo, true, false, name).prototype;
      return cache;
    } : tearOffGetter(funcs, applyTrampolineIndex, reflectionInfo, name, isIntercepted);
  }
  var typesOffset = 0;
  function installTearOff(container, getterName, isStatic, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    var funs = [];
    for (var i = 0; i < funsOrNames.length; i++) {
      var fun = funsOrNames[i];
      if (typeof fun == 'string')
        fun = container[fun];
      fun.$callName = callNames[i];
      funs.push(fun);
    }
    var fun = funs[0];
    fun.$requiredArgCount = requiredParameterCount;
    fun.$defaultValues = optionalParameterDefaultValues;
    var reflectionInfo = funType;
    if (typeof reflectionInfo == "number")
      reflectionInfo += typesOffset;
    var name = funsOrNames[0];
    fun.$stubName = name;
    var getterFunction = tearOff(funs, applyIndex || 0, reflectionInfo, isStatic, name, isIntercepted);
    container[getterName] = getterFunction;
    if (isStatic)
      fun.$tearOff = getterFunction;
  }
  function installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    return installTearOff(container, getterName, true, false, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex);
  }
  function installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    return installTearOff(container, getterName, false, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex);
  }
  function setOrUpdateInterceptorsByTag(newTags) {
    var tags = init.interceptorsByTag;
    if (!tags) {
      init.interceptorsByTag = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function setOrUpdateLeafTags(newTags) {
    var tags = init.leafTags;
    if (!tags) {
      init.leafTags = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function updateTypes(newTypes) {
    var types = init.types;
    var length = types.length;
    types.push.apply(types, newTypes);
    return length;
  }
  function updateHolder(holder, newHolder) {
    copyProperties(newHolder, holder);
    return holder;
  }
  var hunkHelpers = function() {
    var mkInstance = function(isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      },
      mkStatic = function(requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      };
    return {inherit: inherit, inheritMany: inheritMany, mixin: mixin, installStaticTearOff: installStaticTearOff, installInstanceTearOff: installInstanceTearOff, _instance_0u: mkInstance(0, 0, null, ["call$0"], 0), _instance_1u: mkInstance(0, 1, null, ["call$1"], 0), _instance_2u: mkInstance(0, 2, null, ["call$2"], 0), _instance_0i: mkInstance(1, 0, null, ["call$0"], 0), _instance_1i: mkInstance(1, 1, null, ["call$1"], 0), _instance_2i: mkInstance(1, 2, null, ["call$2"], 0), _static_0: mkStatic(0, null, ["call$0"], 0), _static_1: mkStatic(1, null, ["call$1"], 0), _static_2: mkStatic(2, null, ["call$2"], 0), makeConstList: makeConstList, lazy: lazy, lazyFinal: lazyFinal, lazyOld: lazyOld, updateHolder: updateHolder, convertToFastObject: convertToFastObject, setFunctionNamesIfNecessary: setFunctionNamesIfNecessary, updateTypes: updateTypes, setOrUpdateInterceptorsByTag: setOrUpdateInterceptorsByTag, setOrUpdateLeafTags: setOrUpdateLeafTags};
  }();
  function initializeDeferredHunk(hunk) {
    typesOffset = init.types.length;
    hunk(hunkHelpers, init, holders, $);
  }
  function getGlobalFromName(name) {
    for (var i = 0; i < holders.length; i++) {
      if (holders[i] == C)
        continue;
      if (holders[i][name])
        return holders[i][name];
    }
  }
  var C = {},
  H = {JS_CONST: function JS_CONST() {
    },
    SubListIterable$: function(_iterable, _start, _endOrLength, $E) {
      P.RangeError_checkNotNegative(_start, "start");
      if (_endOrLength != null) {
        P.RangeError_checkNotNegative(_endOrLength, "end");
        if (_start > _endOrLength)
          H.throwExpression(P.RangeError$range(_start, 0, _endOrLength, "start", null));
      }
      return new H.SubListIterable(_iterable, _start, _endOrLength, $E._eval$1("SubListIterable<0>"));
    },
    MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
      return new H.EfficientLengthMappedIterable(iterable, $function, $S._eval$1("@<0>")._bind$1($T)._eval$1("EfficientLengthMappedIterable<1,2>"));
    },
    SkipIterable_SkipIterable: function(iterable, count, $E) {
      var _s5_ = "count";
      if (type$.EfficientLengthIterable_dynamic._is(iterable)) {
        P.ArgumentError_checkNotNull(count, _s5_, type$.int);
        P.RangeError_checkNotNegative(count, _s5_);
        return new H.EfficientLengthSkipIterable(iterable, count, $E._eval$1("EfficientLengthSkipIterable<0>"));
      }
      P.ArgumentError_checkNotNull(count, _s5_, type$.int);
      P.RangeError_checkNotNegative(count, _s5_);
      return new H.SkipIterable(iterable, count, $E._eval$1("SkipIterable<0>"));
    },
    IterableElementError_noElement: function() {
      return new P.StateError("No element");
    },
    IterableElementError_tooFew: function() {
      return new P.StateError("Too few elements");
    },
    LateInitializationErrorImpl: function LateInitializationErrorImpl(t0) {
      this._message = t0;
    },
    CodeUnits: function CodeUnits(t0) {
      this._string = t0;
    },
    EfficientLengthIterable: function EfficientLengthIterable() {
    },
    ListIterable: function ListIterable() {
    },
    SubListIterable: function SubListIterable(t0, t1, t2, t3) {
      var _ = this;
      _.__internal$_iterable = t0;
      _._start = t1;
      _._endOrLength = t2;
      _.$ti = t3;
    },
    ListIterator: function ListIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_iterable = t0;
      _.__internal$_length = t1;
      _.__internal$_index = 0;
      _.__internal$_current = null;
      _.$ti = t2;
    },
    MappedIterable: function MappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    EfficientLengthMappedIterable: function EfficientLengthMappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    MappedIterator: function MappedIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_current = null;
      _._iterator = t0;
      _._f = t1;
      _.$ti = t2;
    },
    SkipIterable: function SkipIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    EfficientLengthSkipIterable: function EfficientLengthSkipIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    SkipIterator: function SkipIterator(t0, t1, t2) {
      this._iterator = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    EmptyIterable: function EmptyIterable(t0) {
      this.$ti = t0;
    },
    EmptyIterator: function EmptyIterator(t0) {
      this.$ti = t0;
    },
    FixedLengthListMixin: function FixedLengthListMixin() {
    },
    UnmodifiableListMixin: function UnmodifiableListMixin() {
    },
    UnmodifiableListBase: function UnmodifiableListBase() {
    },
    unminifyOrTag: function(rawClassName) {
      var preserved = H.unmangleGlobalNameIfPreservedAnyways(rawClassName);
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    isJsIndexable: function(object, record) {
      var result;
      if (record != null) {
        result = record.x;
        if (result != null)
          return result;
      }
      return type$.JavaScriptIndexingBehavior_dynamic._is(object);
    },
    S: function(value) {
      var res;
      if (typeof value == "string")
        return value;
      if (typeof value == "number") {
        if (value !== 0)
          return "" + value;
      } else if (true === value)
        return "true";
      else if (false === value)
        return "false";
      else if (value == null)
        return "null";
      res = J.toString$0$(value);
      if (typeof res != "string")
        throw H.wrapException(H.argumentErrorValue(value));
      return res;
    },
    Primitives_objectHashCode: function(object) {
      var hash = object.$identityHash;
      if (hash == null) {
        hash = Math.random() * 0x3fffffff | 0;
        object.$identityHash = hash;
      }
      return hash;
    },
    Primitives_objectTypeName: function(object) {
      return H.Primitives__objectTypeNameNewRti(object);
    },
    Primitives__objectTypeNameNewRti: function(object) {
      var dispatchName, $constructor, constructorName;
      if (object instanceof P.Object)
        return H._rtiToString(H.instanceType(object), null);
      if (J.getInterceptor$(object) === C.Interceptor_methods || type$.UnknownJavaScriptObject._is(object)) {
        dispatchName = C.C_JS_CONST(object);
        if (H.Primitives__saneNativeClassName(dispatchName))
          return dispatchName;
        $constructor = object.constructor;
        if (typeof $constructor == "function") {
          constructorName = $constructor.name;
          if (typeof constructorName == "string" && H.Primitives__saneNativeClassName(constructorName))
            return constructorName;
        }
      }
      return H._rtiToString(H.instanceType(object), null);
    },
    Primitives__saneNativeClassName: function($name) {
      var t1 = $name !== "Object" && $name !== "";
      return t1;
    },
    Primitives__fromCharCodeApply: function(array) {
      var result, i, i0, chunkEnd,
        end = array.length;
      if (end <= 500)
        return String.fromCharCode.apply(null, array);
      for (result = "", i = 0; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, array.slice(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCodePoints: function(codePoints) {
      var t1, _i, i,
        a = H.setRuntimeTypeInfo([], type$.JSArray_int);
      for (t1 = codePoints.length, _i = 0; _i < codePoints.length; codePoints.length === t1 || (0, H.throwConcurrentModificationError)(codePoints), ++_i) {
        i = codePoints[_i];
        if (!H._isInt(i))
          throw H.wrapException(H.argumentErrorValue(i));
        if (i <= 65535)
          C.JSArray_methods.add$1(a, i);
        else if (i <= 1114111) {
          C.JSArray_methods.add$1(a, 55296 + (C.JSInt_methods._shrOtherPositive$1(i - 65536, 10) & 1023));
          C.JSArray_methods.add$1(a, 56320 + (i & 1023));
        } else
          throw H.wrapException(H.argumentErrorValue(i));
      }
      return H.Primitives__fromCharCodeApply(a);
    },
    Primitives_stringFromCharCodes: function(charCodes) {
      var t1, _i, i;
      for (t1 = charCodes.length, _i = 0; _i < t1; ++_i) {
        i = charCodes[_i];
        if (!H._isInt(i))
          throw H.wrapException(H.argumentErrorValue(i));
        if (i < 0)
          throw H.wrapException(H.argumentErrorValue(i));
        if (i > 65535)
          return H.Primitives_stringFromCodePoints(charCodes);
      }
      return H.Primitives__fromCharCodeApply(charCodes);
    },
    Primitives_stringFromNativeUint8List: function(charCodes, start, end) {
      var i, result, i0, chunkEnd;
      if (end <= 500 && start === 0 && end === charCodes.length)
        return String.fromCharCode.apply(null, charCodes);
      for (i = start, result = ""; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, charCodes.subarray(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCharCode: function(charCode) {
      var bits;
      if (charCode <= 65535)
        return String.fromCharCode(charCode);
      if (charCode <= 1114111) {
        bits = charCode - 65536;
        return String.fromCharCode((55296 | C.JSInt_methods._shrOtherPositive$1(bits, 10)) >>> 0, 56320 | bits & 1023);
      }
      throw H.wrapException(P.RangeError$range(charCode, 0, 1114111, null, null));
    },
    Primitives_lazyAsJsDate: function(receiver) {
      if (receiver.date === void 0)
        receiver.date = new Date(receiver._value);
      return receiver.date;
    },
    Primitives_getYear: function(receiver) {
      var t1 = H.Primitives_lazyAsJsDate(receiver).getUTCFullYear() + 0;
      return t1;
    },
    Primitives_getMonth: function(receiver) {
      var t1 = H.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1;
      return t1;
    },
    Primitives_getDay: function(receiver) {
      var t1 = H.Primitives_lazyAsJsDate(receiver).getUTCDate() + 0;
      return t1;
    },
    Primitives_getHours: function(receiver) {
      var t1 = H.Primitives_lazyAsJsDate(receiver).getUTCHours() + 0;
      return t1;
    },
    Primitives_getMinutes: function(receiver) {
      var t1 = H.Primitives_lazyAsJsDate(receiver).getUTCMinutes() + 0;
      return t1;
    },
    Primitives_getSeconds: function(receiver) {
      var t1 = H.Primitives_lazyAsJsDate(receiver).getUTCSeconds() + 0;
      return t1;
    },
    Primitives_getMilliseconds: function(receiver) {
      var t1 = H.Primitives_lazyAsJsDate(receiver).getUTCMilliseconds() + 0;
      return t1;
    },
    iae: function(argument) {
      throw H.wrapException(H.argumentErrorValue(argument));
    },
    ioore: function(receiver, index) {
      if (receiver == null)
        J.get$length$asx(receiver);
      throw H.wrapException(H.diagnoseIndexError(receiver, index));
    },
    diagnoseIndexError: function(indexable, index) {
      var $length, _s5_ = "index";
      if (!H._isInt(index))
        return new P.ArgumentError(true, index, _s5_, null);
      $length = H._asIntS(J.get$length$asx(indexable));
      if (index < 0 || index >= $length)
        return P.IndexError$(index, indexable, _s5_, null, $length);
      return P.RangeError$value(index, _s5_);
    },
    diagnoseRangeError: function(start, end, $length) {
      if (start < 0 || start > $length)
        return P.RangeError$range(start, 0, $length, "start", null);
      if (end != null)
        if (end < start || end > $length)
          return P.RangeError$range(end, start, $length, "end", null);
      return new P.ArgumentError(true, end, "end", null);
    },
    argumentErrorValue: function(object) {
      return new P.ArgumentError(true, object, null, null);
    },
    checkNum: function(value) {
      if (typeof value != "number")
        throw H.wrapException(H.argumentErrorValue(value));
      return value;
    },
    wrapException: function(ex) {
      var wrapper, t1;
      if (ex == null)
        ex = new P.NullThrownError();
      wrapper = new Error();
      wrapper.dartException = ex;
      t1 = H.toStringWrapper;
      if ("defineProperty" in Object) {
        Object.defineProperty(wrapper, "message", {get: t1});
        wrapper.name = "";
      } else
        wrapper.toString = t1;
      return wrapper;
    },
    toStringWrapper: function() {
      return J.toString$0$(this.dartException);
    },
    throwExpression: function(ex) {
      throw H.wrapException(ex);
    },
    throwConcurrentModificationError: function(collection) {
      throw H.wrapException(P.ConcurrentModificationError$(collection));
    },
    TypeErrorDecoder_extractPattern: function(message) {
      var match, $arguments, argumentsExpr, expr, method, receiver;
      message = H.quoteStringForRegExp(message.replace(String({}), '$receiver$'));
      match = message.match(/\\\$[a-zA-Z]+\\\$/g);
      if (match == null)
        match = H.setRuntimeTypeInfo([], type$.JSArray_String);
      $arguments = match.indexOf("\\$arguments\\$");
      argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
      expr = match.indexOf("\\$expr\\$");
      method = match.indexOf("\\$method\\$");
      receiver = match.indexOf("\\$receiver\\$");
      return new H.TypeErrorDecoder(message.replace(new RegExp('\\\\\\$arguments\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$argumentsExpr\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$expr\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$method\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$receiver\\\\\\$', 'g'), '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
    },
    TypeErrorDecoder_provokeCallErrorOn: function(expression) {
      return function($expr$) {
        var $argumentsExpr$ = '$arguments$';
        try {
          $expr$.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
      return function($expr$) {
        try {
          $expr$.$method$;
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    NullError$: function(_message, match) {
      return new H.NullError(_message, match == null ? null : match.method);
    },
    JsNoSuchMethodError$: function(_message, match) {
      var t1 = match == null,
        t2 = t1 ? null : match.method;
      return new H.JsNoSuchMethodError(_message, t2, t1 ? null : match.receiver);
    },
    unwrapException: function(ex) {
      if (ex == null)
        return new H.NullThrownFromJavaScriptException(ex);
      if (typeof ex !== "object")
        return ex;
      if ("dartException" in ex)
        return H.saveStackTrace(ex, ex.dartException);
      return H._unwrapNonDartException(ex);
    },
    saveStackTrace: function(ex, error) {
      if (type$.Error._is(error))
        if (error.$thrownJsError == null)
          error.$thrownJsError = ex;
      return error;
    },
    _unwrapNonDartException: function(ex) {
      var message, number, ieErrorCode, nsme, notClosure, nullCall, nullLiteralCall, undefCall, undefLiteralCall, nullProperty, undefProperty, undefLiteralProperty, match, t1, _null = null;
      if (!("message" in ex))
        return ex;
      message = ex.message;
      if ("number" in ex && typeof ex.number == "number") {
        number = ex.number;
        ieErrorCode = number & 65535;
        if ((C.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
          switch (ieErrorCode) {
            case 438:
              return H.saveStackTrace(ex, H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", _null));
            case 445:
            case 5007:
              return H.saveStackTrace(ex, H.NullError$(H.S(message) + " (Error " + ieErrorCode + ")", _null));
          }
      }
      if (ex instanceof TypeError) {
        nsme = $.$get$TypeErrorDecoder_noSuchMethodPattern();
        notClosure = $.$get$TypeErrorDecoder_notClosurePattern();
        nullCall = $.$get$TypeErrorDecoder_nullCallPattern();
        nullLiteralCall = $.$get$TypeErrorDecoder_nullLiteralCallPattern();
        undefCall = $.$get$TypeErrorDecoder_undefinedCallPattern();
        undefLiteralCall = $.$get$TypeErrorDecoder_undefinedLiteralCallPattern();
        nullProperty = $.$get$TypeErrorDecoder_nullPropertyPattern();
        $.$get$TypeErrorDecoder_nullLiteralPropertyPattern();
        undefProperty = $.$get$TypeErrorDecoder_undefinedPropertyPattern();
        undefLiteralProperty = $.$get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
        match = nsme.matchTypeError$1(message);
        if (match != null)
          return H.saveStackTrace(ex, H.JsNoSuchMethodError$(H._asStringS(message), match));
        else {
          match = notClosure.matchTypeError$1(message);
          if (match != null) {
            match.method = "call";
            return H.saveStackTrace(ex, H.JsNoSuchMethodError$(H._asStringS(message), match));
          } else {
            match = nullCall.matchTypeError$1(message);
            if (match == null) {
              match = nullLiteralCall.matchTypeError$1(message);
              if (match == null) {
                match = undefCall.matchTypeError$1(message);
                if (match == null) {
                  match = undefLiteralCall.matchTypeError$1(message);
                  if (match == null) {
                    match = nullProperty.matchTypeError$1(message);
                    if (match == null) {
                      match = nullLiteralCall.matchTypeError$1(message);
                      if (match == null) {
                        match = undefProperty.matchTypeError$1(message);
                        if (match == null) {
                          match = undefLiteralProperty.matchTypeError$1(message);
                          t1 = match != null;
                        } else
                          t1 = true;
                      } else
                        t1 = true;
                    } else
                      t1 = true;
                  } else
                    t1 = true;
                } else
                  t1 = true;
              } else
                t1 = true;
            } else
              t1 = true;
            if (t1)
              return H.saveStackTrace(ex, H.NullError$(H._asStringS(message), match));
          }
        }
        return H.saveStackTrace(ex, new H.UnknownJsTypeError(typeof message == "string" ? message : ""));
      }
      if (ex instanceof RangeError) {
        if (typeof message == "string" && message.indexOf("call stack") !== -1)
          return new P.StackOverflowError();
        message = function(ex) {
          try {
            return String(ex);
          } catch (e) {
          }
          return null;
        }(ex);
        return H.saveStackTrace(ex, new P.ArgumentError(false, _null, _null, typeof message == "string" ? message.replace(/^RangeError:\s*/, "") : message));
      }
      if (typeof InternalError == "function" && ex instanceof InternalError)
        if (typeof message == "string" && message === "too much recursion")
          return new P.StackOverflowError();
      return ex;
    },
    getTraceFromException: function(exception) {
      var trace;
      if (exception == null)
        return new H._StackTrace(exception);
      trace = exception.$cachedTrace;
      if (trace != null)
        return trace;
      return exception.$cachedTrace = new H._StackTrace(exception);
    },
    fillLiteralMap: function(keyValuePairs, result) {
      var index, index0, index1,
        $length = keyValuePairs.length;
      for (index = 0; index < $length; index = index1) {
        index0 = index + 1;
        index1 = index0 + 1;
        result.$indexSet(0, keyValuePairs[index], keyValuePairs[index0]);
      }
      return result;
    },
    invokeClosure: function(closure, numberOfArguments, arg1, arg2, arg3, arg4) {
      type$.Function._as(closure);
      switch (H._asIntS(numberOfArguments)) {
        case 0:
          return closure.call$0();
        case 1:
          return closure.call$1(arg1);
        case 2:
          return closure.call$2(arg1, arg2);
        case 3:
          return closure.call$3(arg1, arg2, arg3);
        case 4:
          return closure.call$4(arg1, arg2, arg3, arg4);
      }
      throw H.wrapException(new P._Exception("Unsupported number of arguments for wrapped closure"));
    },
    convertDartClosureToJS: function(closure, arity) {
      var $function;
      if (closure == null)
        return null;
      $function = closure.$identity;
      if (!!$function)
        return $function;
      $function = function(closure, arity, invoke) {
        return function(a1, a2, a3, a4) {
          return invoke(closure, arity, a1, a2, a3, a4);
        };
      }(closure, arity, H.invokeClosure);
      closure.$identity = $function;
      return $function;
    },
    Closure_fromTearOff: function(receiver, functions, applyTrampolineIndex, reflectionInfo, isStatic, isIntercepted, propertyName) {
      var $constructor, t1, trampoline, applyTrampoline, i, stub, stubCallName,
        $function = functions[0],
        callName = $function.$callName,
        $prototype = isStatic ? Object.create(new H.StaticClosure().constructor.prototype) : Object.create(new H.BoundClosure(null, null, null, "").constructor.prototype);
      $prototype.$initialize = $prototype.constructor;
      if (isStatic)
        $constructor = function static_tear_off() {
          this.$initialize();
        };
      else {
        t1 = $.Closure_functionCounter;
        if (typeof t1 !== "number")
          return t1.$add();
        $.Closure_functionCounter = t1 + 1;
        t1 = new Function("a,b,c,d" + t1, "this.$initialize(a,b,c,d" + t1 + ")");
        $constructor = t1;
      }
      $prototype.constructor = $constructor;
      $constructor.prototype = $prototype;
      if (!isStatic) {
        trampoline = H.Closure_forwardCallTo(receiver, $function, isIntercepted);
        trampoline.$reflectionInfo = reflectionInfo;
      } else {
        $prototype.$static_name = propertyName;
        trampoline = $function;
      }
      $prototype.$signature = H.Closure__computeSignatureFunctionNewRti(reflectionInfo, isStatic, isIntercepted);
      $prototype[callName] = trampoline;
      for (applyTrampoline = trampoline, i = 1; i < functions.length; ++i) {
        stub = functions[i];
        stubCallName = stub.$callName;
        if (stubCallName != null) {
          stub = isStatic ? stub : H.Closure_forwardCallTo(receiver, stub, isIntercepted);
          $prototype[stubCallName] = stub;
        }
        if (i === applyTrampolineIndex) {
          stub.$reflectionInfo = reflectionInfo;
          applyTrampoline = stub;
        }
      }
      $prototype["call*"] = applyTrampoline;
      $prototype.$requiredArgCount = $function.$requiredArgCount;
      $prototype.$defaultValues = $function.$defaultValues;
      return $constructor;
    },
    Closure__computeSignatureFunctionNewRti: function(functionType, isStatic, isIntercepted) {
      var typeEvalMethod;
      if (typeof functionType == "number")
        return function(getType, t) {
          return function() {
            return getType(t);
          };
        }(H.getTypeFromTypesTable, functionType);
      if (typeof functionType == "string") {
        if (isStatic)
          throw H.wrapException("Cannot compute signature for static tearoff.");
        typeEvalMethod = isIntercepted ? H.BoundClosure_evalRecipeIntercepted : H.BoundClosure_evalRecipe;
        return function(recipe, evalOnReceiver) {
          return function() {
            return evalOnReceiver(this, recipe);
          };
        }(functionType, typeEvalMethod);
      }
      throw H.wrapException("Error in functionType of tearoff");
    },
    Closure_cspForwardCall: function(arity, isSuperCall, stubName, $function) {
      var getSelf = H.BoundClosure_selfOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          return function(n, S) {
            return function() {
              return S(this)[n]();
            };
          }(stubName, getSelf);
        case 1:
          return function(n, S) {
            return function(a) {
              return S(this)[n](a);
            };
          }(stubName, getSelf);
        case 2:
          return function(n, S) {
            return function(a, b) {
              return S(this)[n](a, b);
            };
          }(stubName, getSelf);
        case 3:
          return function(n, S) {
            return function(a, b, c) {
              return S(this)[n](a, b, c);
            };
          }(stubName, getSelf);
        case 4:
          return function(n, S) {
            return function(a, b, c, d) {
              return S(this)[n](a, b, c, d);
            };
          }(stubName, getSelf);
        case 5:
          return function(n, S) {
            return function(a, b, c, d, e) {
              return S(this)[n](a, b, c, d, e);
            };
          }(stubName, getSelf);
        default:
          return function(f, s) {
            return function() {
              return f.apply(s(this), arguments);
            };
          }($function, getSelf);
      }
    },
    Closure_forwardCallTo: function(receiver, $function, isIntercepted) {
      var stubName, arity, lookedUpFunction, t1, t2, selfName, $arguments;
      if (isIntercepted)
        return H.Closure_forwardInterceptedCallTo(receiver, $function);
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      t2 = !t1 || arity >= 27;
      if (t2)
        return H.Closure_cspForwardCall(arity, !t1, stubName, $function);
      if (arity === 0) {
        t1 = $.Closure_functionCounter;
        if (typeof t1 !== "number")
          return t1.$add();
        $.Closure_functionCounter = t1 + 1;
        selfName = "self" + t1;
        return new Function("return function(){var " + selfName + " = this." + H.S(H.BoundClosure_selfFieldName()) + ";return " + selfName + "." + H.S(stubName) + "();}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity).join(",");
      t1 = $.Closure_functionCounter;
      if (typeof t1 !== "number")
        return t1.$add();
      $.Closure_functionCounter = t1 + 1;
      $arguments += t1;
      return new Function("return function(" + $arguments + "){return this." + H.S(H.BoundClosure_selfFieldName()) + "." + H.S(stubName) + "(" + $arguments + ");}")();
    },
    Closure_cspForwardInterceptedCall: function(arity, isSuperCall, $name, $function) {
      var getSelf = H.BoundClosure_selfOf,
        getReceiver = H.BoundClosure_receiverOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          throw H.wrapException(new H.RuntimeError("Intercepted function with no arguments."));
        case 1:
          return function(n, s, r) {
            return function() {
              return s(this)[n](r(this));
            };
          }($name, getSelf, getReceiver);
        case 2:
          return function(n, s, r) {
            return function(a) {
              return s(this)[n](r(this), a);
            };
          }($name, getSelf, getReceiver);
        case 3:
          return function(n, s, r) {
            return function(a, b) {
              return s(this)[n](r(this), a, b);
            };
          }($name, getSelf, getReceiver);
        case 4:
          return function(n, s, r) {
            return function(a, b, c) {
              return s(this)[n](r(this), a, b, c);
            };
          }($name, getSelf, getReceiver);
        case 5:
          return function(n, s, r) {
            return function(a, b, c, d) {
              return s(this)[n](r(this), a, b, c, d);
            };
          }($name, getSelf, getReceiver);
        case 6:
          return function(n, s, r) {
            return function(a, b, c, d, e) {
              return s(this)[n](r(this), a, b, c, d, e);
            };
          }($name, getSelf, getReceiver);
        default:
          return function(f, s, r, a) {
            return function() {
              a = [r(this)];
              Array.prototype.push.apply(a, arguments);
              return f.apply(s(this), a);
            };
          }($function, getSelf, getReceiver);
      }
    },
    Closure_forwardInterceptedCallTo: function(receiver, $function) {
      var stubName, arity, lookedUpFunction, t1, t2, $arguments,
        selfField = H.BoundClosure_selfFieldName(),
        receiverField = $.BoundClosure_receiverFieldNameCache;
      if (receiverField == null)
        receiverField = $.BoundClosure_receiverFieldNameCache = H.BoundClosure_computeFieldNamed("receiver");
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      t2 = !t1 || arity >= 28;
      if (t2)
        return H.Closure_cspForwardInterceptedCall(arity, !t1, stubName, $function);
      if (arity === 1) {
        t1 = "return function(){return this." + H.S(selfField) + "." + H.S(stubName) + "(this." + receiverField + ");";
        t2 = $.Closure_functionCounter;
        if (typeof t2 !== "number")
          return t2.$add();
        $.Closure_functionCounter = t2 + 1;
        return new Function(t1 + t2 + "}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity - 1).join(",");
      t1 = "return function(" + $arguments + "){return this." + H.S(selfField) + "." + H.S(stubName) + "(this." + receiverField + ", " + $arguments + ");";
      t2 = $.Closure_functionCounter;
      if (typeof t2 !== "number")
        return t2.$add();
      $.Closure_functionCounter = t2 + 1;
      return new Function(t1 + t2 + "}")();
    },
    closureFromTearOff: function(receiver, functions, applyTrampolineIndex, reflectionInfo, isStatic, isIntercepted, $name) {
      return H.Closure_fromTearOff(receiver, functions, applyTrampolineIndex, reflectionInfo, !!isStatic, !!isIntercepted, $name);
    },
    BoundClosure_evalRecipe: function(closure, recipe) {
      return H._Universe_evalInEnvironment(init.typeUniverse, H.instanceType(closure._self), recipe);
    },
    BoundClosure_evalRecipeIntercepted: function(closure, recipe) {
      return H._Universe_evalInEnvironment(init.typeUniverse, H.instanceType(closure._receiver), recipe);
    },
    BoundClosure_selfOf: function(closure) {
      return closure._self;
    },
    BoundClosure_receiverOf: function(closure) {
      return closure._receiver;
    },
    BoundClosure_selfFieldName: function() {
      var t1 = $.BoundClosure_selfFieldNameCache;
      return t1 == null ? $.BoundClosure_selfFieldNameCache = H.BoundClosure_computeFieldNamed("self") : t1;
    },
    BoundClosure_computeFieldNamed: function(fieldName) {
      var t1, i, $name,
        template = new H.BoundClosure("self", "target", "receiver", "name"),
        names = J.JSArray_markFixedList(Object.getOwnPropertyNames(template), type$.nullable_Object);
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (template[$name] === fieldName)
          return $name;
      }
      throw H.wrapException(P.ArgumentError$("Field name " + fieldName + " not found."));
    },
    boolConversionCheck: function(value) {
      if (value == null)
        H.assertThrow("boolean expression must not be null");
      return value;
    },
    assertThrow: function(message) {
      throw H.wrapException(new H._AssertionError(message));
    },
    throwCyclicInit: function(staticName) {
      throw H.wrapException(new P.CyclicInitializationError(staticName));
    },
    getIsolateAffinityTag: function($name) {
      return init.getIsolateTag($name);
    },
    throwLateInitializationError: function($name) {
      return H.throwExpression(new H.LateInitializationErrorImpl($name));
    },
    defineProperty: function(obj, property, value) {
      Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
    },
    lookupAndCacheInterceptor: function(obj) {
      var interceptor, interceptorClass, altTag, mark, t1,
        tag = H._asStringS($.getTagFunction.call$1(obj)),
        record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
      if (interceptorClass == null) {
        altTag = H._asStringQ($.alternateTagFunction.call$2(obj, tag));
        if (altTag != null) {
          record = $.dispatchRecordsForInstanceTags[altTag];
          if (record != null) {
            Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            return record.i;
          }
          interceptor = $.interceptorsForUncacheableTags[altTag];
          if (interceptor != null)
            return interceptor;
          interceptorClass = init.interceptorsByTag[altTag];
          tag = altTag;
        }
      }
      if (interceptorClass == null)
        return null;
      interceptor = interceptorClass.prototype;
      mark = tag[0];
      if (mark === "!") {
        record = H.makeLeafDispatchRecord(interceptor);
        $.dispatchRecordsForInstanceTags[tag] = record;
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      if (mark === "~") {
        $.interceptorsForUncacheableTags[tag] = interceptor;
        return interceptor;
      }
      if (mark === "-") {
        t1 = H.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      }
      if (mark === "+")
        return H.patchInteriorProto(obj, interceptor);
      if (mark === "*")
        throw H.wrapException(P.UnimplementedError$(tag));
      if (init.leafTags[tag] === true) {
        t1 = H.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      } else
        return H.patchInteriorProto(obj, interceptor);
    },
    patchInteriorProto: function(obj, interceptor) {
      var proto = Object.getPrototypeOf(obj);
      Object.defineProperty(proto, init.dispatchPropertyName, {value: J.makeDispatchRecord(interceptor, proto, null, null), enumerable: false, writable: true, configurable: true});
      return interceptor;
    },
    makeLeafDispatchRecord: function(interceptor) {
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    },
    makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
      var interceptor = interceptorClass.prototype;
      if (init.leafTags[tag] === true)
        return H.makeLeafDispatchRecord(interceptor);
      else
        return J.makeDispatchRecord(interceptor, proto, null, null);
    },
    initNativeDispatch: function() {
      if (true === $.initNativeDispatchFlag)
        return;
      $.initNativeDispatchFlag = true;
      H.initNativeDispatchContinue();
    },
    initNativeDispatchContinue: function() {
      var map, tags, fun, i, tag, proto, record, interceptorClass;
      $.dispatchRecordsForInstanceTags = Object.create(null);
      $.interceptorsForUncacheableTags = Object.create(null);
      H.initHooks();
      map = init.interceptorsByTag;
      tags = Object.getOwnPropertyNames(map);
      if (typeof window != "undefined") {
        window;
        fun = function() {
        };
        for (i = 0; i < tags.length; ++i) {
          tag = tags[i];
          proto = $.prototypeForTagFunction.call$1(tag);
          if (proto != null) {
            record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
            if (record != null) {
              Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
              fun.prototype = proto;
            }
          }
        }
      }
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        if (/^[A-Za-z_]/.test(tag)) {
          interceptorClass = map[tag];
          map["!" + tag] = interceptorClass;
          map["~" + tag] = interceptorClass;
          map["-" + tag] = interceptorClass;
          map["+" + tag] = interceptorClass;
          map["*" + tag] = interceptorClass;
        }
      }
    },
    initHooks: function() {
      var transformers, i, transformer, getTag, getUnknownTag, prototypeForTag,
        hooks = C.C_JS_CONST0();
      hooks = H.applyHooksTransformer(C.C_JS_CONST1, H.applyHooksTransformer(C.C_JS_CONST2, H.applyHooksTransformer(C.C_JS_CONST3, H.applyHooksTransformer(C.C_JS_CONST3, H.applyHooksTransformer(C.C_JS_CONST4, H.applyHooksTransformer(C.C_JS_CONST5, H.applyHooksTransformer(C.C_JS_CONST6(C.C_JS_CONST), hooks)))))));
      if (typeof dartNativeDispatchHooksTransformer != "undefined") {
        transformers = dartNativeDispatchHooksTransformer;
        if (typeof transformers == "function")
          transformers = [transformers];
        if (transformers.constructor == Array)
          for (i = 0; i < transformers.length; ++i) {
            transformer = transformers[i];
            if (typeof transformer == "function")
              hooks = transformer(hooks) || hooks;
          }
      }
      getTag = hooks.getTag;
      getUnknownTag = hooks.getUnknownTag;
      prototypeForTag = hooks.prototypeForTag;
      $.getTagFunction = new H.initHooks_closure(getTag);
      $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
      $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
    },
    applyHooksTransformer: function(transformer, hooks) {
      return transformer(hooks) || hooks;
    },
    quoteStringForRegExp: function(string) {
      if (/[[\]{}()*+?.\\^$|]/.test(string))
        return string.replace(/[[\]{}()*+?.\\^$|]/g, "\\$&");
      return string;
    },
    ConstantMap: function ConstantMap() {
    },
    GeneralConstantMap: function GeneralConstantMap(t0, t1) {
      this._jsData = t0;
      this.$ti = t1;
    },
    TypeErrorDecoder: function TypeErrorDecoder(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._pattern = t0;
      _._arguments = t1;
      _._argumentsExpr = t2;
      _._expr = t3;
      _._method = t4;
      _._receiver = t5;
    },
    NullError: function NullError(t0, t1) {
      this.__js_helper$_message = t0;
      this._method = t1;
    },
    JsNoSuchMethodError: function JsNoSuchMethodError(t0, t1, t2) {
      this.__js_helper$_message = t0;
      this._method = t1;
      this._receiver = t2;
    },
    UnknownJsTypeError: function UnknownJsTypeError(t0) {
      this.__js_helper$_message = t0;
    },
    NullThrownFromJavaScriptException: function NullThrownFromJavaScriptException(t0) {
      this._irritant = t0;
    },
    _StackTrace: function _StackTrace(t0) {
      this._exception = t0;
      this._trace = null;
    },
    Closure: function Closure() {
    },
    TearOffClosure: function TearOffClosure() {
    },
    StaticClosure: function StaticClosure() {
    },
    BoundClosure: function BoundClosure(t0, t1, t2, t3) {
      var _ = this;
      _._self = t0;
      _.__js_helper$_target = t1;
      _._receiver = t2;
      _._name = t3;
    },
    RuntimeError: function RuntimeError(t0) {
      this.message = t0;
    },
    _AssertionError: function _AssertionError(t0) {
      this.message = t0;
    },
    JsLinkedHashMap: function JsLinkedHashMap(t0) {
      var _ = this;
      _.__js_helper$_length = 0;
      _._last = _._first = _.__js_helper$_rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    JsLinkedHashMap_values_closure: function JsLinkedHashMap_values_closure(t0) {
      this.$this = t0;
    },
    LinkedHashMapCell: function LinkedHashMapCell(t0, t1) {
      this.hashMapCellKey = t0;
      this.hashMapCellValue = t1;
      this._next = null;
    },
    LinkedHashMapKeyIterable: function LinkedHashMapKeyIterable(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    LinkedHashMapKeyIterator: function LinkedHashMapKeyIterator(t0, t1, t2) {
      var _ = this;
      _._map = t0;
      _._modifications = t1;
      _.__js_helper$_current = _._cell = null;
      _.$ti = t2;
    },
    initHooks_closure: function initHooks_closure(t0) {
      this.getTag = t0;
    },
    initHooks_closure0: function initHooks_closure0(t0) {
      this.getUnknownTag = t0;
    },
    initHooks_closure1: function initHooks_closure1(t0) {
      this.prototypeForTag = t0;
    },
    _checkViewArguments: function(buffer, offsetInBytes, $length) {
      if (!H._isInt(offsetInBytes))
        throw H.wrapException(P.ArgumentError$("Invalid view offsetInBytes " + H.S(offsetInBytes)));
    },
    _ensureNativeList: function(list) {
      var t1, result, i;
      if (type$.JSIndexable_dynamic._is(list))
        return list;
      t1 = J.getInterceptor$asx(list);
      result = P.List_List$filled(t1.get$length(list), null, false, type$.dynamic);
      for (i = 0; i < t1.get$length(list); ++i)
        C.JSArray_methods.$indexSet(result, i, t1.$index(list, i));
      return result;
    },
    NativeFloat32List_NativeFloat32List: function($length) {
      return new Float32Array($length);
    },
    NativeFloat32List_NativeFloat32List$view: function(buffer, offsetInBytes, $length) {
      var t1;
      H._checkViewArguments(buffer, offsetInBytes, $length);
      t1 = new Float32Array(buffer, offsetInBytes);
      return t1;
    },
    NativeInt32List_NativeInt32List: function($length) {
      return new Int32Array($length);
    },
    NativeInt8List_NativeInt8List: function($length) {
      return new Int8Array($length);
    },
    NativeUint16List_NativeUint16List: function($length) {
      if (!H._isInt($length))
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S($length)));
      return new Uint16Array($length);
    },
    NativeUint32List_NativeUint32List: function($length) {
      return new Uint32Array($length);
    },
    NativeUint32List_NativeUint32List$view: function(buffer, offsetInBytes, $length) {
      var t1;
      H._checkViewArguments(buffer, offsetInBytes, $length);
      t1 = new Uint32Array(buffer, offsetInBytes);
      return t1;
    },
    NativeUint8List_NativeUint8List: function($length) {
      if (!H._isInt($length))
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S($length)));
      return new Uint8Array($length);
    },
    NativeUint8List_NativeUint8List$view: function(buffer, offsetInBytes, $length) {
      H._checkViewArguments(buffer, offsetInBytes, $length);
      return $length == null ? new Uint8Array(buffer, offsetInBytes) : new Uint8Array(buffer, offsetInBytes, $length);
    },
    _checkValidIndex: function(index, list, $length) {
      if (index >>> 0 !== index || index >= $length)
        throw H.wrapException(H.diagnoseIndexError(list, index));
    },
    _checkValidRange: function(start, end, $length) {
      var t1;
      if (!(start >>> 0 !== start))
        if (end == null)
          t1 = start > $length;
        else
          t1 = end >>> 0 !== end || start > end || end > $length;
      else
        t1 = true;
      if (t1)
        throw H.wrapException(H.diagnoseRangeError(start, end, $length));
      if (end == null)
        return $length;
      return end;
    },
    NativeByteBuffer: function NativeByteBuffer() {
    },
    NativeTypedData: function NativeTypedData() {
    },
    NativeTypedArray: function NativeTypedArray() {
    },
    NativeTypedArrayOfDouble: function NativeTypedArrayOfDouble() {
    },
    NativeTypedArrayOfInt: function NativeTypedArrayOfInt() {
    },
    NativeFloat32List: function NativeFloat32List() {
    },
    NativeFloat64List: function NativeFloat64List() {
    },
    NativeInt16List: function NativeInt16List() {
    },
    NativeInt32List: function NativeInt32List() {
    },
    NativeInt8List: function NativeInt8List() {
    },
    NativeUint16List: function NativeUint16List() {
    },
    NativeUint32List: function NativeUint32List() {
    },
    NativeUint8ClampedList: function NativeUint8ClampedList() {
    },
    NativeUint8List: function NativeUint8List() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    Rti__getQuestionFromStar: function(universe, rti) {
      var question = rti._precomputed1;
      return question == null ? rti._precomputed1 = H._Universe__lookupQuestionRti(universe, rti._primary, true) : question;
    },
    Rti__getFutureFromFutureOr: function(universe, rti) {
      var future = rti._precomputed1;
      return future == null ? rti._precomputed1 = H._Universe__lookupInterfaceRti(universe, "Future", [rti._primary]) : future;
    },
    Rti__isUnionOfFunctionType: function(rti) {
      var kind = rti._kind;
      if (kind === 6 || kind === 7 || kind === 8)
        return H.Rti__isUnionOfFunctionType(rti._primary);
      return kind === 11 || kind === 12;
    },
    Rti__getCanonicalRecipe: function(rti) {
      return rti._canonicalRecipe;
    },
    findType: function(recipe) {
      return H._Universe_eval(init.typeUniverse, recipe, false);
    },
    _substitute: function(universe, rti, typeArguments, depth) {
      var baseType, substitutedBaseType, interfaceTypeArguments, substitutedInterfaceTypeArguments, base, substitutedBase, $arguments, substitutedArguments, returnType, substitutedReturnType, functionParameters, substitutedFunctionParameters, bounds, substitutedBounds, index, argument,
        kind = rti._kind;
      switch (kind) {
        case 5:
        case 1:
        case 2:
        case 3:
        case 4:
          return rti;
        case 6:
          baseType = rti._primary;
          substitutedBaseType = H._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return H._Universe__lookupStarRti(universe, substitutedBaseType, true);
        case 7:
          baseType = rti._primary;
          substitutedBaseType = H._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return H._Universe__lookupQuestionRti(universe, substitutedBaseType, true);
        case 8:
          baseType = rti._primary;
          substitutedBaseType = H._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return H._Universe__lookupFutureOrRti(universe, substitutedBaseType, true);
        case 9:
          interfaceTypeArguments = rti._rest;
          substitutedInterfaceTypeArguments = H._substituteArray(universe, interfaceTypeArguments, typeArguments, depth);
          if (substitutedInterfaceTypeArguments === interfaceTypeArguments)
            return rti;
          return H._Universe__lookupInterfaceRti(universe, rti._primary, substitutedInterfaceTypeArguments);
        case 10:
          base = rti._primary;
          substitutedBase = H._substitute(universe, base, typeArguments, depth);
          $arguments = rti._rest;
          substitutedArguments = H._substituteArray(universe, $arguments, typeArguments, depth);
          if (substitutedBase === base && substitutedArguments === $arguments)
            return rti;
          return H._Universe__lookupBindingRti(universe, substitutedBase, substitutedArguments);
        case 11:
          returnType = rti._primary;
          substitutedReturnType = H._substitute(universe, returnType, typeArguments, depth);
          functionParameters = rti._rest;
          substitutedFunctionParameters = H._substituteFunctionParameters(universe, functionParameters, typeArguments, depth);
          if (substitutedReturnType === returnType && substitutedFunctionParameters === functionParameters)
            return rti;
          return H._Universe__lookupFunctionRti(universe, substitutedReturnType, substitutedFunctionParameters);
        case 12:
          bounds = rti._rest;
          depth += bounds.length;
          substitutedBounds = H._substituteArray(universe, bounds, typeArguments, depth);
          base = rti._primary;
          substitutedBase = H._substitute(universe, base, typeArguments, depth);
          if (substitutedBounds === bounds && substitutedBase === base)
            return rti;
          return H._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, true);
        case 13:
          index = rti._primary;
          if (index < depth)
            return rti;
          argument = typeArguments[index - depth];
          if (argument == null)
            return rti;
          return argument;
        default:
          throw H.wrapException(P.AssertionError$("Attempted to substitute unexpected RTI kind " + kind));
      }
    },
    _substituteArray: function(universe, rtiArray, typeArguments, depth) {
      var changed, i, rti, substitutedRti,
        $length = rtiArray.length,
        result = [];
      for (changed = false, i = 0; i < $length; ++i) {
        rti = rtiArray[i];
        substitutedRti = H._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
          changed = true;
        result.push(substitutedRti);
      }
      return changed ? result : rtiArray;
    },
    _substituteNamed: function(universe, namedArray, typeArguments, depth) {
      var changed, i, t1, t2, rti, substitutedRti,
        $length = namedArray.length,
        result = [];
      for (changed = false, i = 0; i < $length; i += 3) {
        t1 = namedArray[i];
        t2 = namedArray[i + 1];
        rti = namedArray[i + 2];
        substitutedRti = H._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
          changed = true;
        result.push(t1);
        result.push(t2);
        result.push(substitutedRti);
      }
      return changed ? result : namedArray;
    },
    _substituteFunctionParameters: function(universe, functionParameters, typeArguments, depth) {
      var result,
        requiredPositional = functionParameters._requiredPositional,
        substitutedRequiredPositional = H._substituteArray(universe, requiredPositional, typeArguments, depth),
        optionalPositional = functionParameters._optionalPositional,
        substitutedOptionalPositional = H._substituteArray(universe, optionalPositional, typeArguments, depth),
        named = functionParameters._named,
        substitutedNamed = H._substituteNamed(universe, named, typeArguments, depth);
      if (substitutedRequiredPositional === requiredPositional && substitutedOptionalPositional === optionalPositional && substitutedNamed === named)
        return functionParameters;
      result = new H._FunctionParameters();
      result._requiredPositional = substitutedRequiredPositional;
      result._optionalPositional = substitutedOptionalPositional;
      result._named = substitutedNamed;
      return result;
    },
    setRuntimeTypeInfo: function(target, rti) {
      target[init.arrayRti] = rti;
      return target;
    },
    closureFunctionType: function(closure) {
      var signature = closure.$signature;
      if (signature != null) {
        if (typeof signature == "number")
          return H.getTypeFromTypesTable(signature);
        return closure.$signature();
      }
      return null;
    },
    instanceOrFunctionType: function(object, testRti) {
      var rti;
      if (H.Rti__isUnionOfFunctionType(testRti))
        if (object instanceof H.Closure) {
          rti = H.closureFunctionType(object);
          if (rti != null)
            return rti;
        }
      return H.instanceType(object);
    },
    instanceType: function(object) {
      var rti;
      if (object instanceof P.Object) {
        rti = object.$ti;
        return rti != null ? rti : H._instanceTypeFromConstructor(object);
      }
      if (Array.isArray(object))
        return H._arrayInstanceType(object);
      return H._instanceTypeFromConstructor(J.getInterceptor$(object));
    },
    _arrayInstanceType: function(object) {
      var rti = object[init.arrayRti],
        defaultRti = type$.JSArray_dynamic;
      if (rti == null)
        return defaultRti;
      if (rti.constructor !== defaultRti.constructor)
        return defaultRti;
      return rti;
    },
    _instanceType: function(object) {
      var rti = object.$ti;
      return rti != null ? rti : H._instanceTypeFromConstructor(object);
    },
    _instanceTypeFromConstructor: function(instance) {
      var $constructor = instance.constructor,
        probe = $constructor.$ccache;
      if (probe != null)
        return probe;
      return H._instanceTypeFromConstructorMiss(instance, $constructor);
    },
    _instanceTypeFromConstructorMiss: function(instance, $constructor) {
      var effectiveConstructor = instance instanceof H.Closure ? instance.__proto__.__proto__.constructor : $constructor,
        rti = H._Universe_findErasedType(init.typeUniverse, effectiveConstructor.name);
      $constructor.$ccache = rti;
      return rti;
    },
    getTypeFromTypesTable: function(index) {
      var table, type, rti;
      H._asIntS(index);
      table = init.types;
      type = table[index];
      if (typeof type == "string") {
        rti = H._Universe_eval(init.typeUniverse, type, false);
        table[index] = rti;
        return rti;
      }
      return type;
    },
    _installSpecializedIsTest: function(object) {
      var unstarred, isFn, testRti = this,
        t1 = type$.Object;
      if (testRti === t1)
        return H._finishIsFn(testRti, object, H._isObject);
      if (!H.isStrongTopType(testRti))
        if (!(testRti === type$.legacy_Object))
          t1 = testRti === t1;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        return H._finishIsFn(testRti, object, H._isTop);
      t1 = testRti._kind;
      unstarred = t1 === 6 ? testRti._primary : testRti;
      if (unstarred === type$.int)
        isFn = H._isInt;
      else if (unstarred === type$.double || unstarred === type$.num)
        isFn = H._isNum;
      else if (unstarred === type$.String)
        isFn = H._isString;
      else
        isFn = unstarred === type$.bool ? H._isBool : null;
      if (isFn != null)
        return H._finishIsFn(testRti, object, isFn);
      if (unstarred._kind === 9) {
        t1 = unstarred._primary;
        if (unstarred._rest.every(H.isTopType)) {
          testRti._specializedTestResource = "$is" + t1;
          return H._finishIsFn(testRti, object, H._isTestViaProperty);
        }
      } else if (t1 === 7)
        return H._finishIsFn(testRti, object, H._generalNullableIsTestImplementation);
      return H._finishIsFn(testRti, object, H._generalIsTestImplementation);
    },
    _finishIsFn: function(testRti, object, isFn) {
      testRti._is = isFn;
      return testRti._is(object);
    },
    _installSpecializedAsCheck: function(object) {
      var t1, asFn, testRti = this;
      if (!H.isStrongTopType(testRti))
        if (!(testRti === type$.legacy_Object))
          t1 = testRti === type$.Object;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        asFn = H._asTop;
      else if (testRti === type$.Object)
        asFn = H._asObject;
      else
        asFn = H._generalNullableAsCheckImplementation;
      testRti._as = asFn;
      return testRti._as(object);
    },
    _nullIs: function(testRti) {
      var t1,
        kind = testRti._kind;
      if (!H.isStrongTopType(testRti))
        if (!(testRti === type$.legacy_Object))
          if (!(testRti === type$.legacy_Never))
            if (kind !== 7)
              t1 = kind === 8 && H._nullIs(testRti._primary) || testRti === type$.Null || testRti === type$.JSNull;
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    _generalIsTestImplementation: function(object) {
      var testRti = this;
      if (object == null)
        return H._nullIs(testRti);
      return H._isSubtype(init.typeUniverse, H.instanceOrFunctionType(object, testRti), null, testRti, null);
    },
    _generalNullableIsTestImplementation: function(object) {
      if (object == null)
        return true;
      return this._primary._is(object);
    },
    _isTestViaProperty: function(object) {
      var tag, testRti = this;
      if (object == null)
        return H._nullIs(testRti);
      tag = testRti._specializedTestResource;
      if (object instanceof P.Object)
        return !!object[tag];
      return !!J.getInterceptor$(object)[tag];
    },
    _generalAsCheckImplementation: function(object) {
      var testRti = this;
      if (object == null)
        return object;
      else if (testRti._is(object))
        return object;
      H._failedAsCheck(object, testRti);
    },
    _generalNullableAsCheckImplementation: function(object) {
      var testRti = this;
      if (object == null)
        return object;
      else if (testRti._is(object))
        return object;
      H._failedAsCheck(object, testRti);
    },
    _failedAsCheck: function(object, testRti) {
      throw H.wrapException(H._TypeError$fromMessage(H._Error_compose(object, H.instanceOrFunctionType(object, testRti), H._rtiToString(testRti, null))));
    },
    _Error_compose: function(object, objectRti, checkedTypeDescription) {
      var objectDescription = P.Error_safeToString(object),
        objectTypeDescription = H._rtiToString(objectRti == null ? H.instanceType(object) : objectRti, null);
      return objectDescription + ": type '" + H.S(objectTypeDescription) + "' is not a subtype of type '" + H.S(checkedTypeDescription) + "'";
    },
    _TypeError$fromMessage: function(message) {
      return new H._TypeError("TypeError: " + message);
    },
    _TypeError__TypeError$forType: function(object, type) {
      return new H._TypeError("TypeError: " + H._Error_compose(object, null, type));
    },
    _isObject: function(object) {
      return object != null;
    },
    _asObject: function(object) {
      return object;
    },
    _isTop: function(object) {
      return true;
    },
    _asTop: function(object) {
      return object;
    },
    _isBool: function(object) {
      return true === object || false === object;
    },
    _asBool: function(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "bool"));
    },
    _asBoolS: function(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "bool"));
    },
    _asBoolQ: function(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "bool?"));
    },
    _asDouble: function(object) {
      if (typeof object == "number")
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "double"));
    },
    _asDoubleS: function(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "double"));
    },
    _asDoubleQ: function(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "double?"));
    },
    _isInt: function(object) {
      return typeof object == "number" && Math.floor(object) === object;
    },
    _asInt: function(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "int"));
    },
    _asIntS: function(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "int"));
    },
    _asIntQ: function(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "int?"));
    },
    _isNum: function(object) {
      return typeof object == "number";
    },
    _asNum: function(object) {
      if (typeof object == "number")
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "num"));
    },
    _asNumS: function(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "num"));
    },
    _asNumQ: function(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "num?"));
    },
    _isString: function(object) {
      return typeof object == "string";
    },
    _asString: function(object) {
      if (typeof object == "string")
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "String"));
    },
    _asStringS: function(object) {
      if (typeof object == "string")
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "String"));
    },
    _asStringQ: function(object) {
      if (typeof object == "string")
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "String?"));
    },
    _rtiArrayToString: function(array, genericContext) {
      var s, sep, i;
      for (s = "", sep = "", i = 0; i < array.length; ++i, sep = ", ")
        s += C.JSString_methods.$add(sep, H._rtiToString(array[i], genericContext));
      return s;
    },
    _functionRtiToString: function(functionType, genericContext, bounds) {
      var boundsLength, outerContextLength, offset, i, t1, t2, t3, typeParametersText, typeSep, t4, t5, boundRti, kind, parameters, requiredPositional, requiredPositionalLength, optionalPositional, optionalPositionalLength, named, namedLength, returnTypeText, argumentsText, sep, _s2_ = ", ";
      if (bounds != null) {
        boundsLength = bounds.length;
        if (genericContext == null) {
          genericContext = H.setRuntimeTypeInfo([], type$.JSArray_String);
          outerContextLength = null;
        } else
          outerContextLength = genericContext.length;
        offset = genericContext.length;
        for (i = boundsLength; i > 0; --i)
          C.JSArray_methods.add$1(genericContext, "T" + (offset + i));
        for (t1 = type$.nullable_Object, t2 = type$.legacy_Object, t3 = type$.Object, typeParametersText = "<", typeSep = "", i = 0; i < boundsLength; ++i, typeSep = _s2_) {
          typeParametersText += typeSep;
          t4 = genericContext.length;
          t5 = t4 - 1 - i;
          if (t5 < 0)
            return H.ioore(genericContext, t5);
          typeParametersText = C.JSString_methods.$add(typeParametersText, genericContext[t5]);
          boundRti = bounds[i];
          kind = boundRti._kind;
          if (!(kind === 2 || kind === 3 || kind === 4 || kind === 5 || boundRti === t1))
            if (!(boundRti === t2))
              t4 = boundRti === t3;
            else
              t4 = true;
          else
            t4 = true;
          if (!t4)
            typeParametersText += C.JSString_methods.$add(" extends ", H._rtiToString(boundRti, genericContext));
        }
        typeParametersText += ">";
      } else {
        typeParametersText = "";
        outerContextLength = null;
      }
      t1 = functionType._primary;
      parameters = functionType._rest;
      requiredPositional = parameters._requiredPositional;
      requiredPositionalLength = requiredPositional.length;
      optionalPositional = parameters._optionalPositional;
      optionalPositionalLength = optionalPositional.length;
      named = parameters._named;
      namedLength = named.length;
      returnTypeText = H._rtiToString(t1, genericContext);
      for (argumentsText = "", sep = "", i = 0; i < requiredPositionalLength; ++i, sep = _s2_)
        argumentsText += C.JSString_methods.$add(sep, H._rtiToString(requiredPositional[i], genericContext));
      if (optionalPositionalLength > 0) {
        argumentsText += sep + "[";
        for (sep = "", i = 0; i < optionalPositionalLength; ++i, sep = _s2_)
          argumentsText += C.JSString_methods.$add(sep, H._rtiToString(optionalPositional[i], genericContext));
        argumentsText += "]";
      }
      if (namedLength > 0) {
        argumentsText += sep + "{";
        for (sep = "", i = 0; i < namedLength; i += 3, sep = _s2_) {
          argumentsText += sep;
          if (named[i + 1])
            argumentsText += "required ";
          argumentsText += J.$add$ansx(H._rtiToString(named[i + 2], genericContext), " ") + named[i];
        }
        argumentsText += "}";
      }
      if (outerContextLength != null) {
        genericContext.toString;
        genericContext.length = outerContextLength;
      }
      return typeParametersText + "(" + argumentsText + ") => " + H.S(returnTypeText);
    },
    _rtiToString: function(rti, genericContext) {
      var s, questionArgument, argumentKind, $name, $arguments, t1, t2,
        kind = rti._kind;
      if (kind === 5)
        return "erased";
      if (kind === 2)
        return "dynamic";
      if (kind === 3)
        return "void";
      if (kind === 1)
        return "Never";
      if (kind === 4)
        return "any";
      if (kind === 6) {
        s = H._rtiToString(rti._primary, genericContext);
        return s;
      }
      if (kind === 7) {
        questionArgument = rti._primary;
        s = H._rtiToString(questionArgument, genericContext);
        argumentKind = questionArgument._kind;
        return J.$add$ansx(argumentKind === 11 || argumentKind === 12 ? C.JSString_methods.$add("(", s) + ")" : s, "?");
      }
      if (kind === 8)
        return "FutureOr<" + H.S(H._rtiToString(rti._primary, genericContext)) + ">";
      if (kind === 9) {
        $name = H._unminifyOrTag(rti._primary);
        $arguments = rti._rest;
        return $arguments.length !== 0 ? $name + ("<" + H._rtiArrayToString($arguments, genericContext) + ">") : $name;
      }
      if (kind === 11)
        return H._functionRtiToString(rti, genericContext, null);
      if (kind === 12)
        return H._functionRtiToString(rti._primary, genericContext, rti._rest);
      if (kind === 13) {
        genericContext.toString;
        t1 = rti._primary;
        t2 = genericContext.length;
        t1 = t2 - 1 - t1;
        if (t1 < 0 || t1 >= t2)
          return H.ioore(genericContext, t1);
        return genericContext[t1];
      }
      return "?";
    },
    _unminifyOrTag: function(rawClassName) {
      var preserved = H.unmangleGlobalNameIfPreservedAnyways(rawClassName);
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    _Universe_findRule: function(universe, targetType) {
      var rule = universe.tR[targetType];
      for (; typeof rule == "string";)
        rule = universe.tR[rule];
      return rule;
    },
    _Universe_findErasedType: function(universe, cls) {
      var $length, erased, $arguments, i, $interface,
        metadata = universe.eT,
        probe = metadata[cls];
      if (probe == null)
        return H._Universe_eval(universe, cls, false);
      else if (typeof probe == "number") {
        $length = probe;
        erased = H._Universe__lookupTerminalRti(universe, 5, "#");
        $arguments = [];
        for (i = 0; i < $length; ++i)
          $arguments.push(erased);
        $interface = H._Universe__lookupInterfaceRti(universe, cls, $arguments);
        metadata[cls] = $interface;
        return $interface;
      } else
        return probe;
    },
    _Universe_addRules: function(universe, rules) {
      return H._Utils_objectAssign(universe.tR, rules);
    },
    _Universe_addErasedTypes: function(universe, types) {
      return H._Utils_objectAssign(universe.eT, types);
    },
    _Universe_eval: function(universe, recipe, normalize) {
      var rti,
        cache = universe.eC,
        probe = cache.get(recipe);
      if (probe != null)
        return probe;
      rti = H._Parser_parse(H._Parser_create(universe, null, recipe, normalize));
      cache.set(recipe, rti);
      return rti;
    },
    _Universe_evalInEnvironment: function(universe, environment, recipe) {
      var probe, rti,
        cache = environment._evalCache;
      if (cache == null)
        cache = environment._evalCache = new Map();
      probe = cache.get(recipe);
      if (probe != null)
        return probe;
      rti = H._Parser_parse(H._Parser_create(universe, environment, recipe, true));
      cache.set(recipe, rti);
      return rti;
    },
    _Universe_bind: function(universe, environment, argumentsRti) {
      var argumentsRecipe, probe, rti,
        cache = environment._bindCache;
      if (cache == null)
        cache = environment._bindCache = new Map();
      argumentsRecipe = argumentsRti._canonicalRecipe;
      probe = cache.get(argumentsRecipe);
      if (probe != null)
        return probe;
      rti = H._Universe__lookupBindingRti(universe, environment, argumentsRti._kind === 10 ? argumentsRti._rest : [argumentsRti]);
      cache.set(argumentsRecipe, rti);
      return rti;
    },
    _Universe__installTypeTests: function(universe, rti) {
      rti._as = H._installSpecializedAsCheck;
      rti._is = H._installSpecializedIsTest;
      return rti;
    },
    _Universe__lookupTerminalRti: function(universe, kind, key) {
      var rti, t1,
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new H.Rti(null, null);
      rti._kind = kind;
      rti._canonicalRecipe = key;
      t1 = H._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupStarRti: function(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "*",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = H._Universe__createStarRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createStarRti: function(universe, baseType, key, normalize) {
      var baseKind, t1, rti;
      if (normalize) {
        baseKind = baseType._kind;
        if (!H.isStrongTopType(baseType))
          t1 = baseType === type$.Null || baseType === type$.JSNull || baseKind === 7 || baseKind === 6;
        else
          t1 = true;
        if (t1)
          return baseType;
      }
      rti = new H.Rti(null, null);
      rti._kind = 6;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return H._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupQuestionRti: function(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "?",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = H._Universe__createQuestionRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createQuestionRti: function(universe, baseType, key, normalize) {
      var baseKind, t1, starArgument, rti;
      if (normalize) {
        baseKind = baseType._kind;
        if (!H.isStrongTopType(baseType))
          if (!(baseType === type$.Null || baseType === type$.JSNull))
            if (baseKind !== 7)
              t1 = baseKind === 8 && H.isNullable(baseType._primary);
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
        if (t1)
          return baseType;
        else if (baseKind === 1 || baseType === type$.legacy_Never)
          return type$.Null;
        else if (baseKind === 6) {
          starArgument = baseType._primary;
          if (starArgument._kind === 8 && H.isNullable(starArgument._primary))
            return starArgument;
          else
            return H.Rti__getQuestionFromStar(universe, baseType);
        }
      }
      rti = new H.Rti(null, null);
      rti._kind = 7;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return H._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupFutureOrRti: function(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "/",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = H._Universe__createFutureOrRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createFutureOrRti: function(universe, baseType, key, normalize) {
      var t1, t2, rti;
      if (normalize) {
        t1 = baseType._kind;
        if (!H.isStrongTopType(baseType))
          if (!(baseType === type$.legacy_Object))
            t2 = baseType === type$.Object;
          else
            t2 = true;
        else
          t2 = true;
        if (t2 || baseType === type$.Object)
          return baseType;
        else if (t1 === 1)
          return H._Universe__lookupInterfaceRti(universe, "Future", [baseType]);
        else if (baseType === type$.Null || baseType === type$.JSNull)
          return type$.nullable_Future_Null;
      }
      rti = new H.Rti(null, null);
      rti._kind = 8;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return H._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupGenericFunctionParameterRti: function(universe, index) {
      var rti, t1,
        key = "" + index + "^",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new H.Rti(null, null);
      rti._kind = 13;
      rti._primary = index;
      rti._canonicalRecipe = key;
      t1 = H._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__canonicalRecipeJoin: function($arguments) {
      var s, sep, i,
        $length = $arguments.length;
      for (s = "", sep = "", i = 0; i < $length; ++i, sep = ",")
        s += sep + $arguments[i]._canonicalRecipe;
      return s;
    },
    _Universe__canonicalRecipeJoinNamed: function($arguments) {
      var s, sep, i, t1, nameSep, s0,
        $length = $arguments.length;
      for (s = "", sep = "", i = 0; i < $length; i += 3, sep = ",") {
        t1 = $arguments[i];
        nameSep = $arguments[i + 1] ? "!" : ":";
        s0 = $arguments[i + 2]._canonicalRecipe;
        s += sep + t1 + nameSep + s0;
      }
      return s;
    },
    _Universe__lookupInterfaceRti: function(universe, $name, $arguments) {
      var probe, rti, t1,
        s = $name;
      if ($arguments.length !== 0)
        s += "<" + H._Universe__canonicalRecipeJoin($arguments) + ">";
      probe = universe.eC.get(s);
      if (probe != null)
        return probe;
      rti = new H.Rti(null, null);
      rti._kind = 9;
      rti._primary = $name;
      rti._rest = $arguments;
      if ($arguments.length > 0)
        rti._precomputed1 = $arguments[0];
      rti._canonicalRecipe = s;
      t1 = H._Universe__installTypeTests(universe, rti);
      universe.eC.set(s, t1);
      return t1;
    },
    _Universe__lookupBindingRti: function(universe, base, $arguments) {
      var newBase, newArguments, key, probe, rti, t1;
      if (base._kind === 10) {
        newBase = base._primary;
        newArguments = base._rest.concat($arguments);
      } else {
        newArguments = $arguments;
        newBase = base;
      }
      key = newBase._canonicalRecipe + (";<" + H._Universe__canonicalRecipeJoin(newArguments) + ">");
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new H.Rti(null, null);
      rti._kind = 10;
      rti._primary = newBase;
      rti._rest = newArguments;
      rti._canonicalRecipe = key;
      t1 = H._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupFunctionRti: function(universe, returnType, parameters) {
      var sep, t1, key, probe, rti,
        s = returnType._canonicalRecipe,
        requiredPositional = parameters._requiredPositional,
        requiredPositionalLength = requiredPositional.length,
        optionalPositional = parameters._optionalPositional,
        optionalPositionalLength = optionalPositional.length,
        named = parameters._named,
        namedLength = named.length,
        recipe = "(" + H._Universe__canonicalRecipeJoin(requiredPositional);
      if (optionalPositionalLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        t1 = H._Universe__canonicalRecipeJoin(optionalPositional);
        recipe += sep + "[" + t1 + "]";
      }
      if (namedLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        t1 = H._Universe__canonicalRecipeJoinNamed(named);
        recipe += sep + "{" + t1 + "}";
      }
      key = s + (recipe + ")");
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new H.Rti(null, null);
      rti._kind = 11;
      rti._primary = returnType;
      rti._rest = parameters;
      rti._canonicalRecipe = key;
      t1 = H._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupGenericFunctionRti: function(universe, baseFunctionType, bounds, normalize) {
      var t1,
        key = baseFunctionType._canonicalRecipe + ("<" + H._Universe__canonicalRecipeJoin(bounds) + ">"),
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = H._Universe__createGenericFunctionRti(universe, baseFunctionType, bounds, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createGenericFunctionRti: function(universe, baseFunctionType, bounds, key, normalize) {
      var $length, typeArguments, count, i, bound, substitutedBase, substitutedBounds, rti;
      if (normalize) {
        $length = bounds.length;
        typeArguments = new Array($length);
        for (count = 0, i = 0; i < $length; ++i) {
          bound = bounds[i];
          if (bound._kind === 1) {
            typeArguments[i] = bound;
            ++count;
          }
        }
        if (count > 0) {
          substitutedBase = H._substitute(universe, baseFunctionType, typeArguments, 0);
          substitutedBounds = H._substituteArray(universe, bounds, typeArguments, 0);
          return H._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, bounds !== substitutedBounds);
        }
      }
      rti = new H.Rti(null, null);
      rti._kind = 12;
      rti._primary = baseFunctionType;
      rti._rest = bounds;
      rti._canonicalRecipe = key;
      return H._Universe__installTypeTests(universe, rti);
    },
    _Parser_create: function(universe, environment, recipe, normalize) {
      return {u: universe, e: environment, r: recipe, s: [], p: 0, n: normalize};
    },
    _Parser_parse: function(parser) {
      var t1, i, ch, universe, array, head, base, u, parameters, optionalPositional, named, item,
        source = parser.r,
        stack = parser.s;
      for (t1 = source.length, i = 0; i < t1;) {
        ch = source.charCodeAt(i);
        if (ch >= 48 && ch <= 57)
          i = H._Parser_handleDigit(i + 1, ch, source, stack);
        else if ((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36)
          i = H._Parser_handleIdentifier(parser, i, source, stack, false);
        else if (ch === 46)
          i = H._Parser_handleIdentifier(parser, i, source, stack, true);
        else {
          ++i;
          switch (ch) {
            case 44:
              break;
            case 58:
              stack.push(false);
              break;
            case 33:
              stack.push(true);
              break;
            case 59:
              stack.push(H._Parser_toType(parser.u, parser.e, stack.pop()));
              break;
            case 94:
              stack.push(H._Universe__lookupGenericFunctionParameterRti(parser.u, stack.pop()));
              break;
            case 35:
              stack.push(H._Universe__lookupTerminalRti(parser.u, 5, "#"));
              break;
            case 64:
              stack.push(H._Universe__lookupTerminalRti(parser.u, 2, "@"));
              break;
            case 126:
              stack.push(H._Universe__lookupTerminalRti(parser.u, 3, "~"));
              break;
            case 60:
              stack.push(parser.p);
              parser.p = stack.length;
              break;
            case 62:
              universe = parser.u;
              array = stack.splice(parser.p);
              H._Parser_toTypes(parser.u, parser.e, array);
              parser.p = stack.pop();
              head = stack.pop();
              if (typeof head == "string")
                stack.push(H._Universe__lookupInterfaceRti(universe, head, array));
              else {
                base = H._Parser_toType(universe, parser.e, head);
                switch (base._kind) {
                  case 11:
                    stack.push(H._Universe__lookupGenericFunctionRti(universe, base, array, parser.n));
                    break;
                  default:
                    stack.push(H._Universe__lookupBindingRti(universe, base, array));
                    break;
                }
              }
              break;
            case 38:
              H._Parser_handleExtendedOperations(parser, stack);
              break;
            case 42:
              u = parser.u;
              stack.push(H._Universe__lookupStarRti(u, H._Parser_toType(u, parser.e, stack.pop()), parser.n));
              break;
            case 63:
              u = parser.u;
              stack.push(H._Universe__lookupQuestionRti(u, H._Parser_toType(u, parser.e, stack.pop()), parser.n));
              break;
            case 47:
              u = parser.u;
              stack.push(H._Universe__lookupFutureOrRti(u, H._Parser_toType(u, parser.e, stack.pop()), parser.n));
              break;
            case 40:
              stack.push(parser.p);
              parser.p = stack.length;
              break;
            case 41:
              universe = parser.u;
              parameters = new H._FunctionParameters();
              optionalPositional = universe.sEA;
              named = universe.sEA;
              head = stack.pop();
              if (typeof head == "number")
                switch (head) {
                  case -1:
                    optionalPositional = stack.pop();
                    break;
                  case -2:
                    named = stack.pop();
                    break;
                  default:
                    stack.push(head);
                    break;
                }
              else
                stack.push(head);
              array = stack.splice(parser.p);
              H._Parser_toTypes(parser.u, parser.e, array);
              parser.p = stack.pop();
              parameters._requiredPositional = array;
              parameters._optionalPositional = optionalPositional;
              parameters._named = named;
              stack.push(H._Universe__lookupFunctionRti(universe, H._Parser_toType(universe, parser.e, stack.pop()), parameters));
              break;
            case 91:
              stack.push(parser.p);
              parser.p = stack.length;
              break;
            case 93:
              array = stack.splice(parser.p);
              H._Parser_toTypes(parser.u, parser.e, array);
              parser.p = stack.pop();
              stack.push(array);
              stack.push(-1);
              break;
            case 123:
              stack.push(parser.p);
              parser.p = stack.length;
              break;
            case 125:
              array = stack.splice(parser.p);
              H._Parser_toTypesNamed(parser.u, parser.e, array);
              parser.p = stack.pop();
              stack.push(array);
              stack.push(-2);
              break;
            default:
              throw "Bad character " + ch;
          }
        }
      }
      item = stack.pop();
      return H._Parser_toType(parser.u, parser.e, item);
    },
    _Parser_handleDigit: function(i, digit, source, stack) {
      var t1, ch,
        value = digit - 48;
      for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (!(ch >= 48 && ch <= 57))
          break;
        value = value * 10 + (ch - 48);
      }
      stack.push(value);
      return i;
    },
    _Parser_handleIdentifier: function(parser, start, source, stack, hasPeriod) {
      var t1, ch, t2, string, environment, recipe,
        i = start + 1;
      for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (ch === 46) {
          if (hasPeriod)
            break;
          hasPeriod = true;
        } else {
          if (!((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36))
            t2 = ch >= 48 && ch <= 57;
          else
            t2 = true;
          if (!t2)
            break;
        }
      }
      string = source.substring(start, i);
      if (hasPeriod) {
        t1 = parser.u;
        environment = parser.e;
        if (environment._kind === 10)
          environment = environment._primary;
        recipe = H._Universe_findRule(t1, environment._primary)[string];
        if (recipe == null)
          H.throwExpression('No "' + string + '" in "' + H.Rti__getCanonicalRecipe(environment) + '"');
        stack.push(H._Universe_evalInEnvironment(t1, environment, recipe));
      } else
        stack.push(string);
      return i;
    },
    _Parser_handleExtendedOperations: function(parser, stack) {
      var $top = stack.pop();
      if (0 === $top) {
        stack.push(H._Universe__lookupTerminalRti(parser.u, 1, "0&"));
        return;
      }
      if (1 === $top) {
        stack.push(H._Universe__lookupTerminalRti(parser.u, 4, "1&"));
        return;
      }
      throw H.wrapException(P.AssertionError$("Unexpected extended operation " + H.S($top)));
    },
    _Parser_toType: function(universe, environment, item) {
      if (typeof item == "string")
        return H._Universe__lookupInterfaceRti(universe, item, universe.sEA);
      else if (typeof item == "number")
        return H._Parser_indexToType(universe, environment, item);
      else
        return item;
    },
    _Parser_toTypes: function(universe, environment, items) {
      var i,
        $length = items.length;
      for (i = 0; i < $length; ++i)
        items[i] = H._Parser_toType(universe, environment, items[i]);
    },
    _Parser_toTypesNamed: function(universe, environment, items) {
      var i,
        $length = items.length;
      for (i = 2; i < $length; i += 3)
        items[i] = H._Parser_toType(universe, environment, items[i]);
    },
    _Parser_indexToType: function(universe, environment, index) {
      var typeArguments, len,
        kind = environment._kind;
      if (kind === 10) {
        if (index === 0)
          return environment._primary;
        typeArguments = environment._rest;
        len = typeArguments.length;
        if (index <= len)
          return typeArguments[index - 1];
        index -= len;
        environment = environment._primary;
        kind = environment._kind;
      } else if (index === 0)
        return environment;
      if (kind !== 9)
        throw H.wrapException(P.AssertionError$("Indexed base must be an interface type"));
      typeArguments = environment._rest;
      if (index <= typeArguments.length)
        return typeArguments[index - 1];
      throw H.wrapException(P.AssertionError$("Bad index " + index + " for " + environment.toString$0(0)));
    },
    _isSubtype: function(universe, s, sEnv, t, tEnv) {
      var t1, sKind, leftTypeVariable, tKind, sBounds, tBounds, sLength, i, sBound, tBound;
      if (s === t)
        return true;
      if (!H.isStrongTopType(t))
        if (!(t === type$.legacy_Object))
          t1 = t === type$.Object;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        return true;
      sKind = s._kind;
      if (sKind === 4)
        return true;
      if (H.isStrongTopType(s))
        return false;
      if (s._kind !== 1)
        t1 = s === type$.Null || s === type$.JSNull;
      else
        t1 = true;
      if (t1)
        return true;
      leftTypeVariable = sKind === 13;
      if (leftTypeVariable)
        if (H._isSubtype(universe, sEnv[s._primary], sEnv, t, tEnv))
          return true;
      tKind = t._kind;
      if (sKind === 6)
        return H._isSubtype(universe, s._primary, sEnv, t, tEnv);
      if (tKind === 6) {
        t1 = t._primary;
        return H._isSubtype(universe, s, sEnv, t1, tEnv);
      }
      if (sKind === 8) {
        if (!H._isSubtype(universe, s._primary, sEnv, t, tEnv))
          return false;
        return H._isSubtype(universe, H.Rti__getFutureFromFutureOr(universe, s), sEnv, t, tEnv);
      }
      if (sKind === 7) {
        t1 = H._isSubtype(universe, s._primary, sEnv, t, tEnv);
        return t1;
      }
      if (tKind === 8) {
        if (H._isSubtype(universe, s, sEnv, t._primary, tEnv))
          return true;
        return H._isSubtype(universe, s, sEnv, H.Rti__getFutureFromFutureOr(universe, t), tEnv);
      }
      if (tKind === 7) {
        t1 = H._isSubtype(universe, s, sEnv, t._primary, tEnv);
        return t1;
      }
      if (leftTypeVariable)
        return false;
      t1 = sKind !== 11;
      if ((!t1 || sKind === 12) && t === type$.Function)
        return true;
      if (tKind === 12) {
        if (s === type$.JavaScriptFunction)
          return true;
        if (sKind !== 12)
          return false;
        sBounds = s._rest;
        tBounds = t._rest;
        sLength = sBounds.length;
        if (sLength !== tBounds.length)
          return false;
        sEnv = sEnv == null ? sBounds : sBounds.concat(sEnv);
        tEnv = tEnv == null ? tBounds : tBounds.concat(tEnv);
        for (i = 0; i < sLength; ++i) {
          sBound = sBounds[i];
          tBound = tBounds[i];
          if (!H._isSubtype(universe, sBound, sEnv, tBound, tEnv) || !H._isSubtype(universe, tBound, tEnv, sBound, sEnv))
            return false;
        }
        return H._isFunctionSubtype(universe, s._primary, sEnv, t._primary, tEnv);
      }
      if (tKind === 11) {
        if (s === type$.JavaScriptFunction)
          return true;
        if (t1)
          return false;
        return H._isFunctionSubtype(universe, s, sEnv, t, tEnv);
      }
      if (sKind === 9) {
        if (tKind !== 9)
          return false;
        return H._isInterfaceSubtype(universe, s, sEnv, t, tEnv);
      }
      return false;
    },
    _isFunctionSubtype: function(universe, s, sEnv, t, tEnv) {
      var sParameters, tParameters, sRequiredPositional, tRequiredPositional, sRequiredPositionalLength, tRequiredPositionalLength, requiredPositionalDelta, sOptionalPositional, tOptionalPositional, sOptionalPositionalLength, tOptionalPositionalLength, i, t1, sNamed, tNamed, sNamedLength, tNamedLength, sIndex, tIndex, tName, sName;
      if (!H._isSubtype(universe, s._primary, sEnv, t._primary, tEnv))
        return false;
      sParameters = s._rest;
      tParameters = t._rest;
      sRequiredPositional = sParameters._requiredPositional;
      tRequiredPositional = tParameters._requiredPositional;
      sRequiredPositionalLength = sRequiredPositional.length;
      tRequiredPositionalLength = tRequiredPositional.length;
      if (sRequiredPositionalLength > tRequiredPositionalLength)
        return false;
      requiredPositionalDelta = tRequiredPositionalLength - sRequiredPositionalLength;
      sOptionalPositional = sParameters._optionalPositional;
      tOptionalPositional = tParameters._optionalPositional;
      sOptionalPositionalLength = sOptionalPositional.length;
      tOptionalPositionalLength = tOptionalPositional.length;
      if (sRequiredPositionalLength + sOptionalPositionalLength < tRequiredPositionalLength + tOptionalPositionalLength)
        return false;
      for (i = 0; i < sRequiredPositionalLength; ++i) {
        t1 = sRequiredPositional[i];
        if (!H._isSubtype(universe, tRequiredPositional[i], tEnv, t1, sEnv))
          return false;
      }
      for (i = 0; i < requiredPositionalDelta; ++i) {
        t1 = sOptionalPositional[i];
        if (!H._isSubtype(universe, tRequiredPositional[sRequiredPositionalLength + i], tEnv, t1, sEnv))
          return false;
      }
      for (i = 0; i < tOptionalPositionalLength; ++i) {
        t1 = sOptionalPositional[requiredPositionalDelta + i];
        if (!H._isSubtype(universe, tOptionalPositional[i], tEnv, t1, sEnv))
          return false;
      }
      sNamed = sParameters._named;
      tNamed = tParameters._named;
      sNamedLength = sNamed.length;
      tNamedLength = tNamed.length;
      for (sIndex = 0, tIndex = 0; tIndex < tNamedLength; tIndex += 3) {
        tName = tNamed[tIndex];
        for (; true;) {
          if (sIndex >= sNamedLength)
            return false;
          sName = sNamed[sIndex];
          sIndex += 3;
          if (tName < sName)
            return false;
          if (sName < tName)
            continue;
          t1 = sNamed[sIndex - 1];
          if (!H._isSubtype(universe, tNamed[tIndex + 2], tEnv, t1, sEnv))
            return false;
          break;
        }
      }
      return true;
    },
    _isInterfaceSubtype: function(universe, s, sEnv, t, tEnv) {
      var sArgs, tArgs, $length, i, t1, t2, rule, supertypeArgs,
        sName = s._primary,
        tName = t._primary;
      if (sName === tName) {
        sArgs = s._rest;
        tArgs = t._rest;
        $length = sArgs.length;
        for (i = 0; i < $length; ++i) {
          t1 = sArgs[i];
          t2 = tArgs[i];
          if (!H._isSubtype(universe, t1, sEnv, t2, tEnv))
            return false;
        }
        return true;
      }
      if (t === type$.Object)
        return true;
      rule = H._Universe_findRule(universe, sName);
      if (rule == null)
        return false;
      supertypeArgs = rule[tName];
      if (supertypeArgs == null)
        return false;
      $length = supertypeArgs.length;
      tArgs = t._rest;
      for (i = 0; i < $length; ++i)
        if (!H._isSubtype(universe, H._Universe_evalInEnvironment(universe, s, supertypeArgs[i]), sEnv, tArgs[i], tEnv))
          return false;
      return true;
    },
    isNullable: function(t) {
      var t1,
        kind = t._kind;
      if (!(t === type$.Null || t === type$.JSNull))
        if (!H.isStrongTopType(t))
          if (kind !== 7)
            if (!(kind === 6 && H.isNullable(t._primary)))
              t1 = kind === 8 && H.isNullable(t._primary);
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    isTopType: function(t) {
      var t1;
      if (!H.isStrongTopType(t))
        if (!(t === type$.legacy_Object))
          t1 = t === type$.Object;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    isStrongTopType: function(t) {
      var kind = t._kind;
      return kind === 2 || kind === 3 || kind === 4 || kind === 5 || t === type$.nullable_Object;
    },
    _Utils_objectAssign: function(o, other) {
      var i, key,
        keys = Object.keys(other),
        $length = keys.length;
      for (i = 0; i < $length; ++i) {
        key = keys[i];
        o[key] = other[key];
      }
    },
    Rti: function Rti(t0, t1) {
      var _ = this;
      _._as = t0;
      _._is = t1;
      _._cachedRuntimeType = _._specializedTestResource = _._precomputed1 = null;
      _._kind = 0;
      _._canonicalRecipe = _._bindCache = _._evalCache = _._rest = _._primary = null;
    },
    _FunctionParameters: function _FunctionParameters() {
      this._named = this._optionalPositional = this._requiredPositional = null;
    },
    _Error: function _Error() {
    },
    _TypeError: function _TypeError(t0) {
      this.__rti$_message = t0;
    },
    unmangleGlobalNameIfPreservedAnyways: function($name) {
      return init.mangledGlobalNames[$name];
    },
    printString: function(string) {
      if (typeof dartPrint == "function") {
        dartPrint(string);
        return;
      }
      if (typeof console == "object" && typeof console.log != "undefined") {
        console.log(string);
        return;
      }
      if (typeof window == "object")
        return;
      if (typeof print == "function") {
        print(string);
        return;
      }
      throw "Unable to print message: " + String(string);
    }
  },
  J = {
    makeDispatchRecord: function(interceptor, proto, extension, indexability) {
      return {i: interceptor, p: proto, e: extension, x: indexability};
    },
    getNativeInterceptor: function(object) {
      var proto, objectProto, $constructor, interceptor,
        record = object[init.dispatchPropertyName];
      if (record == null)
        if ($.initNativeDispatchFlag == null) {
          H.initNativeDispatch();
          record = object[init.dispatchPropertyName];
        }
      if (record != null) {
        proto = record.p;
        if (false === proto)
          return record.i;
        if (true === proto)
          return object;
        objectProto = Object.getPrototypeOf(object);
        if (proto === objectProto)
          return record.i;
        if (record.e === objectProto)
          throw H.wrapException(P.UnimplementedError$("Return interceptor for " + H.S(proto(object, record))));
      }
      $constructor = object.constructor;
      interceptor = $constructor == null ? null : $constructor[J.JS_INTEROP_INTERCEPTOR_TAG()];
      if (interceptor != null)
        return interceptor;
      interceptor = H.lookupAndCacheInterceptor(object);
      if (interceptor != null)
        return interceptor;
      if (typeof object == "function")
        return C.JavaScriptFunction_methods;
      proto = Object.getPrototypeOf(object);
      if (proto == null)
        return C.PlainJavaScriptObject_methods;
      if (proto === Object.prototype)
        return C.PlainJavaScriptObject_methods;
      if (typeof $constructor == "function") {
        Object.defineProperty($constructor, J.JS_INTEROP_INTERCEPTOR_TAG(), {value: C.UnknownJavaScriptObject_methods, enumerable: false, writable: true, configurable: true});
        return C.UnknownJavaScriptObject_methods;
      }
      return C.UnknownJavaScriptObject_methods;
    },
    JS_INTEROP_INTERCEPTOR_TAG: function() {
      var t1 = $._JS_INTEROP_INTERCEPTOR_TAG;
      return t1 == null ? $._JS_INTEROP_INTERCEPTOR_TAG = init.getIsolateTag("_$dart_js") : t1;
    },
    JSArray_JSArray$fixed: function($length, $E) {
      if (!H._isInt($length))
        throw H.wrapException(P.ArgumentError$value($length, "length", "is not an integer"));
      if ($length < 0 || $length > 4294967295)
        throw H.wrapException(P.RangeError$range($length, 0, 4294967295, "length", null));
      return J.JSArray_JSArray$markFixed(new Array($length), $E);
    },
    JSArray_JSArray$growable: function($length, $E) {
      if ($length < 0)
        throw H.wrapException(P.ArgumentError$("Length must be a non-negative integer: " + $length));
      return H.setRuntimeTypeInfo(new Array($length), $E._eval$1("JSArray<0>"));
    },
    JSArray_JSArray$markFixed: function(allocation, $E) {
      return J.JSArray_markFixedList(H.setRuntimeTypeInfo(allocation, $E._eval$1("JSArray<0>")), $E);
    },
    JSArray_markFixedList: function(list, $T) {
      list.fixed$length = Array;
      return list;
    },
    getInterceptor$: function(receiver) {
      if (typeof receiver == "number") {
        if (Math.floor(receiver) == receiver)
          return J.JSInt.prototype;
        return J.JSDouble.prototype;
      }
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return J.JSNull.prototype;
      if (typeof receiver == "boolean")
        return J.JSBool.prototype;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ansx: function(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$asx: function(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ax: function(receiver) {
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$n: function(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$s: function(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$x: function(receiver) {
      if (receiver == null)
        return receiver;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    get$first$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).get$first(receiver);
    },
    get$hashCode$: function(receiver) {
      return J.getInterceptor$(receiver).get$hashCode(receiver);
    },
    get$iterator$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).get$iterator(receiver);
    },
    get$length$asx: function(receiver) {
      return J.getInterceptor$asx(receiver).get$length(receiver);
    },
    $add$ansx: function(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver + a0;
      return J.getInterceptor$ansx(receiver).$add(receiver, a0);
    },
    $eq$: function(receiver, a0) {
      if (receiver == null)
        return a0 == null;
      if (typeof receiver != "object")
        return a0 != null && receiver === a0;
      return J.getInterceptor$(receiver).$eq(receiver, a0);
    },
    $index$asx: function(receiver, a0) {
      if (typeof a0 === "number")
        if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
          if (a0 >>> 0 === a0 && a0 < receiver.length)
            return receiver[a0];
      return J.getInterceptor$asx(receiver).$index(receiver, a0);
    },
    $indexSet$ax: function(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
    },
    clamp$2$n: function(receiver, a0, a1) {
      return J.getInterceptor$n(receiver).clamp$2(receiver, a0, a1);
    },
    elementAt$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
    },
    fillRange$3$ax: function(receiver, a0, a1, a2) {
      return J.getInterceptor$ax(receiver).fillRange$3(receiver, a0, a1, a2);
    },
    postMessage$2$x: function(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).postMessage$2(receiver, a0, a1);
    },
    setRange$4$ax: function(receiver, a0, a1, a2, a3) {
      return J.getInterceptor$ax(receiver).setRange$4(receiver, a0, a1, a2, a3);
    },
    skip$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).skip$1(receiver, a0);
    },
    sublist$2$ax: function(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).sublist$2(receiver, a0, a1);
    },
    toInt$0$n: function(receiver) {
      return J.getInterceptor$n(receiver).toInt$0(receiver);
    },
    toRadixString$1$n: function(receiver, a0) {
      return J.getInterceptor$n(receiver).toRadixString$1(receiver, a0);
    },
    toString$0$: function(receiver) {
      return J.getInterceptor$(receiver).toString$0(receiver);
    },
    Interceptor: function Interceptor() {
    },
    JSBool: function JSBool() {
    },
    JSNull: function JSNull() {
    },
    JavaScriptObject: function JavaScriptObject() {
    },
    PlainJavaScriptObject: function PlainJavaScriptObject() {
    },
    UnknownJavaScriptObject: function UnknownJavaScriptObject() {
    },
    JavaScriptFunction: function JavaScriptFunction() {
    },
    JSArray: function JSArray(t0) {
      this.$ti = t0;
    },
    JSUnmodifiableArray: function JSUnmodifiableArray(t0) {
      this.$ti = t0;
    },
    ArrayIterator: function ArrayIterator(t0, t1, t2) {
      var _ = this;
      _._iterable = t0;
      _._length = t1;
      _._index = 0;
      _._current = null;
      _.$ti = t2;
    },
    JSNumber: function JSNumber() {
    },
    JSInt: function JSInt() {
    },
    JSDouble: function JSDouble() {
    },
    JSString: function JSString() {
    }
  },
  P = {
    _AsyncRun__initializeScheduleImmediate: function() {
      var div, span, t1 = {};
      if (self.scheduleImmediate != null)
        return P.async__AsyncRun__scheduleImmediateJsOverride$closure();
      if (self.MutationObserver != null && self.document != null) {
        div = self.document.createElement("div");
        span = self.document.createElement("span");
        t1.storedCallback = null;
        new self.MutationObserver(H.convertDartClosureToJS(new P._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
        return new P._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
      } else if (self.setImmediate != null)
        return P.async__AsyncRun__scheduleImmediateWithSetImmediate$closure();
      return P.async__AsyncRun__scheduleImmediateWithTimer$closure();
    },
    _AsyncRun__scheduleImmediateJsOverride: function(callback) {
      self.scheduleImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateJsOverride_internalCallback(type$.void_Function._as(callback)), 0));
    },
    _AsyncRun__scheduleImmediateWithSetImmediate: function(callback) {
      self.setImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(type$.void_Function._as(callback)), 0));
    },
    _AsyncRun__scheduleImmediateWithTimer: function(callback) {
      type$.void_Function._as(callback);
      P._TimerImpl$(0, callback);
    },
    _TimerImpl$: function(milliseconds, callback) {
      var t1 = new P._TimerImpl();
      t1._TimerImpl$2(milliseconds, callback);
      return t1;
    },
    _Future__chainForeignFuture: function(source, target) {
      var e, s, exception;
      target._state = 1;
      try {
        source.then$1$2$onError(new P._Future__chainForeignFuture_closure(target), new P._Future__chainForeignFuture_closure0(target), type$.Null);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P.scheduleMicrotask(new P._Future__chainForeignFuture_closure1(target, e, s));
      }
    },
    _Future__chainCoreFuture: function(source, target) {
      var t1, t2, listeners;
      for (t1 = type$._Future_dynamic; t2 = source._state, t2 === 2;)
        source = t1._as(source._resultOrListeners);
      if (t2 >= 4) {
        listeners = target._removeListeners$0();
        target._state = source._state;
        target._resultOrListeners = source._resultOrListeners;
        P._Future__propagateToListeners(target, listeners);
      } else {
        listeners = type$.nullable__FutureListener_dynamic_dynamic._as(target._resultOrListeners);
        target._state = 2;
        target._resultOrListeners = source;
        source._prependListeners$1(listeners);
      }
    },
    _Future__propagateToListeners: function(source, listeners) {
      var t2, t3, t4, _box_0, hasError, asyncError, nextListener, nextListener0, t5, sourceResult, t6, t7, zone, oldZone, result, current, _null = null, _box_1 = {},
        t1 = _box_1.source = source;
      for (t2 = type$.AsyncError, t3 = type$.nullable__FutureListener_dynamic_dynamic, t4 = type$.Future_dynamic; true;) {
        _box_0 = {};
        hasError = t1._state === 8;
        if (listeners == null) {
          if (hasError) {
            asyncError = t2._as(t1._resultOrListeners);
            P._rootHandleUncaughtError(_null, _null, t1._zone, asyncError.error, asyncError.stackTrace);
          }
          return;
        }
        _box_0.listener = listeners;
        nextListener = listeners._nextListener;
        for (t1 = listeners; nextListener != null; t1 = nextListener, nextListener = nextListener0) {
          t1._nextListener = null;
          P._Future__propagateToListeners(_box_1.source, t1);
          _box_0.listener = nextListener;
          nextListener0 = nextListener._nextListener;
        }
        t5 = _box_1.source;
        sourceResult = t5._resultOrListeners;
        _box_0.listenerHasError = hasError;
        _box_0.listenerValueOrError = sourceResult;
        t6 = !hasError;
        if (t6) {
          t7 = t1.state;
          t7 = (t7 & 1) !== 0 || (t7 & 15) === 8;
        } else
          t7 = true;
        if (t7) {
          zone = t1.result._zone;
          if (hasError) {
            t7 = t5._zone === zone;
            t7 = !(t7 || t7);
          } else
            t7 = false;
          if (t7) {
            t2._as(sourceResult);
            P._rootHandleUncaughtError(_null, _null, t5._zone, sourceResult.error, sourceResult.stackTrace);
            return;
          }
          oldZone = $.Zone__current;
          if (oldZone !== zone)
            $.Zone__current = zone;
          else
            oldZone = _null;
          t1 = t1.state;
          if ((t1 & 15) === 8)
            new P._Future__propagateToListeners_handleWhenCompleteCallback(_box_0, _box_1, hasError).call$0();
          else if (t6) {
            if ((t1 & 1) !== 0)
              new P._Future__propagateToListeners_handleValueCallback(_box_0, sourceResult).call$0();
          } else if ((t1 & 2) !== 0)
            new P._Future__propagateToListeners_handleError(_box_1, _box_0).call$0();
          if (oldZone != null)
            $.Zone__current = oldZone;
          t1 = _box_0.listenerValueOrError;
          if (t4._is(t1)) {
            result = _box_0.listener.result;
            if (t1._state >= 4) {
              current = t3._as(result._resultOrListeners);
              result._resultOrListeners = null;
              listeners = result._reverseListeners$1(current);
              result._state = t1._state;
              result._resultOrListeners = t1._resultOrListeners;
              _box_1.source = t1;
              continue;
            } else
              P._Future__chainCoreFuture(t1, result);
            return;
          }
        }
        result = _box_0.listener.result;
        current = t3._as(result._resultOrListeners);
        result._resultOrListeners = null;
        listeners = result._reverseListeners$1(current);
        t1 = _box_0.listenerHasError;
        t5 = _box_0.listenerValueOrError;
        if (!t1) {
          result.$ti._precomputed1._as(t5);
          result._state = 4;
          result._resultOrListeners = t5;
        } else {
          t2._as(t5);
          result._state = 8;
          result._resultOrListeners = t5;
        }
        _box_1.source = result;
        t1 = result;
      }
    },
    _registerErrorHandler: function(errorHandler, zone) {
      var t1 = type$.dynamic_Function_Object_StackTrace;
      if (t1._is(errorHandler))
        return t1._as(errorHandler);
      t1 = type$.dynamic_Function_Object;
      if (t1._is(errorHandler))
        return t1._as(errorHandler);
      throw H.wrapException(P.ArgumentError$value(errorHandler, "onError", "Error handler must accept one Object or one Object and a StackTrace as arguments, and return a a valid result"));
    },
    _microtaskLoop: function() {
      var entry, next;
      for (entry = $._nextCallback; entry != null; entry = $._nextCallback) {
        $._lastPriorityCallback = null;
        next = entry.next;
        $._nextCallback = next;
        if (next == null)
          $._lastCallback = null;
        entry.callback.call$0();
      }
    },
    _startMicrotaskLoop: function() {
      $._isInCallbackLoop = true;
      try {
        P._microtaskLoop();
      } finally {
        $._lastPriorityCallback = null;
        $._isInCallbackLoop = false;
        if ($._nextCallback != null)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(P.async___startMicrotaskLoop$closure());
      }
    },
    _scheduleAsyncCallback: function(callback) {
      var newEntry = new P._AsyncCallbackEntry(callback),
        lastCallback = $._lastCallback;
      if (lastCallback == null) {
        $._nextCallback = $._lastCallback = newEntry;
        if (!$._isInCallbackLoop)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(P.async___startMicrotaskLoop$closure());
      } else
        $._lastCallback = lastCallback.next = newEntry;
    },
    _schedulePriorityAsyncCallback: function(callback) {
      var entry, lastPriorityCallback, next,
        t1 = $._nextCallback;
      if (t1 == null) {
        P._scheduleAsyncCallback(callback);
        $._lastPriorityCallback = $._lastCallback;
        return;
      }
      entry = new P._AsyncCallbackEntry(callback);
      lastPriorityCallback = $._lastPriorityCallback;
      if (lastPriorityCallback == null) {
        entry.next = t1;
        $._nextCallback = $._lastPriorityCallback = entry;
      } else {
        next = lastPriorityCallback.next;
        entry.next = next;
        $._lastPriorityCallback = lastPriorityCallback.next = entry;
        if (next == null)
          $._lastCallback = entry;
      }
    },
    scheduleMicrotask: function(callback) {
      var _null = null,
        currentZone = $.Zone__current;
      if (C.C__RootZone === currentZone) {
        P._rootScheduleMicrotask(_null, _null, C.C__RootZone, callback);
        return;
      }
      P._rootScheduleMicrotask(_null, _null, currentZone, type$.void_Function._as(currentZone.bindCallbackGuarded$1(callback)));
    },
    AsyncError$: function(error, stackTrace) {
      var t1 = stackTrace == null ? P.AsyncError_defaultStackTrace(error) : stackTrace;
      P.ArgumentError_checkNotNull(error, "error", type$.Object);
      return new P.AsyncError(error, t1);
    },
    AsyncError_defaultStackTrace: function(error) {
      var stackTrace;
      if (type$.Error._is(error)) {
        stackTrace = error.get$stackTrace();
        if (stackTrace != null)
          return stackTrace;
      }
      return C.C__StringStackTrace;
    },
    _rootHandleUncaughtError: function($self, $parent, zone, error, stackTrace) {
      P._schedulePriorityAsyncCallback(new P._rootHandleUncaughtError_closure(error, stackTrace));
    },
    _rootRun: function($self, $parent, zone, f, $R) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$0();
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$0();
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunUnary: function($self, $parent, zone, f, arg, $R, $T) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$1(arg);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$1(arg);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunBinary: function($self, $parent, zone, f, arg1, arg2, $R, T1, T2) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$2(arg1, arg2);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$2(arg1, arg2);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootScheduleMicrotask: function($self, $parent, zone, f) {
      var t1;
      type$.void_Function._as(f);
      t1 = C.C__RootZone !== zone;
      if (t1)
        f = !(!t1 || false) ? zone.bindCallbackGuarded$1(f) : zone.bindCallback$1$1(f, type$.void);
      P._scheduleAsyncCallback(f);
    },
    _AsyncRun__initializeScheduleImmediate_internalCallback: function _AsyncRun__initializeScheduleImmediate_internalCallback(t0) {
      this._box_0 = t0;
    },
    _AsyncRun__initializeScheduleImmediate_closure: function _AsyncRun__initializeScheduleImmediate_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.div = t1;
      this.span = t2;
    },
    _AsyncRun__scheduleImmediateJsOverride_internalCallback: function _AsyncRun__scheduleImmediateJsOverride_internalCallback(t0) {
      this.callback = t0;
    },
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: function _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(t0) {
      this.callback = t0;
    },
    _TimerImpl: function _TimerImpl() {
    },
    _TimerImpl_internalCallback: function _TimerImpl_internalCallback(t0, t1) {
      this.$this = t0;
      this.callback = t1;
    },
    _Completer: function _Completer() {
    },
    _AsyncCompleter: function _AsyncCompleter(t0, t1) {
      this.future = t0;
      this.$ti = t1;
    },
    _FutureListener: function _FutureListener(t0, t1, t2, t3, t4) {
      var _ = this;
      _._nextListener = null;
      _.result = t0;
      _.state = t1;
      _.callback = t2;
      _.errorCallback = t3;
      _.$ti = t4;
    },
    _Future: function _Future(t0, t1) {
      var _ = this;
      _._state = 0;
      _._zone = t0;
      _._resultOrListeners = null;
      _.$ti = t1;
    },
    _Future__addListener_closure: function _Future__addListener_closure(t0, t1) {
      this.$this = t0;
      this.listener = t1;
    },
    _Future__prependListeners_closure: function _Future__prependListeners_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _Future__chainForeignFuture_closure: function _Future__chainForeignFuture_closure(t0) {
      this.target = t0;
    },
    _Future__chainForeignFuture_closure0: function _Future__chainForeignFuture_closure0(t0) {
      this.target = t0;
    },
    _Future__chainForeignFuture_closure1: function _Future__chainForeignFuture_closure1(t0, t1, t2) {
      this.target = t0;
      this.e = t1;
      this.s = t2;
    },
    _Future__asyncCompleteWithValue_closure: function _Future__asyncCompleteWithValue_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _Future__chainFuture_closure: function _Future__chainFuture_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _Future__asyncCompleteError_closure: function _Future__asyncCompleteError_closure(t0, t1, t2) {
      this.$this = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback: function _Future__propagateToListeners_handleWhenCompleteCallback(t0, t1, t2) {
      this._box_0 = t0;
      this._box_1 = t1;
      this.hasError = t2;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure: function _Future__propagateToListeners_handleWhenCompleteCallback_closure(t0) {
      this.originalSource = t0;
    },
    _Future__propagateToListeners_handleValueCallback: function _Future__propagateToListeners_handleValueCallback(t0, t1) {
      this._box_0 = t0;
      this.sourceResult = t1;
    },
    _Future__propagateToListeners_handleError: function _Future__propagateToListeners_handleError(t0, t1) {
      this._box_1 = t0;
      this._box_0 = t1;
    },
    _AsyncCallbackEntry: function _AsyncCallbackEntry(t0) {
      this.callback = t0;
      this.next = null;
    },
    Stream: function Stream() {
    },
    Stream_length_closure: function Stream_length_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    Stream_length_closure0: function Stream_length_closure0(t0, t1) {
      this._box_0 = t0;
      this.future = t1;
    },
    StreamSubscription: function StreamSubscription() {
    },
    AsyncError: function AsyncError(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    _Zone: function _Zone() {
    },
    _rootHandleUncaughtError_closure: function _rootHandleUncaughtError_closure(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    _RootZone: function _RootZone() {
    },
    _RootZone_bindCallback_closure: function _RootZone_bindCallback_closure(t0, t1, t2) {
      this.$this = t0;
      this.f = t1;
      this.R = t2;
    },
    _RootZone_bindCallbackGuarded_closure: function _RootZone_bindCallbackGuarded_closure(t0, t1) {
      this.$this = t0;
      this.f = t1;
    },
    _RootZone_bindUnaryCallbackGuarded_closure: function _RootZone_bindUnaryCallbackGuarded_closure(t0, t1, t2) {
      this.$this = t0;
      this.f = t1;
      this.T = t2;
    },
    LinkedHashMap_LinkedHashMap: function($K, $V) {
      return new H.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"));
    },
    LinkedHashMap_LinkedHashMap$_literal: function(keyValuePairs, $K, $V) {
      return $K._eval$1("@<0>")._bind$1($V)._eval$1("LinkedHashMap<1,2>")._as(H.fillLiteralMap(keyValuePairs, new H.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"))));
    },
    LinkedHashMap_LinkedHashMap$_empty: function($K, $V) {
      return new H.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"));
    },
    IterableBase_iterableToShortString: function(iterable, leftDelimiter, rightDelimiter) {
      var parts, t1;
      if (P._isToStringVisiting(iterable)) {
        if (leftDelimiter === "(" && rightDelimiter === ")")
          return "(...)";
        return leftDelimiter + "..." + rightDelimiter;
      }
      parts = H.setRuntimeTypeInfo([], type$.JSArray_String);
      C.JSArray_methods.add$1($._toStringVisiting, iterable);
      try {
        P._iterablePartsToStrings(iterable, parts);
      } finally {
        if (0 >= $._toStringVisiting.length)
          return H.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      t1 = P.StringBuffer__writeAll(leftDelimiter, type$.Iterable_dynamic._as(parts), ", ") + rightDelimiter;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    IterableBase_iterableToFullString: function(iterable, leftDelimiter, rightDelimiter) {
      var buffer, t1;
      if (P._isToStringVisiting(iterable))
        return leftDelimiter + "..." + rightDelimiter;
      buffer = new P.StringBuffer(leftDelimiter);
      C.JSArray_methods.add$1($._toStringVisiting, iterable);
      try {
        t1 = buffer;
        t1._contents = P.StringBuffer__writeAll(t1._contents, iterable, ", ");
      } finally {
        if (0 >= $._toStringVisiting.length)
          return H.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      buffer._contents += rightDelimiter;
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _isToStringVisiting: function(o) {
      var t1, i;
      for (t1 = $._toStringVisiting.length, i = 0; i < t1; ++i)
        if (o === $._toStringVisiting[i])
          return true;
      return false;
    },
    _iterablePartsToStrings: function(iterable, parts) {
      var next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision,
        it = iterable.get$iterator(iterable),
        $length = 0, count = 0;
      while (true) {
        if (!($length < 80 || count < 3))
          break;
        if (!it.moveNext$0())
          return;
        next = H.S(it.get$current());
        C.JSArray_methods.add$1(parts, next);
        $length += next.length + 2;
        ++count;
      }
      if (!it.moveNext$0()) {
        if (count <= 5)
          return;
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        ultimateString = parts.pop();
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        penultimateString = parts.pop();
      } else {
        penultimate = it.get$current();
        ++count;
        if (!it.moveNext$0()) {
          if (count <= 4) {
            C.JSArray_methods.add$1(parts, H.S(penultimate));
            return;
          }
          ultimateString = H.S(penultimate);
          if (0 >= parts.length)
            return H.ioore(parts, -1);
          penultimateString = parts.pop();
          $length += ultimateString.length + 2;
        } else {
          ultimate = it.get$current();
          ++count;
          for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
            ultimate0 = it.get$current();
            ++count;
            if (count > 100) {
              while (true) {
                if (!($length > 75 && count > 3))
                  break;
                if (0 >= parts.length)
                  return H.ioore(parts, -1);
                $length -= parts.pop().length + 2;
                --count;
              }
              C.JSArray_methods.add$1(parts, "...");
              return;
            }
          }
          penultimateString = H.S(penultimate);
          ultimateString = H.S(ultimate);
          $length += ultimateString.length + penultimateString.length + 4;
        }
      }
      if (count > parts.length + 2) {
        $length += 5;
        elision = "...";
      } else
        elision = null;
      while (true) {
        if (!($length > 80 && parts.length > 3))
          break;
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        $length -= parts.pop().length + 2;
        if (elision == null) {
          $length += 5;
          elision = "...";
        }
      }
      if (elision != null)
        C.JSArray_methods.add$1(parts, elision);
      C.JSArray_methods.add$1(parts, penultimateString);
      C.JSArray_methods.add$1(parts, ultimateString);
    },
    LinkedHashMap_LinkedHashMap$from: function(other, $K, $V) {
      var result = P.LinkedHashMap_LinkedHashMap($K, $V);
      other.forEach$1(0, new P.LinkedHashMap_LinkedHashMap$from_closure(result, $K, $V));
      return result;
    },
    MapBase_mapToString: function(m) {
      var result, t1 = {};
      if (P._isToStringVisiting(m))
        return "{...}";
      result = new P.StringBuffer("");
      try {
        C.JSArray_methods.add$1($._toStringVisiting, m);
        result._contents += "{";
        t1.first = true;
        m.forEach$1(0, new P.MapBase_mapToString_closure(t1, result));
        result._contents += "}";
      } finally {
        if (0 >= $._toStringVisiting.length)
          return H.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      t1 = result._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    LinkedHashMap_LinkedHashMap$from_closure: function LinkedHashMap_LinkedHashMap$from_closure(t0, t1, t2) {
      this.result = t0;
      this.K = t1;
      this.V = t2;
    },
    ListBase: function ListBase() {
    },
    ListMixin: function ListMixin() {
    },
    MapBase: function MapBase() {
    },
    MapBase_mapToString_closure: function MapBase_mapToString_closure(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    MapMixin: function MapMixin() {
    },
    _ListBase_Object_ListMixin: function _ListBase_Object_ListMixin() {
    },
    JsonUnsupportedObjectError$: function(unsupportedObject, cause, partialResult) {
      return new P.JsonUnsupportedObjectError(unsupportedObject, cause);
    },
    _defaultToEncodable: function(object) {
      return object.toJson$0();
    },
    JsonUnsupportedObjectError: function JsonUnsupportedObjectError(t0, t1) {
      this.unsupportedObject = t0;
      this.cause = t1;
    },
    JsonCyclicError: function JsonCyclicError(t0, t1) {
      this.unsupportedObject = t0;
      this.cause = t1;
    },
    _JsonStringifier: function _JsonStringifier() {
    },
    _JsonStringifier_writeMap_closure: function _JsonStringifier_writeMap_closure(t0, t1) {
      this._box_0 = t0;
      this.keyValueList = t1;
    },
    _JsonPrettyPrintMixin: function _JsonPrettyPrintMixin() {
    },
    _JsonPrettyPrintMixin_writeMap_closure: function _JsonPrettyPrintMixin_writeMap_closure(t0, t1) {
      this._box_0 = t0;
      this.keyValueList = t1;
    },
    _JsonStringStringifier: function _JsonStringStringifier() {
    },
    _JsonStringStringifierPretty: function _JsonStringStringifierPretty(t0, t1, t2, t3, t4) {
      var _ = this;
      _._indent = t0;
      _._JsonPrettyPrintMixin__indentLevel = t1;
      _._sink = t2;
      _._seen = t3;
      _._toEncodable = t4;
    },
    __JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin: function __JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin() {
    },
    Error__objectToString: function(object) {
      if (object instanceof H.Closure)
        return object.toString$0(0);
      return "Instance of '" + H.S(H.Primitives_objectTypeName(object)) + "'";
    },
    List_List$filled: function($length, fill, growable, $E) {
      var i,
        result = J.JSArray_JSArray$fixed($length, $E);
      if ($length !== 0 && fill != null)
        for (i = 0; i < result.length; ++i)
          result[i] = fill;
      return result;
    },
    List_List$from: function(elements, growable, $E) {
      var t1,
        list = H.setRuntimeTypeInfo([], $E._eval$1("JSArray<0>"));
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        C.JSArray_methods.add$1(list, $E._as(t1.get$current()));
      if (growable)
        return list;
      return J.JSArray_markFixedList(list, $E);
    },
    String_String$fromCharCodes: function(charCodes) {
      var array, len, end;
      if (Array.isArray(charCodes)) {
        array = charCodes;
        len = array.length;
        end = P.RangeError_checkValidRange(0, null, len);
        return H.Primitives_stringFromCharCodes(end < len ? array.slice(0, end) : array);
      }
      if (type$.NativeUint8List._is(charCodes))
        return H.Primitives_stringFromNativeUint8List(charCodes, 0, P.RangeError_checkValidRange(0, null, charCodes.length));
      return P.String__stringFromIterable(charCodes, 0, null);
    },
    String__stringFromIterable: function(charCodes, start, end) {
      var i, list,
        it = J.get$iterator$ax(charCodes);
      for (i = 0; i < start; ++i)
        if (!it.moveNext$0())
          throw H.wrapException(P.RangeError$range(start, 0, i, null, null));
      list = [];
      for (; it.moveNext$0();)
        list.push(it.get$current());
      return H.Primitives_stringFromCharCodes(list);
    },
    StringBuffer__writeAll: function(string, objects, separator) {
      var iterator = J.get$iterator$ax(objects);
      if (!iterator.moveNext$0())
        return string;
      if (separator.length === 0) {
        do
          string += H.S(iterator.get$current());
        while (iterator.moveNext$0());
      } else {
        string += H.S(iterator.get$current());
        for (; iterator.moveNext$0();)
          string = string + separator + H.S(iterator.get$current());
      }
      return string;
    },
    DateTime__fourDigits: function(n) {
      var absN = Math.abs(n),
        sign = n < 0 ? "-" : "";
      if (absN >= 1000)
        return "" + n;
      if (absN >= 100)
        return sign + "0" + absN;
      if (absN >= 10)
        return sign + "00" + absN;
      return sign + "000" + absN;
    },
    DateTime__threeDigits: function(n) {
      if (n >= 100)
        return "" + n;
      if (n >= 10)
        return "0" + n;
      return "00" + n;
    },
    DateTime__twoDigits: function(n) {
      if (n >= 10)
        return "" + n;
      return "0" + n;
    },
    Error_safeToString: function(object) {
      if (typeof object == "number" || H._isBool(object) || null == object)
        return J.toString$0$(object);
      if (typeof object == "string")
        return JSON.stringify(object);
      return P.Error__objectToString(object);
    },
    AssertionError$: function(message) {
      return new P.AssertionError(message);
    },
    ArgumentError$: function(message) {
      return new P.ArgumentError(false, null, null, message);
    },
    ArgumentError$value: function(value, $name, message) {
      return new P.ArgumentError(true, value, $name, message);
    },
    ArgumentError_checkNotNull: function(argument, $name, $T) {
      if (argument == null)
        throw H.wrapException(new P.ArgumentError(false, null, $name, "Must not be null"));
      return argument;
    },
    RangeError$value: function(value, $name) {
      return new P.RangeError(null, null, true, value, $name, "Value not in range");
    },
    RangeError$range: function(invalidValue, minValue, maxValue, $name, message) {
      return new P.RangeError(minValue, maxValue, true, invalidValue, $name, "Invalid value");
    },
    RangeError_checkValidRange: function(start, end, $length) {
      if (typeof start !== "number")
        return H.iae(start);
      if (0 > start || start > $length)
        throw H.wrapException(P.RangeError$range(start, 0, $length, "start", null));
      if (end != null) {
        if (start > end || end > $length)
          throw H.wrapException(P.RangeError$range(end, start, $length, "end", null));
        return end;
      }
      return $length;
    },
    RangeError_checkNotNegative: function(value, $name) {
      if (value < 0)
        throw H.wrapException(P.RangeError$range(value, 0, null, $name, null));
      return value;
    },
    IndexError$: function(invalidValue, indexable, $name, message, $length) {
      var t1 = H._asIntS($length == null ? J.get$length$asx(indexable) : $length);
      return new P.IndexError(t1, true, invalidValue, $name, "Index out of range");
    },
    UnsupportedError$: function(message) {
      return new P.UnsupportedError(message);
    },
    UnimplementedError$: function(message) {
      return new P.UnimplementedError(message);
    },
    StateError$: function(message) {
      return new P.StateError(message);
    },
    ConcurrentModificationError$: function(modifiedObject) {
      return new P.ConcurrentModificationError(modifiedObject);
    },
    Iterable_Iterable$generate: function(count, generator, $E) {
      if (count <= 0)
        return new H.EmptyIterable($E._eval$1("EmptyIterable<0>"));
      return new P._GeneratorIterable(count, generator, $E._eval$1("_GeneratorIterable<0>"));
    },
    print: function(object) {
      H.printString(H.S(J.toString$0$(object)));
    },
    DateTime: function DateTime(t0, t1) {
      this._value = t0;
      this.isUtc = t1;
    },
    Error: function Error() {
    },
    AssertionError: function AssertionError(t0) {
      this.message = t0;
    },
    TypeError: function TypeError() {
    },
    NullThrownError: function NullThrownError() {
    },
    ArgumentError: function ArgumentError(t0, t1, t2, t3) {
      var _ = this;
      _._hasValue = t0;
      _.invalidValue = t1;
      _.name = t2;
      _.message = t3;
    },
    RangeError: function RangeError(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.start = t0;
      _.end = t1;
      _._hasValue = t2;
      _.invalidValue = t3;
      _.name = t4;
      _.message = t5;
    },
    IndexError: function IndexError(t0, t1, t2, t3, t4) {
      var _ = this;
      _.length = t0;
      _._hasValue = t1;
      _.invalidValue = t2;
      _.name = t3;
      _.message = t4;
    },
    UnsupportedError: function UnsupportedError(t0) {
      this.message = t0;
    },
    UnimplementedError: function UnimplementedError(t0) {
      this.message = t0;
    },
    StateError: function StateError(t0) {
      this.message = t0;
    },
    ConcurrentModificationError: function ConcurrentModificationError(t0) {
      this.modifiedObject = t0;
    },
    OutOfMemoryError: function OutOfMemoryError() {
    },
    StackOverflowError: function StackOverflowError() {
    },
    CyclicInitializationError: function CyclicInitializationError(t0) {
      this.variableName = t0;
    },
    _Exception: function _Exception(t0) {
      this.message = t0;
    },
    FormatException: function FormatException() {
    },
    Iterable: function Iterable() {
    },
    _GeneratorIterable: function _GeneratorIterable(t0, t1, t2) {
      this.length = t0;
      this._generator = t1;
      this.$ti = t2;
    },
    Iterator: function Iterator() {
    },
    Null: function Null() {
    },
    Object: function Object() {
    },
    _StringStackTrace: function _StringStackTrace() {
    },
    StringBuffer: function StringBuffer(t0) {
      this._contents = t0;
    },
    _StructuredClone: function _StructuredClone() {
    },
    _StructuredClone_walk_closure: function _StructuredClone_walk_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _StructuredClone_walk_closure0: function _StructuredClone_walk_closure0(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _AcceptStructuredClone: function _AcceptStructuredClone() {
    },
    _AcceptStructuredClone_walk_closure: function _AcceptStructuredClone_walk_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _StructuredCloneDart2Js: function _StructuredCloneDart2Js(t0, t1) {
      this.values = t0;
      this.copies = t1;
    },
    _AcceptStructuredCloneDart2Js: function _AcceptStructuredCloneDart2Js(t0, t1) {
      this.values = t0;
      this.copies = t1;
      this.mustCopy = false;
    },
    promiseToFuture: function(jsPromise, $T) {
      var t1 = new P._Future($.Zone__current, $T._eval$1("_Future<0>")),
        completer = new P._AsyncCompleter(t1, $T._eval$1("_AsyncCompleter<0>"));
      jsPromise.then(H.convertDartClosureToJS(new P.promiseToFuture_closure(completer, $T), 1), H.convertDartClosureToJS(new P.promiseToFuture_closure0(completer), 1));
      return t1;
    },
    promiseToFuture_closure: function promiseToFuture_closure(t0, t1) {
      this.completer = t0;
      this.T = t1;
    },
    promiseToFuture_closure0: function promiseToFuture_closure0(t0) {
      this.completer = t0;
    },
    Uint64List_Uint64List: function($length) {
      throw H.wrapException(P.UnsupportedError$("Uint64List not supported on the web."));
    },
    Uint32List_Uint32List$view: function(buffer, offsetInBytes) {
      var t1;
      H._checkViewArguments(buffer, offsetInBytes, null);
      t1 = new Uint32Array(buffer, offsetInBytes);
      return t1;
    },
    Float32List_Float32List$view: function(buffer) {
      var t1;
      H._checkViewArguments(buffer, 0, null);
      t1 = new Float32Array(buffer, 0);
      return t1;
    },
    Float64List_Float64List$view: function(buffer) {
      return buffer.asFloat64List$2(0, 0, null);
    }
  },
  W = {
    _EventStreamSubscription$: function(_target, _eventType, onData, _useCapture, $T) {
      var t1 = onData == null ? null : W._wrapZone(new W._EventStreamSubscription_closure(onData), type$.Event);
      t1 = new W._EventStreamSubscription(_target, _eventType, t1, false, $T._eval$1("_EventStreamSubscription<0>"));
      t1._tryResume$0();
      return t1;
    },
    _wrapZone: function(callback, $T) {
      var t1 = $.Zone__current;
      if (t1 === C.C__RootZone)
        return callback;
      return t1.bindUnaryCallbackGuarded$1$1(callback, $T);
    },
    Blob: function Blob() {
    },
    DedicatedWorkerGlobalScope: function DedicatedWorkerGlobalScope() {
    },
    DomException: function DomException() {
    },
    Event: function Event() {
    },
    EventTarget: function EventTarget() {
    },
    File: function File() {
    },
    MessageEvent: function MessageEvent() {
    },
    MessagePort: function MessagePort() {
    },
    WorkerGlobalScope: function WorkerGlobalScope() {
    },
    EventStreamProvider: function EventStreamProvider(t0) {
      this.$ti = t0;
    },
    _EventStream: function _EventStream(t0, t1, t2, t3) {
      var _ = this;
      _._target = t0;
      _._eventType = t1;
      _._useCapture = t2;
      _.$ti = t3;
    },
    _EventStreamSubscription: function _EventStreamSubscription(t0, t1, t2, t3, t4) {
      var _ = this;
      _._target = t0;
      _._eventType = t1;
      _._onData = t2;
      _._useCapture = t3;
      _.$ti = t4;
    },
    _EventStreamSubscription_closure: function _EventStreamSubscription_closure(t0) {
      this.onData = t0;
    }
  },
  R = {
    ArchiveException$: function(message) {
      return new R.ArchiveException(message, null, null);
    },
    ArchiveException: function ArchiveException(t0, t1, t2) {
      this.message = t0;
      this.source = t1;
      this.offset = t2;
    },
    InternalExrZipCompressor: function InternalExrZipCompressor(t0, t1, t2) {
      var _ = this;
      _.zlib = t0;
      _._exr_zip_compressor$_numScanLines = t1;
      _._outCache = null;
      _.decodedHeight = _.decodedWidth = 0;
      _._header = t2;
    },
    JpegComponent: function JpegComponent(t0, t1, t2, t3) {
      var _ = this;
      _.hSamples = t0;
      _.vSamples = t1;
      _.quantizationTableList = t2;
      _.quantizationIndex = t3;
      _.pred = _.huffmanTableAC = _.huffmanTableDC = _.blocks = _.blocksPerColumn = _.blocksPerLine = null;
    },
    JpegScan: function JpegScan(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.input = t0;
      _.frame = t1;
      _.progressive = _.mcusPerLine = null;
      _.components = t2;
      _.resetInterval = t3;
      _.spectralStart = t4;
      _.spectralEnd = t5;
      _.successivePrev = t6;
      _.successive = t7;
      _.successiveACState = _.eobrun = _.bitsCount = _.bitsData = 0;
      _.successiveACNextValue = null;
    },
    TgaInfo: function TgaInfo() {
      var _ = this;
      _.bpp = _.imageOffset = null;
      _.height = _.width = 0;
    },
    VP8LTransform__addPixelsEq: function(pixels, a, b) {
      var pa;
      if (a < 0 || a >= pixels.length)
        return H.ioore(pixels, a);
      pa = pixels[a];
      if (typeof b !== "number")
        return b.$and();
      pixels[a] = (((pa & 4278255360) >>> 0) + ((b & 4278255360) >>> 0) & 4278255360 | (pa & 16711935) + (b & 16711935) & 16711935) >>> 0;
    },
    VP8LTransform__average2: function(a0, a1) {
      return (((a0 ^ a1) & 4278124286) >>> 1) + ((a0 & a1) >>> 0);
    },
    VP8LTransform__clip255: function(a) {
      if (a < 0)
        return 0;
      if (a > 255)
        return 255;
      return a;
    },
    VP8LTransform__sub3: function(a, b, c) {
      return Math.abs(b - c) - Math.abs(a - c);
    },
    VP8LTransform__predictor0: function(pixels, left, $top) {
      return 4278190080;
    },
    VP8LTransform__predictor1: function(pixels, left, $top) {
      return left;
    },
    VP8LTransform__predictor2: function(pixels, left, $top) {
      if ($top < 0 || $top >= pixels.length)
        return H.ioore(pixels, $top);
      return pixels[$top];
    },
    VP8LTransform__predictor3: function(pixels, left, $top) {
      var t1 = $top + 1;
      if (t1 < 0 || t1 >= pixels.length)
        return H.ioore(pixels, t1);
      return pixels[t1];
    },
    VP8LTransform__predictor4: function(pixels, left, $top) {
      var t1 = $top - 1;
      if (t1 < 0 || t1 >= pixels.length)
        return H.ioore(pixels, t1);
      return pixels[t1];
    },
    VP8LTransform__predictor5: function(pixels, left, $top) {
      var t2, t3,
        t1 = pixels.length;
      if ($top < 0 || $top >= t1)
        return H.ioore(pixels, $top);
      t2 = pixels[$top];
      t3 = $top + 1;
      if (t3 >= t1)
        return H.ioore(pixels, t3);
      return R.VP8LTransform__average2(R.VP8LTransform__average2(left, pixels[t3]), t2);
    },
    VP8LTransform__predictor6: function(pixels, left, $top) {
      var t1 = $top - 1;
      if (t1 < 0 || t1 >= pixels.length)
        return H.ioore(pixels, t1);
      return R.VP8LTransform__average2(left, pixels[t1]);
    },
    VP8LTransform__predictor7: function(pixels, left, $top) {
      if ($top < 0 || $top >= pixels.length)
        return H.ioore(pixels, $top);
      return R.VP8LTransform__average2(left, pixels[$top]);
    },
    VP8LTransform__predictor8: function(pixels, left, $top) {
      var t1 = $top - 1,
        t2 = pixels.length;
      if (t1 < 0 || t1 >= t2)
        return H.ioore(pixels, t1);
      t1 = pixels[t1];
      if ($top < 0 || $top >= t2)
        return H.ioore(pixels, $top);
      return R.VP8LTransform__average2(t1, pixels[$top]);
    },
    VP8LTransform__predictor9: function(pixels, left, $top) {
      var t2, t3,
        t1 = pixels.length;
      if ($top < 0 || $top >= t1)
        return H.ioore(pixels, $top);
      t2 = pixels[$top];
      t3 = $top + 1;
      if (t3 >= t1)
        return H.ioore(pixels, t3);
      return R.VP8LTransform__average2(t2, pixels[t3]);
    },
    VP8LTransform__predictor10: function(pixels, left, $top) {
      var t3, t4,
        t1 = $top - 1,
        t2 = pixels.length;
      if (t1 < 0 || t1 >= t2)
        return H.ioore(pixels, t1);
      t1 = pixels[t1];
      if ($top < 0 || $top >= t2)
        return H.ioore(pixels, $top);
      t3 = pixels[$top];
      t4 = $top + 1;
      if (t4 >= t2)
        return H.ioore(pixels, t4);
      t4 = pixels[t4];
      return R.VP8LTransform__average2(R.VP8LTransform__average2(left, t1), R.VP8LTransform__average2(t3, t4));
    },
    VP8LTransform__predictor11: function(pixels, left, $top) {
      var t2, t3,
        t1 = pixels.length;
      if ($top < 0 || $top >= t1)
        return H.ioore(pixels, $top);
      t2 = pixels[$top];
      t3 = $top - 1;
      if (t3 < 0 || t3 >= t1)
        return H.ioore(pixels, t3);
      t3 = pixels[t3];
      return R.VP8LTransform__sub3(t2 >>> 24, left >>> 24, t3 >>> 24) + R.VP8LTransform__sub3(t2 >>> 16 & 255, left >>> 16 & 255, t3 >>> 16 & 255) + R.VP8LTransform__sub3(t2 >>> 8 & 255, left >>> 8 & 255, t3 >>> 8 & 255) + R.VP8LTransform__sub3(t2 & 255, left & 255, t3 & 255) <= 0 ? t2 : left;
    },
    VP8LTransform__predictor12: function(pixels, left, $top) {
      var t2, t3,
        t1 = pixels.length;
      if ($top < 0 || $top >= t1)
        return H.ioore(pixels, $top);
      t2 = pixels[$top];
      t3 = $top - 1;
      if (t3 < 0 || t3 >= t1)
        return H.ioore(pixels, t3);
      t3 = pixels[t3];
      return (R.VP8LTransform__clip255((left >>> 24) + (t2 >>> 24) - (t3 >>> 24)) << 24 | R.VP8LTransform__clip255((left >>> 16 & 255) + (t2 >>> 16 & 255) - (t3 >>> 16 & 255)) << 16 | R.VP8LTransform__clip255((left >>> 8 & 255) + (t2 >>> 8 & 255) - (t3 >>> 8 & 255)) << 8 | R.VP8LTransform__clip255((left & 255) + (t2 & 255) - (t3 & 255))) >>> 0;
    },
    VP8LTransform__predictor13: function(pixels, left, $top) {
      var t2, t3, avg, t4, t5,
        t1 = pixels.length;
      if ($top < 0 || $top >= t1)
        return H.ioore(pixels, $top);
      t2 = pixels[$top];
      t3 = $top - 1;
      if (t3 < 0 || t3 >= t1)
        return H.ioore(pixels, t3);
      t3 = pixels[t3];
      avg = R.VP8LTransform__average2(left, t2);
      t2 = avg >>> 24;
      t1 = avg >>> 16 & 255;
      t4 = avg >>> 8 & 255;
      t5 = avg >>> 0 & 255;
      return (R.VP8LTransform__clip255(t2 + C.JSInt_methods._tdivFast$1(t2 - (t3 >>> 24), 2)) << 24 | R.VP8LTransform__clip255(t1 + C.JSInt_methods._tdivFast$1(t1 - (t3 >>> 16 & 255), 2)) << 16 | R.VP8LTransform__clip255(t4 + C.JSInt_methods._tdivFast$1(t4 - (t3 >>> 8 & 255), 2)) << 8 | R.VP8LTransform__clip255(t5 + C.JSInt_methods._tdivFast$1(t5 - (t3 >>> 0 & 255), 2))) >>> 0;
    },
    VP8LTransform: function VP8LTransform() {
      var _ = this;
      _.ysize = _.xsize = _.type = 0;
      _.data = null;
      _.bits = 0;
    }
  },
  T = {
    InputStream$: function(data, byteOrder, $length, start) {
      var t1, t2;
      if (type$.legacy_TypedData._is(data))
        t1 = H.NativeUint8List_NativeUint8List$view(data.buffer, data.byteOffset, data.byteLength);
      else
        t1 = type$.legacy_List_legacy_int._is(data) ? data : P.List_List$from(type$.legacy_Iterable_dynamic._as(data), true, type$.legacy_int);
      t2 = new T.InputStream(t1, start, start, byteOrder);
      t2._input_stream$_length = $length == null ? t1.length : $length;
      return t2;
    },
    InputStreamBase: function InputStreamBase() {
    },
    InputStream: function InputStream(t0, t1, t2, t3) {
      var _ = this;
      _.buffer = t0;
      _.offset = t1;
      _.start = t2;
      _.byteOrder = t3;
      _._input_stream$_length = null;
    }
  },
  Q = {
    OutputStream$: function(size) {
      return new Q.OutputStream(new Uint8Array(32768));
    },
    OutputStreamBase: function OutputStreamBase() {
    },
    OutputStream: function OutputStream(t0) {
      this._output_stream$_length = 0;
      this._output_stream$_buffer = t0;
    },
    PngInfo: function PngInfo() {
    },
    InternalPngInfo: function InternalPngInfo(t0, t1) {
      var _ = this;
      _.gamma = _.colorLut = _.transparency = _.palette = _.interlaceMethod = _.filterMethod = _.colorType = _.bits = null;
      _.iCCPName = "";
      _.iCCPData = null;
      _.frames = t0;
      _._idat = t1;
      _.height = _.width = 0;
    },
    PsdLayerData_PsdLayerData: function(tag, data) {
      var t1, len;
      switch (tag) {
        case "lsct":
          t1 = data.offset;
          if (typeof t1 !== "number")
            return H.iae(t1);
          len = data.end - t1;
          data.readUint32$0();
          if (len >= 12) {
            if (data.readString$1(4) !== "8BIM")
              H.throwExpression(K.ImageException$("Invalid key in layer additional data"));
            data.readString$1(4);
          }
          if (len >= 16)
            data.readUint32$0();
          return new Y.PsdLayerSectionDivider();
        default:
          return new K.PsdLayerAdditionalData(data);
      }
    },
    PsdLayerData: function PsdLayerData() {
    },
    ExrWavelet_decode: function(input, si, nx, ox, ny, oy, mx) {
      var n, p, p0, a_b, t1, p2, ey, oy1, oy2, ox1, ox2, t2, t3, i11, i10, i01, i00, py, ex, px, p01, p10, p11, t4, _null = null,
        w14 = mx < 16384;
      if (typeof nx !== "number")
        return nx.$gt();
      if (typeof ny !== "number")
        return H.iae(ny);
      if (nx > ny)
        n = ny;
      else
        n = nx;
      for (p = 1; p <= n;)
        p = p << 1 >>> 0;
      p = p >>> 1;
      p0 = p >>> 1;
      a_b = H.setRuntimeTypeInfo([0, 0], type$.JSArray_legacy_int);
      for (t1 = input.length, p2 = p, p = p0; p >= 1; p2 = p, p = p0) {
        ey = si + oy * (ny - p2);
        oy1 = oy * p;
        oy2 = oy * p2;
        if (typeof ox !== "number")
          return ox.$mul();
        ox1 = ox * p;
        ox2 = ox * p2;
        for (t2 = (nx & p) >>> 0 !== 0, t3 = ox * (nx - p2), i11 = _null, i10 = i11, i01 = i10, i00 = i01, py = si; py <= ey; py += oy2) {
          ex = py + t3;
          for (px = py; px <= ex; px += ox2) {
            p01 = px + ox1;
            p10 = px + oy1;
            p11 = p10 + ox1;
            if (w14) {
              if (px < 0 || px >= t1)
                return H.ioore(input, px);
              t4 = input[px];
              if (p10 < 0 || p10 >= t1)
                return H.ioore(input, p10);
              Q.ExrWavelet_wdec14(t4, input[p10], a_b);
              i00 = a_b[0];
              i10 = a_b[1];
              if (p01 < 0 || p01 >= t1)
                return H.ioore(input, p01);
              t4 = input[p01];
              if (p11 < 0 || p11 >= t1)
                return H.ioore(input, p11);
              Q.ExrWavelet_wdec14(t4, input[p11], a_b);
              i01 = a_b[0];
              i11 = a_b[1];
              Q.ExrWavelet_wdec14(i00, i01, a_b);
              input[px] = a_b[0];
              input[p01] = a_b[1];
              Q.ExrWavelet_wdec14(i10, i11, a_b);
              input[p10] = a_b[0];
              input[p11] = a_b[1];
            } else {
              if (px < 0 || px >= t1)
                return H.ioore(input, px);
              t4 = input[px];
              if (p10 < 0 || p10 >= t1)
                return H.ioore(input, p10);
              Q.ExrWavelet_wdec16(t4, input[p10], a_b);
              i00 = a_b[0];
              i10 = a_b[1];
              if (p01 < 0 || p01 >= t1)
                return H.ioore(input, p01);
              t4 = input[p01];
              if (p11 < 0 || p11 >= t1)
                return H.ioore(input, p11);
              Q.ExrWavelet_wdec16(t4, input[p11], a_b);
              i01 = a_b[0];
              i11 = a_b[1];
              Q.ExrWavelet_wdec16(i00, i01, a_b);
              input[px] = a_b[0];
              input[p01] = a_b[1];
              Q.ExrWavelet_wdec16(i10, i11, a_b);
              input[p10] = a_b[0];
              input[p11] = a_b[1];
            }
          }
          if (t2) {
            p10 = px + oy1;
            if (w14) {
              if (px < 0 || px >= t1)
                return H.ioore(input, px);
              t4 = input[px];
              if (p10 < 0 || p10 >= t1)
                return H.ioore(input, p10);
              Q.ExrWavelet_wdec14(t4, input[p10], a_b);
              i00 = a_b[0];
              input[p10] = a_b[1];
            } else {
              if (px < 0 || px >= t1)
                return H.ioore(input, px);
              t4 = input[px];
              if (p10 < 0 || p10 >= t1)
                return H.ioore(input, p10);
              Q.ExrWavelet_wdec16(t4, input[p10], a_b);
              i00 = a_b[0];
              input[p10] = a_b[1];
            }
            if (px < 0 || px >= t1)
              return H.ioore(input, px);
            input[px] = i00;
          }
        }
        if ((ny & p) >>> 0 !== 0) {
          ex = py + t3;
          for (px = py; px <= ex; px += ox2) {
            p01 = px + ox1;
            if (w14) {
              if (px < 0 || px >= t1)
                return H.ioore(input, px);
              t2 = input[px];
              if (p01 < 0 || p01 >= t1)
                return H.ioore(input, p01);
              Q.ExrWavelet_wdec14(t2, input[p01], a_b);
              i00 = a_b[0];
              input[p01] = a_b[1];
            } else {
              if (px < 0 || px >= t1)
                return H.ioore(input, px);
              t2 = input[px];
              if (p01 < 0 || p01 >= t1)
                return H.ioore(input, p01);
              Q.ExrWavelet_wdec16(t2, input[p01], a_b);
              i00 = a_b[0];
              input[p01] = a_b[1];
            }
            if (px < 0 || px >= t1)
              return H.ioore(input, px);
            input[px] = i00;
          }
        }
        p0 = p >>> 1;
      }
    },
    ExrWavelet_wdec14: function(l, h, a_b) {
      var t2, ls, hs, ai,
        t1 = $.$get$__uint16();
      (t1 && C.NativeUint16List_methods).$indexSet(t1, 0, l);
      t2 = $.$get$__uint16ToInt16();
      if (0 >= t2.length)
        return H.ioore(t2, 0);
      ls = t2[0];
      C.NativeUint16List_methods.$indexSet(t1, 0, h);
      hs = t2[0];
      ai = ls + (hs & 1) + C.JSInt_methods._shrOtherPositive$1(hs, 1);
      C.JSArray_methods.$indexSet(a_b, 0, ai);
      C.JSArray_methods.$indexSet(a_b, 1, ai - hs);
    },
    ExrWavelet_wdec16: function(l, h, a_b) {
      var t1, bb;
      if (typeof h !== "number")
        return h.$shr();
      t1 = C.JSInt_methods._shrOtherPositive$1(h, 1);
      if (typeof l !== "number")
        return l.$sub();
      bb = l - t1 & 65535;
      C.JSArray_methods.$indexSet(a_b, 1, bb);
      C.JSArray_methods.$indexSet(a_b, 0, h + bb - 32768 & 65535);
    },
    Half_HalfToDouble: function(bits) {
      var t1;
      if ($.Half__toFloatFloat32 == null)
        Q.Half__initialize();
      t1 = $.Half__toFloatFloat32;
      if (bits < 0 || bits >= t1.length)
        return H.ioore(t1, bits);
      return t1[bits];
    },
    Half_DoubleToHalf: function(n) {
      var t1, x_i, e, m;
      if ($.Half__toFloatFloat32 == null)
        Q.Half__initialize();
      $.$get$__float32()[0] = n;
      t1 = $.$get$__float32ToUint32();
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      x_i = t1[0];
      if (n === 0)
        return x_i >>> 16;
      e = $.Half__eLut[x_i >>> 23 & 511];
      if (e !== 0) {
        m = x_i & 8388607;
        return e + (m + 4095 + (m >>> 13 & 1) >>> 13);
      }
      return Q.Half__convert(x_i);
    },
    Half__convert: function(i) {
      var t, t1, t2,
        s = i >>> 16 & 32768,
        e = (i >>> 23 & 255) - 112,
        m = i & 8388607;
      if (e <= 0) {
        if (e < -10)
          return s;
        m |= 8388608;
        t = 14 - e;
        return (s | C.JSInt_methods.$shr(m + (C.JSInt_methods.$shl(1, t - 1) - 1) + (C.JSInt_methods._shrReceiverPositive$1(m, t) & 1), t)) >>> 0;
      } else if (e === 143) {
        t1 = s | 31744;
        if (m === 0)
          return t1;
        else {
          m = m >>> 13;
          t2 = m === 0 ? 1 : 0;
          return t1 | m | t2;
        }
      } else {
        m = m + 4095 + (m >>> 13 & 1);
        if ((m & 8388608) !== 0) {
          ++e;
          m = 0;
        }
        if (e > 30)
          return s | 31744;
        return (s | e << 10 | m >>> 13) >>> 0;
      }
    },
    Half__initialize: function() {
      var t1, i, e, t2, t3;
      if ($.Half__toFloatUint32 != null)
        return;
      t1 = new Uint32Array(65536);
      $.Half__toFloatUint32 = t1;
      $.Half__toFloatFloat32 = H.NativeFloat32List_NativeFloat32List$view(t1.buffer, 0, null);
      t1 = $.Half__eLut = new Uint16Array(512);
      for (i = 0; i < 256; ++i) {
        e = (i & 255) - 112;
        t2 = e <= 0 || e >= 30;
        t3 = (i | 256) >>> 0;
        if (t2) {
          t1[i] = 0;
          if (t3 >= 512)
            return H.ioore(t1, t3);
          t1[t3] = 0;
        } else {
          t2 = e << 10 >>> 0;
          t1[i] = t2;
          if (t3 >= 512)
            return H.ioore(t1, t3);
          t1[t3] = (t2 | 32768) >>> 0;
        }
      }
      for (t1 = $.Half__toFloatUint32, i = 0; i < 65536; ++i)
        t1[i] = Q.Half__halfToFloat(i);
    },
    Half__halfToFloat: function(y) {
      var t1,
        s = y >>> 15 & 1,
        e = y >>> 10 & 31,
        m = y & 1023;
      if (e === 0)
        if (m === 0)
          return s << 31 >>> 0;
        else {
          for (; (m & 1024) === 0;) {
            m = m << 1;
            --e;
          }
          ++e;
          m &= 4294966271;
        }
      else if (e === 31) {
        t1 = (s << 31 | 2139095040) >>> 0;
        if (m === 0)
          return t1;
        else
          return (t1 | m << 13) >>> 0;
      }
      return (s << 31 | e + 112 << 23 | m << 13) >>> 0;
    }
  },
  G = {_ZLibDecoder: function _ZLibDecoder() {
    },
    ExifData$from: function(other) {
      var t1 = type$.legacy_int,
        t2 = type$.dynamic;
      t1 = new G.ExifData(other == null ? P.LinkedHashMap_LinkedHashMap$_empty(t1, t2) : P.LinkedHashMap_LinkedHashMap$from(other.data, t1, t2));
      t1.ExifData$from$1(other);
      return t1;
    },
    ExifData: function ExifData(t0) {
      this.rawData = null;
      this.data = t0;
    },
    InternalExrPizCompressor: function InternalExrPizCompressor(t0, t1, t2) {
      var _ = this;
      _._exr_piz_compressor$_output = null;
      _._exr_piz_compressor$_maxScanLineSize = t0;
      _._exr_piz_compressor$_numScanLines = t1;
      _._tmpBuffer = _._channelData = null;
      _.decodedHeight = _.decodedWidth = 0;
      _._header = t2;
    },
    _PizChannelData: function _PizChannelData() {
      var _ = this;
      _.size = _.ys = _.ny = _.nx = _.end = _.start = null;
    },
    PngDecoder: function PngDecoder() {
      var _ = this;
      _._png_decoder$_info = null;
      _._png_decoder$_bitBufferLen = _._png_decoder$_bitBuffer = 0;
      _._progressY = _._png_decoder$_input = null;
    },
    TiffEntry: function TiffEntry(t0, t1, t2) {
      var _ = this;
      _.tag = t0;
      _.type = t1;
      _.numValues = t2;
      _.valueOffset = null;
    },
    LzwDecoder: function LzwDecoder(t0) {
      var _ = this;
      _._bitsToGet = 9;
      _._nextBits = _._nextData = _._bytePointer = 0;
      _._outPointer = _._out = _._dataLength = _._data = null;
      _._tiff_lzw_decoder$_buffer = t0;
      _._bufferLength = _._tableIndex = _._prefix = _._table = null;
    },
    OutputBuffer$: function(bigEndian, size) {
      return new G.OutputBuffer(bigEndian, new Uint8Array(size));
    },
    OutputBuffer: function OutputBuffer(t0, t1) {
      this.length = 0;
      this.bigEndian = t0;
      this._buffer = t1;
    },
    copyRotate: function(src, angle) {
      var t1, wm1, t2, hm1, dst, t3, t4, t5, t6, t7, y, x, t8, t9, t10, rad, ca, sa, w2, h2, dw2, dh2, c,
        nangle = C.JSInt_methods.$mod(angle, 360);
      if (C.JSInt_methods.$mod(nangle, 90) === 0) {
        t1 = src.width;
        if (typeof t1 !== "number")
          return t1.$sub();
        wm1 = t1 - 1;
        t2 = src.height;
        if (typeof t2 !== "number")
          return t2.$sub();
        hm1 = t2 - 1;
        switch (C.JSInt_methods._tdivFast$1(nangle, 90)) {
          case 1:
            dst = U.Image$(t2, t1, src.channels, src.exif, src.iccProfile);
            t2 = dst.height;
            if (typeof t2 !== "number")
              return H.iae(t2);
            t3 = dst.width;
            t4 = src.data;
            t5 = t4.length;
            t6 = dst.data;
            t7 = t6.length;
            y = 0;
            for (; y < t2; ++y) {
              if (typeof t3 !== "number")
                return H.iae(t3);
              x = 0;
              for (; x < t3; ++x) {
                t8 = (hm1 - x) * t1 + y;
                if (t8 < 0 || t8 >= t5)
                  return H.ioore(t4, t8);
                t8 = t4[t8];
                t9 = y * t3 + x;
                if (t9 < 0 || t9 >= t7)
                  return H.ioore(t6, t9);
                t6[t9] = t8;
              }
            }
            return dst;
          case 2:
            dst = U.Image$(t1, t2, src.channels, src.exif, src.iccProfile);
            t2 = dst.height;
            if (typeof t2 !== "number")
              return H.iae(t2);
            t3 = dst.width;
            t4 = src.data;
            t5 = t4.length;
            t6 = dst.data;
            t7 = t6.length;
            y = 0;
            for (; y < t2; ++y) {
              if (typeof t3 !== "number")
                return H.iae(t3);
              t8 = hm1 - y;
              x = 0;
              for (; x < t3; ++x) {
                t9 = t8 * t1 + (wm1 - x);
                if (t9 < 0 || t9 >= t5)
                  return H.ioore(t4, t9);
                t9 = t4[t9];
                t10 = y * t3 + x;
                if (t10 < 0 || t10 >= t7)
                  return H.ioore(t6, t10);
                t6[t10] = t9;
              }
            }
            return dst;
          case 3:
            dst = U.Image$(t2, t1, src.channels, src.exif, src.iccProfile);
            t2 = dst.height;
            if (typeof t2 !== "number")
              return H.iae(t2);
            t3 = dst.width;
            t4 = src.data;
            t5 = t4.length;
            t6 = dst.data;
            t7 = t6.length;
            y = 0;
            for (; y < t2; ++y) {
              if (typeof t3 !== "number")
                return H.iae(t3);
              t8 = wm1 - y;
              x = 0;
              for (; x < t3; ++x) {
                t9 = x * t1 + t8;
                if (t9 < 0 || t9 >= t5)
                  return H.ioore(t4, t9);
                t9 = t4[t9];
                t10 = y * t3 + x;
                if (t10 < 0 || t10 >= t7)
                  return H.ioore(t6, t10);
                t6[t10] = t9;
              }
            }
            return dst;
          default:
            return U.Image$from(src);
        }
      }
      rad = nangle * 3.141592653589793 / 180;
      ca = Math.cos(rad);
      sa = Math.sin(rad);
      t1 = src.width;
      if (typeof t1 !== "number")
        return t1.$mul();
      t2 = src.height;
      if (typeof t2 !== "number")
        return t2.$mul();
      w2 = 0.5 * t1;
      h2 = 0.5 * t2;
      t3 = Math.abs(t1 * ca) + Math.abs(t2 * sa);
      dw2 = 0.5 * t3;
      t2 = Math.abs(t1 * sa) + Math.abs(t2 * ca);
      dh2 = 0.5 * t2;
      dst = U.Image$(C.JSNumber_methods.toInt$0(t3), C.JSNumber_methods.toInt$0(t2), C.Channels_1, src.exif, src.iccProfile);
      t1 = dst.height;
      if (typeof t1 !== "number")
        return H.iae(t1);
      t2 = dst.width;
      t3 = dst.data;
      t4 = t3.length;
      y = 0;
      for (; y < t1; ++y) {
        if (typeof t2 !== "number")
          return H.iae(t2);
        t5 = y - dh2;
        t6 = t5 * sa;
        t5 *= ca;
        x = 0;
        for (; x < t2; ++x) {
          t7 = x - dw2;
          c = src.getPixelInterpolate$3(w2 + t7 * ca + t6, h2 - t7 * sa + t5, C.Interpolation_0);
          t7 = y * t2 + x;
          if (t7 < 0 || t7 >= t4)
            return H.ioore(t3, t7);
          t3[t7] = c;
        }
      }
      return dst;
    }
  },
  Y = {HuffmanTable: function HuffmanTable() {
      this.table = null;
      this.maxCodeLength = 0;
      this.minCodeLength = 2147483647;
    },
    ExrHuffman_uncompress: function(compressed, nCompressed, raw, nRaw) {
      var start, im, iM, t1, nBits, freq, hdec, i;
      if (nCompressed === 0) {
        if (nRaw !== 0)
          throw H.wrapException(K.ImageException$("Incomplete huffman data"));
        return;
      }
      start = compressed.offset;
      im = compressed.readUint32$0();
      iM = compressed.readUint32$0();
      t1 = compressed.offset;
      if (typeof t1 !== "number")
        return t1.$add();
      compressed.offset = t1 + 4;
      nBits = compressed.readUint32$0();
      if (im < 65537)
        t1 = iM >= 65537;
      else
        t1 = true;
      if (t1)
        throw H.wrapException(K.ImageException$("Invalid huffman table size"));
      t1 = compressed.offset;
      if (typeof t1 !== "number")
        return t1.$add();
      compressed.offset = t1 + 4;
      t1 = new Array(65537);
      t1.fixed$length = Array;
      freq = H.setRuntimeTypeInfo(t1, type$.JSArray_legacy_int);
      C.JSArray_methods.fillRange$3(freq, 0, 65537, 0);
      t1 = new Array(16384);
      t1.fixed$length = Array;
      hdec = H.setRuntimeTypeInfo(t1, type$.JSArray_legacy_ExrHufDec);
      for (i = 0; i < 16384; ++i)
        C.JSArray_methods.$indexSet(hdec, i, new Y.ExrHufDec());
      Y.ExrHuffman_unpackEncTable(compressed, nCompressed - 20, im, iM, freq);
      t1 = compressed.offset;
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof start !== "number")
        return H.iae(start);
      if (nBits > 8 * (nCompressed - (t1 - start)))
        throw H.wrapException(K.ImageException$("Error in header for Huffman-encoded data (invalid number of bits)."));
      Y.ExrHuffman_buildDecTable(freq, im, iM, hdec);
      Y.ExrHuffman_decode(freq, hdec, compressed, nBits, iM, nRaw, raw);
    },
    ExrHuffman_decode: function(hcode, hdecod, input, ni, rlc, no, out) {
      var ie, oi, pl, j, l, t3, t4, oi0, i,
        _s45_ = "Error in Huffman-encoded data (invalid code).",
        c_lc = H.setRuntimeTypeInfo([0, 0], type$.JSArray_legacy_int),
        t1 = input.offset,
        t2 = C.JSInt_methods._tdivFast$1(ni + 7, 8);
      if (typeof t1 !== "number")
        return t1.$add();
      ie = t1 + t2;
      oi = 0;
      while (true) {
        t1 = input.offset;
        if (typeof t1 !== "number")
          return t1.$lt();
        if (!(t1 < ie))
          break;
        Y.ExrHuffman_getChar(c_lc, input);
        for (; t1 = c_lc[1], t1 >= 14;) {
          pl = hdecod[C.JSInt_methods.$shr(c_lc[0], t1 - 14) & 16383];
          t2 = pl.len;
          if (t2 !== 0) {
            C.JSArray_methods.$indexSet(c_lc, 1, t1 - t2);
            oi = Y.ExrHuffman_getCode(pl.lit, rlc, c_lc, input, out, oi, no);
          } else {
            if (pl.p == null)
              throw H.wrapException(K.ImageException$(_s45_));
            for (j = 0; j < pl.lit; ++j) {
              t1 = pl.p;
              if (j >= t1.length)
                return H.ioore(t1, j);
              t1 = C.JSArray_methods.$index(hcode, t1[j]);
              if (typeof t1 !== "number")
                return t1.$and();
              l = t1 & 63;
              while (true) {
                t1 = c_lc[1];
                if (t1 < l) {
                  t2 = input.offset;
                  if (typeof t2 !== "number")
                    return t2.$lt();
                  t2 = t2 < ie;
                } else
                  t2 = false;
                if (!t2)
                  break;
                Y.ExrHuffman_getChar(c_lc, input);
              }
              if (t1 >= l) {
                t1 = pl.p;
                if (j >= t1.length)
                  return H.ioore(t1, j);
                t1 = C.JSArray_methods.$index(hcode, t1[j]);
                if (typeof t1 !== "number")
                  return t1.$shr();
                t1 = C.JSInt_methods._shrOtherPositive$1(t1, 6);
                t2 = c_lc[0];
                t3 = c_lc[1];
                t4 = t3 - l;
                if (t1 === (C.JSInt_methods.$shr(t2, t4) & C.JSInt_methods._shlPositive$1(1, l) - 1) >>> 0) {
                  C.JSArray_methods.$indexSet(c_lc, 1, t4);
                  t1 = pl.p;
                  if (j >= t1.length)
                    return H.ioore(t1, j);
                  oi0 = Y.ExrHuffman_getCode(t1[j], rlc, c_lc, input, out, oi, no);
                  oi = oi0;
                  break;
                }
              }
            }
            if (j === pl.lit)
              throw H.wrapException(K.ImageException$(_s45_));
          }
        }
      }
      i = 8 - ni & 7;
      C.JSArray_methods.$indexSet(c_lc, 0, C.JSInt_methods._shrOtherPositive$1(c_lc[0], i));
      C.JSArray_methods.$indexSet(c_lc, 1, c_lc[1] - i);
      for (; t1 = c_lc[1], t1 > 0;) {
        pl = hdecod[C.JSInt_methods.$shl(c_lc[0], 14 - t1) & 16383];
        t2 = pl.len;
        if (t2 !== 0) {
          C.JSArray_methods.$indexSet(c_lc, 1, t1 - t2);
          oi = Y.ExrHuffman_getCode(pl.lit, rlc, c_lc, input, out, oi, no);
        } else
          throw H.wrapException(K.ImageException$(_s45_));
      }
      if (oi !== no)
        throw H.wrapException(K.ImageException$("Error in Huffman-encoded data (decoded data are shorter than expected)."));
    },
    ExrHuffman_getCode: function(po, rlc, c_lc, input, out, oi, oe) {
      var cs, t1, t2, s, cs0, oi0,
        _s70_ = "Error in Huffman-encoded data (decoded data are longer than expected).";
      if (po === rlc) {
        if (c_lc[1] < 8)
          Y.ExrHuffman_getChar(c_lc, input);
        C.JSArray_methods.$indexSet(c_lc, 1, c_lc[1] - 8);
        cs = C.JSInt_methods.$shr(c_lc[0], c_lc[1]) & 255;
        if (oi + cs > oe)
          throw H.wrapException(K.ImageException$(_s70_));
        t1 = oi - 1;
        t2 = out.length;
        if (t1 < 0 || t1 >= t2)
          return H.ioore(out, t1);
        s = out[t1];
        for (; cs0 = cs - 1, cs > 0; cs = cs0, oi = oi0) {
          oi0 = oi + 1;
          if (oi >= t2)
            return H.ioore(out, oi);
          out[oi] = s;
        }
      } else {
        if (oi < oe) {
          oi0 = oi + 1;
          C.NativeUint16List_methods.$indexSet(out, oi, po);
        } else
          throw H.wrapException(K.ImageException$(_s70_));
        oi = oi0;
      }
      return oi;
    },
    ExrHuffman_buildDecTable: function(hcode, im, iM, hdecod) {
      var t1, t2, t3, l, pl, i, pi,
        _s57_ = "Error in Huffman-encoded data (invalid code table entry).";
      for (t1 = type$.JSArray_legacy_int; im <= iM; ++im) {
        if (im >= 65537)
          return H.ioore(hcode, im);
        t2 = hcode[im];
        if (typeof t2 !== "number")
          return t2.$shr();
        t3 = C.JSInt_methods._shrOtherPositive$1(t2, 6);
        l = t2 & 63;
        if (C.JSInt_methods._shrBothPositive$1(t3, l) !== 0)
          throw H.wrapException(K.ImageException$(_s57_));
        if (l > 14) {
          t2 = C.JSInt_methods._shrReceiverPositive$1(t3, l - 14);
          if (t2 >= 16384)
            return H.ioore(hdecod, t2);
          pl = hdecod[t2];
          if (pl.len !== 0)
            throw H.wrapException(K.ImageException$(_s57_));
          t2 = ++pl.lit;
          t3 = pl.p;
          if (t3 != null) {
            t2 = new Array(t2);
            t2.fixed$length = Array;
            pl.set$p(H.setRuntimeTypeInfo(t2, t1));
            for (i = 0; i < pl.lit - 1; ++i) {
              t2 = pl.p;
              if (i >= t3.length)
                return H.ioore(t3, i);
              (t2 && C.JSArray_methods).$indexSet(t2, i, t3[i]);
            }
          } else
            pl.set$p(H.setRuntimeTypeInfo([0], t1));
          t2 = pl.p;
          (t2 && C.JSArray_methods).$indexSet(t2, pl.lit - 1, im);
        } else if (l !== 0) {
          t2 = 14 - l;
          pi = C.JSInt_methods.$shl(t3, t2);
          if (pi >= 16384)
            return H.ioore(hdecod, pi);
          for (i = C.JSInt_methods.$shl(1, t2); i > 0; --i, ++pi) {
            if (pi >= 16384)
              return H.ioore(hdecod, pi);
            pl = hdecod[pi];
            if (pl.len !== 0 || pl.p != null)
              throw H.wrapException(K.ImageException$(_s57_));
            pl.len = l;
            pl.lit = im;
          }
        }
      }
    },
    ExrHuffman_unpackEncTable: function(p, ni, im, iM, hcode) {
      var t1, t2, l, zerun, zerun0, im0,
        _s66_ = "Error in Huffman-encoded data (unexpected end of code table data).",
        _s67_ = "Error in Huffman-encoded data (code table is longer than expected).",
        pcode = p.offset,
        c_lc = H.setRuntimeTypeInfo([0, 0], type$.JSArray_legacy_int);
      for (t1 = iM + 1; im <= iM; ++im) {
        t2 = p.offset;
        if (typeof t2 !== "number")
          return t2.$sub();
        if (typeof pcode !== "number")
          return H.iae(pcode);
        if (t2 - pcode > ni)
          throw H.wrapException(K.ImageException$(_s66_));
        l = Y.ExrHuffman_getBits(6, c_lc, p);
        C.JSArray_methods.$indexSet(hcode, im, l);
        if (l === 63) {
          t2 = p.offset;
          if (typeof t2 !== "number")
            return t2.$sub();
          if (t2 - pcode > ni)
            throw H.wrapException(K.ImageException$(_s66_));
          zerun = Y.ExrHuffman_getBits(8, c_lc, p) + 6;
          if (im + zerun > t1)
            throw H.wrapException(K.ImageException$(_s67_));
          for (; zerun0 = zerun - 1, zerun !== 0; zerun = zerun0, im = im0) {
            im0 = im + 1;
            C.JSArray_methods.$indexSet(hcode, im, 0);
          }
          --im;
        } else if (l >= 59) {
          zerun = l - 59 + 2;
          if (im + zerun > t1)
            throw H.wrapException(K.ImageException$(_s67_));
          for (; zerun0 = zerun - 1, zerun !== 0; zerun = zerun0, im = im0) {
            im0 = im + 1;
            C.JSArray_methods.$indexSet(hcode, im, 0);
          }
          --im;
        }
      }
      Y.ExrHuffman_canonicalCodeTable(hcode);
    },
    ExrHuffman_canonicalCodeTable: function(hcode) {
      var n, i, t2, c, nc, l,
        t1 = new Array(59);
      t1.fixed$length = Array;
      n = H.setRuntimeTypeInfo(t1, type$.JSArray_legacy_int);
      C.JSArray_methods.fillRange$3(n, 0, 59, 0);
      for (i = 0; i < 65537; ++i) {
        t1 = hcode[i];
        t2 = C.JSArray_methods.$index(n, t1);
        if (typeof t2 !== "number")
          return t2.$add();
        C.JSArray_methods.$indexSet(n, t1, t2 + 1);
      }
      for (c = 0, i = 58; i > 0; --i, c = nc) {
        t1 = n[i];
        if (typeof t1 !== "number")
          return H.iae(t1);
        nc = C.JSNumber_methods._shrOtherPositive$1(c + t1, 1);
        C.JSArray_methods.$indexSet(n, i, c);
      }
      for (i = 0; i < 65537; ++i) {
        l = hcode[i];
        if (typeof l !== "number")
          return l.$gt();
        if (l > 0) {
          if (l >= 59)
            return H.ioore(n, l);
          t1 = n[l];
          if (typeof t1 !== "number")
            return t1.$add();
          C.JSArray_methods.$indexSet(n, l, t1 + 1);
          C.JSArray_methods.$indexSet(hcode, i, (l | t1 << 6) >>> 0);
        }
      }
    },
    ExrHuffman_getChar: function(c_lc, input) {
      var t1 = c_lc[0],
        t2 = input.readByte$0();
      if (typeof t2 !== "number")
        return H.iae(t2);
      C.JSArray_methods.$indexSet(c_lc, 0, ((t1 << 8 | t2) & -1) >>> 0);
      C.JSArray_methods.$indexSet(c_lc, 1, (c_lc[1] + 8 & -1) >>> 0);
    },
    ExrHuffman_getBits: function(nBits, c_lc, input) {
      var t1, t2, t3;
      for (; t1 = c_lc[1], t1 < nBits;) {
        t1 = c_lc[0];
        t2 = input.buffer;
        t3 = input.offset;
        if (typeof t3 !== "number")
          return t3.$add();
        input.offset = t3 + 1;
        t3 = J.$index$asx(t2, t3);
        if (typeof t3 !== "number")
          return H.iae(t3);
        C.JSArray_methods.$indexSet(c_lc, 0, ((t1 << 8 | t3) & -1) >>> 0);
        C.JSArray_methods.$indexSet(c_lc, 1, (c_lc[1] + 8 & -1) >>> 0);
      }
      C.JSArray_methods.$indexSet(c_lc, 1, t1 - nBits);
      return (C.JSInt_methods.$shr(c_lc[0], c_lc[1]) & C.JSInt_methods._shlPositive$1(1, nBits) - 1) >>> 0;
    },
    ExrHufDec: function ExrHufDec() {
      this.lit = this.len = 0;
      this.p = null;
    },
    ExrImage_isValidFile: function(bytes) {
      var input = Z.InputBuffer$(bytes, false, null, 0);
      if (input.readUint32$0() !== 20000630)
        return false;
      if (input.readByte$0() !== 2)
        return false;
      if ((input.readUint24$0() & 4294967289) >>> 0 !== 0)
        return false;
      return true;
    },
    ExrImage: function ExrImage(t0) {
      var _ = this;
      _._parts = t0;
      _.flags = _.version = null;
      _.height = _.width = 0;
    },
    InternalExrRleCompressor: function InternalExrRleCompressor(t0) {
      var _ = this;
      _._exr_rle_compressor$_outCache = null;
      _.decodedHeight = _.decodedWidth = 0;
      _._header = t0;
    },
    JpegData$: function() {
      var t1 = new Array(4);
      t1.fixed$length = Array;
      return new Y.JpegData(new G.ExifData(P.LinkedHashMap_LinkedHashMap$_empty(type$.legacy_int, type$.dynamic)), H.setRuntimeTypeInfo(t1, type$.JSArray_legacy_Int16List), H.setRuntimeTypeInfo([], type$.JSArray_legacy_JpegFrame), [], [], H.setRuntimeTypeInfo([], type$.JSArray_legacy_ComponentData));
    },
    JpegData: function JpegData(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.resetInterval = _.frame = _.adobe = _.jfif = _.input = null;
      _.exif = t0;
      _.quantizationTables = t1;
      _.frames = t2;
      _.huffmanTablesAC = t3;
      _.huffmanTablesDC = t4;
      _.components = t5;
    },
    _JpegHuffman: function _JpegHuffman(t0) {
      this.children = t0;
      this.index = 0;
    },
    PsdLayerSectionDivider: function PsdLayerSectionDivider() {
    },
    VP8LColorCache: function VP8LColorCache(t0, t1) {
      this.colors = t0;
      this.hashShift = t1;
    }
  },
  S = {
    Inflate$: function(bytes) {
      var t2,
        t1 = new Y.HuffmanTable();
      t1.HuffmanTable$1(C.List_2Bc);
      t2 = new Y.HuffmanTable();
      t2.HuffmanTable$1(C.List_X3d);
      t2 = new S.Inflate(T.InputStream$(bytes, 0, null, 0), Q.OutputStream$(null), t1, t2);
      t2._inflate$0();
      return t2;
    },
    Inflate: function Inflate(t0, t1, t2, t3) {
      var _ = this;
      _.input = t0;
      _.output = t1;
      _._bitBufferLen = _._bitBuffer = 0;
      _._fixedLiteralLengthTable = t2;
      _._fixedDistanceTable = t3;
    },
    InternalExrPart$: function(tiled, input) {
      var t1 = type$.legacy_String;
      t1 = new S.InternalExrPart(new F.HdrImage(P.LinkedHashMap_LinkedHashMap$_empty(t1, type$.legacy_HdrSlice)), H.setRuntimeTypeInfo([], type$.JSArray_legacy_ExrChannel), P.LinkedHashMap_LinkedHashMap$_empty(t1, type$.legacy_ExrAttribute), tiled);
      t1.ExrPart$2(tiled, input);
      return t1;
    },
    ExrPart: function ExrPart() {
    },
    InternalExrPart: function InternalExrPart(t0, t1, t2, t3) {
      var _ = this;
      _.framebuffer = t0;
      _.channels = t1;
      _.attributes = t2;
      _.chromaticities = _.height = _.width = _.dataWindow = null;
      _._compressionType = 0;
      _._offsetInLineBuffer = _._linesInBuffer = _._compressor = _._bytesPerLine = _._offsets = null;
      _._tiled = t3;
      _._maxBytesPerTileLine = _._bytesPerPixel = _._numYLevels = _._numXLevels = _._numYTiles = _._numXTiles = _._tileRoundingMode = _._tileLevelMode = _._tileHeight = _._tileWidth = null;
    },
    JpegJfif: function JpegJfif() {
      this.thumbHeight = this.thumbWidth = null;
    },
    PsdImageResource: function PsdImageResource() {
    },
    PsdLayer: function PsdLayer(t0, t1, t2) {
      var _ = this;
      _.channels = _.flags = _.opacity = _.blendMode = _.height = _.width = _.right = _.bottom = _.left = _.top = null;
      _.additionalData = t0;
      _.children = t1;
      _.layerImage = null;
      _.effects = t2;
    },
    VP8L$: function(input, webp) {
      var t1 = H.setRuntimeTypeInfo([], type$.JSArray_legacy_HTreeGroup),
        t2 = H.setRuntimeTypeInfo([], type$.JSArray_legacy_VP8LTransform),
        t3 = new Uint32Array(2),
        t4 = new A.VP8LBitReader(input, t3);
      t3 = t4._buffer8 = H.NativeUint8List_NativeUint8List$view(t3.buffer, 0, null);
      C.NativeUint8List_methods.$indexSet(t3, 0, input.readByte$0());
      C.NativeUint8List_methods.$indexSet(t3, 1, input.readByte$0());
      C.NativeUint8List_methods.$indexSet(t3, 2, input.readByte$0());
      C.NativeUint8List_methods.$indexSet(t3, 3, input.readByte$0());
      C.NativeUint8List_methods.$indexSet(t3, 4, input.readByte$0());
      C.NativeUint8List_methods.$indexSet(t3, 5, input.readByte$0());
      C.NativeUint8List_methods.$indexSet(t3, 6, input.readByte$0());
      C.NativeUint8List_methods.$indexSet(t3, 7, input.readByte$0());
      return new S.VP8L(t4, webp, t1, t2);
    },
    VP8L__subSampleSize: function(size, samplingBits) {
      var t1 = C.JSInt_methods._shlPositive$1(1, samplingBits);
      if (typeof size !== "number")
        return size.$add();
      return C.JSInt_methods._shrOtherPositive$1(size + t1 - 1, samplingBits);
    },
    VP8L: function VP8L(t0, t1, t2, t3) {
      var _ = this;
      _.br = t0;
      _.webp = t1;
      _.image = null;
      _._colorCacheSize = _._lastRow = _._lastPixel = 0;
      _._colorCache = null;
      _._huffmanXsize = _._huffmanSubsampleBits = _._huffmanMask = 0;
      _._huffmanImage = null;
      _._numHtreeGroups = 0;
      _._htreeGroups = t2;
      _._transforms = t3;
      _._transformsSeen = 0;
      _._ioWidth = _._opaque = _._argbCache = _._pixels8 = _._pixels = null;
    },
    InternalVP8L: function InternalVP8L(t0, t1, t2, t3) {
      var _ = this;
      _.br = t0;
      _.webp = t1;
      _.image = null;
      _._colorCacheSize = _._lastRow = _._lastPixel = 0;
      _._colorCache = null;
      _._huffmanXsize = _._huffmanSubsampleBits = _._huffmanMask = 0;
      _._huffmanImage = null;
      _._numHtreeGroups = 0;
      _._htreeGroups = t2;
      _._transforms = t3;
      _._transformsSeen = 0;
      _._ioWidth = _._opaque = _._argbCache = _._pixels8 = _._pixels = null;
    },
    WebPAlpha: function WebPAlpha(t0, t1, t2) {
      var _ = this;
      _.input = t0;
      _.width = t1;
      _.height = t2;
      _.preProcessing = _.filter = _.method = 0;
      _.rsrv = 1;
      _.isAlphaDecoded = false;
      _._vp8l = null;
      _._use8bDecode = false;
    }
  },
  Z = {ZLibDecoderBase: function ZLibDecoderBase() {
    }, ZLibDecoder: function ZLibDecoder() {
    }, JpegDecoder: function JpegDecoder() {
    }, JpegEncoder: function JpegEncoder(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11) {
      var _ = this;
      _.YTable = t0;
      _.UVTable = t1;
      _.fdtbl_Y = t2;
      _.fdtbl_UV = t3;
      _.UVAC_HT = _.YAC_HT = _.UVDC_HT = _.YDC_HT = null;
      _.bitcode = t4;
      _.category = t5;
      _.outputfDCTQuant = t6;
      _.DU = t7;
      _.YDU = t8;
      _.UDU = t9;
      _.VDU = t10;
      _.RGB_YUV_TABLE = t11;
      _.currentQuality = null;
      _._bytenew = 0;
      _._bytepos = 7;
    },
    InputBuffer$: function(buffer, bigEndian, $length, offset) {
      var t1;
      if ($length == null)
        t1 = J.get$length$asx(buffer);
      else {
        if (typeof offset !== "number")
          return offset.$add();
        t1 = offset + $length;
      }
      return new Z.InputBuffer(buffer, offset, t1, offset, bigEndian);
    },
    InputBuffer$from: function(other, $length, offset) {
      var t3, t4,
        t1 = other.buffer,
        t2 = other.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      t2 += offset;
      t3 = other.start;
      t4 = $length == null ? other.end : t2 + $length;
      return new Z.InputBuffer(t1, t3, t4, t2, other.bigEndian);
    },
    InputBuffer: function InputBuffer(t0, t1, t2, t3, t4) {
      var _ = this;
      _.buffer = t0;
      _.start = t1;
      _.end = t2;
      _.offset = t3;
      _.bigEndian = t4;
    },
    uint64ToFloat64: function(d) {
      $.$get$__uint64().$indexSet(0, 0, d);
      return $.$get$__uint64ToFloat64().$index(0, 0);
    },
    debugBits32: function(value) {
      var i, t1;
      if (value == null)
        return "null";
      for (i = 32, t1 = ""; i > -1; --i)
        t1 += (value & C.JSInt_methods.$shl(1, i)) >>> 0 === 0 ? "0" : "1";
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  },
  L = {
    BitmapFileHeader_isValidFile: function(b) {
      var t1 = b.end,
        t2 = b.offset;
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (t1 - t2 < 2)
        return false;
      return Z.InputBuffer$from(b, null, 0).readUint16$0() === 19778;
    },
    BmpInfo$: function(p, fileHeader) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, compression, t10;
      if (fileHeader == null) {
        t1 = new L.BitmapFileHeader();
        t1.BitmapFileHeader$1(p);
      } else
        t1 = fileHeader;
      t2 = p.readUint32$0();
      t3 = p.readUint32$0();
      t4 = $.$get$__uint32();
      t4[0] = t3;
      t3 = $.$get$__uint32ToInt32();
      if (0 >= t3.length)
        return H.ioore(t3, 0);
      t5 = t3[0];
      t4[0] = p.readUint32$0();
      t6 = t3[0];
      t7 = p.readUint16$0();
      t8 = p.readUint16$0();
      t9 = p.readUint32$0();
      compression = P.LinkedHashMap_LinkedHashMap$_literal([0, C.BitmapCompression_1, 3, C.BitmapCompression_0], type$.legacy_int, type$.legacy_BitmapCompression).$index(0, t9);
      if (compression == null)
        H.throwExpression(K.ImageException$("Bitmap compression " + t9 + " is not supported yet."));
      t9 = p.readUint32$0();
      t4[0] = p.readUint32$0();
      t10 = t3[0];
      t4[0] = p.readUint32$0();
      t3 = new L.BmpInfo(t1, t6, t5, t2, t7, t8, compression, t9, t10, t3[0], p.readUint32$0(), p.readUint32$0());
      t3.BmpInfo$2$fileHeader(p, fileHeader);
      return t3;
    },
    BitmapCompression: function BitmapCompression(t0) {
      this._bmp_info$_name = t0;
    },
    BitmapFileHeader: function BitmapFileHeader() {
      this.offset = this.fileLength = null;
    },
    BmpInfo: function BmpInfo(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11) {
      var _ = this;
      _.file = t0;
      _._height = t1;
      _.BmpInfo_width = t2;
      _.headerSize = t3;
      _.planes = t4;
      _.bpp = t5;
      _.compression = t6;
      _.imageSize = t7;
      _.xppm = t8;
      _.yppm = t9;
      _.totalColors = t10;
      _.importantColors = t11;
      _.colorPalette = _.v5alphaMask = _.v5blueMask = _.v5greenMask = _.v5redMask = null;
      _.height = _.width = 0;
    },
    BmpInfo_readPalette_closure: function BmpInfo_readPalette_closure(t0, t1, t2) {
      this.$this = t0;
      this.p = t1;
      this.colorBytes = t2;
    },
    JpegFrame: function JpegFrame(t0, t1) {
      var _ = this;
      _.samplesPerLine = _.scanLines = _.precision = _.progressive = null;
      _.maxVSamples = _.maxHSamples = 0;
      _.mcusPerColumn = _.mcusPerLine = null;
      _.components = t0;
      _.componentsOrder = t1;
    },
    PsdInnerShadowEffect: function PsdInnerShadowEffect() {
      this.version = null;
    },
    PsdImage$: function(bytes) {
      var t1 = new L.PsdImage(P.LinkedHashMap_LinkedHashMap$_empty(type$.legacy_int, type$.legacy_PsdImageResource));
      t1.PsdImage$1(bytes);
      return t1;
    },
    PsdImage__blendOverlay: function(a, b, aAlpha, bAlpha) {
      var x = a / 255,
        y = b / 255,
        aa = aAlpha / 255,
        ba = bAlpha / 255,
        t1 = y * (1 - aa),
        t2 = x * (1 - ba);
      return C.JSNumber_methods.toInt$0(C.JSNumber_methods.clamp$2((2 * x < aa ? 2 * y * x + t1 + t2 : ba * aa - 2 * (aa - x) * (ba - y) + t1 + t2) * 255, 0, 255));
    },
    PsdImage__blendColorBurn: function(a, b) {
      if (b === 0)
        return 0;
      return C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(C.JSNumber_methods.toInt$0(255 * (1 - (1 - a / 255) / (b / 255))), 0, 255));
    },
    PsdImage__blendLinearBurn: function(a, b) {
      return C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(a + b - 255, 0, 255));
    },
    PsdImage__blendColorDodge: function(a, b) {
      if (b === 255)
        return 255;
      return C.JSNumber_methods.toInt$0(C.JSDouble_methods.clamp$2(a / 255 / (1 - b / 255) * 255, 0, 255));
    },
    PsdImage__blendLinearDodge: function(a, b) {
      return b + a > 255 ? 255 : a + b;
    },
    PsdImage__blendSoftLight: function(a, b) {
      var aa = a / 255,
        bb = b / 255,
        t1 = 1 - bb;
      return C.JSNumber_methods.round$0(255 * (t1 * bb * aa + bb * (1 - t1 * (1 - aa))));
    },
    PsdImage__blendHardLight: function(bottom, $top) {
      var a = $top / 255,
        b = bottom / 255;
      if (b < 0.5)
        return C.JSNumber_methods.round$0(510 * a * b);
      else
        return C.JSNumber_methods.round$0(255 * (1 - 2 * (1 - a) * (1 - b)));
    },
    PsdImage__blendVividLight: function(bottom, $top) {
      if ($top < 128)
        return L.PsdImage__blendColorBurn(bottom, 2 * $top);
      else
        return L.PsdImage__blendColorDodge(bottom, 2 * ($top - 128));
    },
    PsdImage__blendLinearLight: function(bottom, $top) {
      if ($top < 128)
        return L.PsdImage__blendLinearBurn(bottom, 2 * $top);
      else
        return L.PsdImage__blendLinearDodge(bottom, 2 * ($top - 128));
    },
    PsdImage_createImageFromChannels: function(colorMode, bitDepth, width, height, channelList) {
      var t1, _i, t2, ch, ns, channel0, channel1, channel2, channel_1, t3, t4, t5, t6, y, di, si, x, di0, t7, t8, t9, t10, di1, di2, r, g, b, a, t11, t12, alpha, t13, y0, x0, z, y3, x3, z3, $R, $G, $B, rgb, gray, c, m, k,
        output = U.Image$(width, height, C.Channels_1, null, null),
        pixels = output.getBytes$0(),
        channels = P.LinkedHashMap_LinkedHashMap$_empty(type$.legacy_int, type$.legacy_PsdChannel);
      for (t1 = channelList.length, _i = 0; t2 = channelList.length, _i < t2; channelList.length === t1 || (0, H.throwConcurrentModificationError)(channelList), ++_i) {
        ch = channelList[_i];
        channels.$indexSet(0, ch.id, ch);
      }
      if (bitDepth === 8)
        ns = 1;
      else
        ns = bitDepth === 16 ? 2 : -1;
      if (ns === -1)
        throw H.wrapException(K.ImageException$("PSD: unsupported bit depth: " + H.S(bitDepth)));
      channel0 = channels.$index(0, 0);
      channel1 = channels.$index(0, 1);
      channel2 = channels.$index(0, 2);
      channel_1 = channels.$index(0, -1);
      if (typeof height !== "number")
        return H.iae(height);
      t1 = pixels.length;
      t3 = t2 >= 5;
      t4 = ns === 1;
      t5 = t2 === 4;
      t6 = t2 >= 2;
      t2 = t2 >= 4;
      y = 0;
      di = 0;
      si = 0;
      for (; y < height; ++y) {
        if (typeof width !== "number")
          return H.iae(width);
        x = 0;
        for (; x < width; ++x, si += ns)
          switch (colorMode) {
            case 3:
              di0 = di + 1;
              t7 = channel0.data;
              if (t4) {
                if (si < 0 || si >= t7.length)
                  return H.ioore(t7, si);
                t7 = t7[si];
              } else {
                t8 = t7.length;
                if (si < 0 || si >= t8)
                  return H.ioore(t7, si);
                t9 = t7[si];
                t10 = si + 1;
                if (t10 >= t8)
                  return H.ioore(t7, t10);
                t10 = (t9 << 8 | t7[t10]) >>> 8;
                t7 = t10;
              }
              if (di < 0 || di >= t1)
                return H.ioore(pixels, di);
              pixels[di] = t7;
              di1 = di0 + 1;
              t7 = channel1.data;
              if (t4) {
                if (si < 0 || si >= t7.length)
                  return H.ioore(t7, si);
                t7 = t7[si];
              } else {
                t8 = t7.length;
                if (si < 0 || si >= t8)
                  return H.ioore(t7, si);
                t9 = t7[si];
                t10 = si + 1;
                if (t10 >= t8)
                  return H.ioore(t7, t10);
                t10 = (t9 << 8 | t7[t10]) >>> 8;
                t7 = t10;
              }
              if (di0 < 0 || di0 >= t1)
                return H.ioore(pixels, di0);
              pixels[di0] = t7;
              di2 = di1 + 1;
              t7 = channel2.data;
              if (t4) {
                if (si < 0 || si >= t7.length)
                  return H.ioore(t7, si);
                t7 = t7[si];
              } else {
                t8 = t7.length;
                if (si < 0 || si >= t8)
                  return H.ioore(t7, si);
                t9 = t7[si];
                t10 = si + 1;
                if (t10 >= t8)
                  return H.ioore(t7, t10);
                t10 = (t9 << 8 | t7[t10]) >>> 8;
                t7 = t10;
              }
              if (di1 < 0 || di1 >= t1)
                return H.ioore(pixels, di1);
              pixels[di1] = t7;
              di1 = di2 + 1;
              if (t2) {
                t7 = channel_1.data;
                if (t4) {
                  if (si < 0 || si >= t7.length)
                    return H.ioore(t7, si);
                  t7 = t7[si];
                } else {
                  t8 = t7.length;
                  if (si < 0 || si >= t8)
                    return H.ioore(t7, si);
                  t9 = t7[si];
                  t10 = si + 1;
                  if (t10 >= t8)
                    return H.ioore(t7, t10);
                  t10 = (t9 << 8 | t7[t10]) >>> 8;
                  t7 = t10;
                }
              } else
                t7 = 255;
              if (di2 < 0 || di2 >= t1)
                return H.ioore(pixels, di2);
              pixels[di2] = t7;
              r = pixels[di];
              g = pixels[di0];
              t7 = di + 2;
              if (t7 >= t1)
                return H.ioore(pixels, t7);
              b = pixels[t7];
              t8 = di + 3;
              if (t8 >= t1)
                return H.ioore(pixels, t8);
              a = pixels[t8];
              if (a !== 0) {
                pixels[di] = C.JSInt_methods.$tdiv((r + a - 255) * 255, a);
                pixels[di0] = C.JSInt_methods.$tdiv((g + a - 255) * 255, a);
                pixels[t7] = C.JSInt_methods.$tdiv((b + a - 255) * 255, a);
              }
              di = di1;
              break;
            case 9:
              t7 = channel0.data;
              if (t4) {
                if (si < 0 || si >= t7.length)
                  return H.ioore(t7, si);
                t7 = t7[si];
              } else {
                t8 = t7.length;
                if (si < 0 || si >= t8)
                  return H.ioore(t7, si);
                t9 = t7[si];
                t10 = si + 1;
                if (t10 >= t8)
                  return H.ioore(t7, t10);
                t10 = (t9 << 8 | t7[t10]) >>> 8;
                t7 = t10;
              }
              t8 = channel1.data;
              if (t4) {
                if (si < 0 || si >= t8.length)
                  return H.ioore(t8, si);
                t8 = t8[si];
              } else {
                t9 = t8.length;
                if (si < 0 || si >= t9)
                  return H.ioore(t8, si);
                t10 = t8[si];
                t11 = si + 1;
                if (t11 >= t9)
                  return H.ioore(t8, t11);
                t11 = (t10 << 8 | t8[t11]) >>> 8;
                t8 = t11;
              }
              t9 = channel2.data;
              if (t4) {
                if (si < 0 || si >= t9.length)
                  return H.ioore(t9, si);
                t9 = t9[si];
              } else {
                t10 = t9.length;
                if (si < 0 || si >= t10)
                  return H.ioore(t9, si);
                t11 = t9[si];
                t12 = si + 1;
                if (t12 >= t10)
                  return H.ioore(t9, t12);
                t12 = (t11 << 8 | t9[t12]) >>> 8;
                t9 = t12;
              }
              if (t2) {
                t10 = channel_1.data;
                if (t4) {
                  if (si < 0 || si >= t10.length)
                    return H.ioore(t10, si);
                  t10 = t10[si];
                  alpha = t10;
                } else {
                  t11 = t10.length;
                  if (si < 0 || si >= t11)
                    return H.ioore(t10, si);
                  t12 = t10[si];
                  t13 = si + 1;
                  if (t13 >= t11)
                    return H.ioore(t10, t13);
                  t13 = (t12 << 8 | t10[t13]) >>> 8;
                  alpha = t13;
                }
              } else
                alpha = 255;
              y0 = ((t7 * 100 >>> 8) + 16) / 116;
              x0 = (t8 - 128) / 500 + y0;
              z = y0 - (t9 - 128) / 200;
              y3 = Math.pow(y0, 3);
              y0 = y3 > 0.008856 ? y3 : (y0 - 0.13793103448275862) / 7.787;
              x3 = Math.pow(x0, 3);
              x0 = x3 > 0.008856 ? x3 : (x0 - 0.13793103448275862) / 7.787;
              z3 = Math.pow(z, 3);
              z = z3 > 0.008856 ? z3 : (z - 0.13793103448275862) / 7.787;
              x0 = x0 * 95.047 / 100;
              y0 = y0 * 100 / 100;
              z = z * 108.883 / 100;
              $R = x0 * 3.2406 + y0 * -1.5372 + z * -0.4986;
              $G = x0 * -0.9689 + y0 * 1.8758 + z * 0.0415;
              $B = x0 * 0.0557 + y0 * -0.204 + z * 1.057;
              $R = $R > 0.0031308 ? 1.055 * Math.pow($R, 0.4166666666666667) - 0.055 : 12.92 * $R;
              $G = $G > 0.0031308 ? 1.055 * Math.pow($G, 0.4166666666666667) - 0.055 : 12.92 * $G;
              $B = $B > 0.0031308 ? 1.055 * Math.pow($B, 0.4166666666666667) - 0.055 : 12.92 * $B;
              rgb = [C.JSNumber_methods.toInt$0(C.JSDouble_methods.clamp$2($R * 255, 0, 255)), C.JSNumber_methods.toInt$0(C.JSDouble_methods.clamp$2($G * 255, 0, 255)), C.JSNumber_methods.toInt$0(C.JSDouble_methods.clamp$2($B * 255, 0, 255))];
              di0 = di + 1;
              t7 = rgb[0];
              if (di < 0 || di >= t1)
                return H.ioore(pixels, di);
              pixels[di] = t7;
              di = di0 + 1;
              t7 = rgb[1];
              if (di0 < 0 || di0 >= t1)
                return H.ioore(pixels, di0);
              pixels[di0] = t7;
              di0 = di + 1;
              t7 = rgb[2];
              if (di < 0 || di >= t1)
                return H.ioore(pixels, di);
              pixels[di] = t7;
              di = di0 + 1;
              if (di0 < 0 || di0 >= t1)
                return H.ioore(pixels, di0);
              pixels[di0] = alpha;
              break;
            case 1:
              t7 = channel0.data;
              if (t4) {
                if (si < 0 || si >= t7.length)
                  return H.ioore(t7, si);
                gray = t7[si];
              } else {
                t8 = t7.length;
                if (si < 0 || si >= t8)
                  return H.ioore(t7, si);
                t9 = t7[si];
                t10 = si + 1;
                if (t10 >= t8)
                  return H.ioore(t7, t10);
                gray = (t9 << 8 | t7[t10]) >>> 8;
              }
              if (t6) {
                t7 = channel_1.data;
                if (t4) {
                  if (si < 0 || si >= t7.length)
                    return H.ioore(t7, si);
                  t7 = t7[si];
                  alpha = t7;
                } else {
                  t8 = t7.length;
                  if (si < 0 || si >= t8)
                    return H.ioore(t7, si);
                  t9 = t7[si];
                  t10 = si + 1;
                  if (t10 >= t8)
                    return H.ioore(t7, t10);
                  t10 = (t9 << 8 | t7[t10]) >>> 8;
                  alpha = t10;
                }
              } else
                alpha = 255;
              di0 = di + 1;
              if (di < 0 || di >= t1)
                return H.ioore(pixels, di);
              pixels[di] = gray;
              di = di0 + 1;
              if (di0 < 0 || di0 >= t1)
                return H.ioore(pixels, di0);
              pixels[di0] = gray;
              di0 = di + 1;
              if (di < 0 || di >= t1)
                return H.ioore(pixels, di);
              pixels[di] = gray;
              di = di0 + 1;
              if (di0 < 0 || di0 >= t1)
                return H.ioore(pixels, di0);
              pixels[di0] = alpha;
              break;
            case 4:
              t7 = channel0.data;
              if (t4) {
                if (si < 0 || si >= t7.length)
                  return H.ioore(t7, si);
                c = t7[si];
              } else {
                t8 = t7.length;
                if (si < 0 || si >= t8)
                  return H.ioore(t7, si);
                t9 = t7[si];
                t10 = si + 1;
                if (t10 >= t8)
                  return H.ioore(t7, t10);
                c = (t9 << 8 | t7[t10]) >>> 8;
              }
              t7 = channel1.data;
              if (t4) {
                if (si < 0 || si >= t7.length)
                  return H.ioore(t7, si);
                m = t7[si];
              } else {
                t8 = t7.length;
                if (si < 0 || si >= t8)
                  return H.ioore(t7, si);
                t9 = t7[si];
                t10 = si + 1;
                if (t10 >= t8)
                  return H.ioore(t7, t10);
                m = (t9 << 8 | t7[t10]) >>> 8;
              }
              t7 = channel2.data;
              if (t4) {
                if (si < 0 || si >= t7.length)
                  return H.ioore(t7, si);
                y0 = t7[si];
              } else {
                t8 = t7.length;
                if (si < 0 || si >= t8)
                  return H.ioore(t7, si);
                t9 = t7[si];
                t10 = si + 1;
                if (t10 >= t8)
                  return H.ioore(t7, t10);
                y0 = (t9 << 8 | t7[t10]) >>> 8;
              }
              t7 = channels.$index(0, t5 ? -1 : 3).data;
              if (t4) {
                if (si < 0 || si >= t7.length)
                  return H.ioore(t7, si);
                k = t7[si];
              } else {
                t8 = t7.length;
                if (si < 0 || si >= t8)
                  return H.ioore(t7, si);
                t9 = t7[si];
                t10 = si + 1;
                if (t10 >= t8)
                  return H.ioore(t7, t10);
                k = (t9 << 8 | t7[t10]) >>> 8;
              }
              if (t3) {
                t7 = channel_1.data;
                if (t4) {
                  if (si < 0 || si >= t7.length)
                    return H.ioore(t7, si);
                  t7 = t7[si];
                  alpha = t7;
                } else {
                  t8 = t7.length;
                  if (si < 0 || si >= t8)
                    return H.ioore(t7, si);
                  t9 = t7[si];
                  t10 = si + 1;
                  if (t10 >= t8)
                    return H.ioore(t7, t10);
                  t10 = (t9 << 8 | t7[t10]) >>> 8;
                  alpha = t10;
                }
              } else
                alpha = 255;
              t7 = 1 - (255 - k) / 255;
              rgb = [C.JSNumber_methods.round$0(255 * (1 - (255 - c) / 255) * t7), C.JSNumber_methods.round$0(255 * (1 - (255 - m) / 255) * t7), C.JSNumber_methods.round$0(255 * (1 - (255 - y0) / 255) * t7)];
              di0 = di + 1;
              t7 = rgb[0];
              if (di < 0 || di >= t1)
                return H.ioore(pixels, di);
              pixels[di] = t7;
              di = di0 + 1;
              t7 = rgb[1];
              if (di0 < 0 || di0 >= t1)
                return H.ioore(pixels, di0);
              pixels[di0] = t7;
              di0 = di + 1;
              t7 = rgb[2];
              if (di < 0 || di >= t1)
                return H.ioore(pixels, di);
              pixels[di] = t7;
              di = di0 + 1;
              if (di0 < 0 || di0 >= t1)
                return H.ioore(pixels, di0);
              pixels[di0] = alpha;
              break;
            default:
              throw H.wrapException(K.ImageException$("Unhandled color mode: " + H.S(colorMode)));
          }
      }
      return output;
    },
    PsdImage: function PsdImage(t0) {
      var _ = this;
      _.mergedImage = _.mergeImageChannels = _.layers = _.colorMode = _.depth = _.channels = _.version = _.signature = null;
      _.imageResources = t0;
      _._imageData = _._layerAndMaskData = _._imageResourceData = _._psd_image$_input = null;
      _.height = _.width = 0;
    },
    VP8FrameHeader: function VP8FrameHeader() {
      this.partitionLength = null;
    },
    VP8PictureHeader: function VP8PictureHeader() {
    },
    VP8SegmentHeader: function VP8SegmentHeader(t0, t1) {
      var _ = this;
      _.updateMap = _.useSegment = false;
      _.absoluteDelta = true;
      _.quantizer = t0;
      _.filterStrength = t1;
    },
    VP8BandProbas: function VP8BandProbas(t0) {
      this.probas = t0;
    },
    VP8Proba: function VP8Proba(t0, t1) {
      this.segments = t0;
      this.bands = t1;
    },
    VP8FilterHeader: function VP8FilterHeader(t0, t1) {
      var _ = this;
      _.useLfDelta = _.sharpness = _.level = _.simple = null;
      _.refLfDelta = t0;
      _.modeLfDelta = t1;
    },
    VP8FInfo: function VP8FInfo() {
      var _ = this;
      _.fInnerLevel = _.fLimit = 0;
      _.fInner = false;
      _.hevThresh = 0;
    },
    VP8MB: function VP8MB() {
      this.nzDc = this.nz = 0;
    },
    VP8QuantMatrix: function VP8QuantMatrix(t0, t1, t2) {
      this.y1Mat = t0;
      this.y2Mat = t1;
      this.uvMat = t2;
    },
    VP8MBData: function VP8MBData(t0, t1) {
      var _ = this;
      _.coeffs = t0;
      _.isIntra4x4 = null;
      _.imodes = t1;
      _.nonZeroUV = _.nonZeroY = _.uvmode = null;
    },
    VP8TopSamples: function VP8TopSamples(t0, t1, t2) {
      this.y = t0;
      this.u = t1;
      this.v = t2;
    },
    quantizeAndInverse: function(quantizationTable, coefBlock, dataOut, dataIn) {
      var t1, i, t2, row, t3, t, v0, t4, v1, v2, t5, v3, t6, t7, t8, v4, v7, v5, v6, t9, t10, t11, t12;
      if ($._dctClip == null) {
        t1 = $._dctClip = new Uint8Array(768);
        for (i = -256; i < 0; ++i)
          t1[256 + i] = 0;
        for (i = 0; i < 256; ++i)
          t1[256 + i] = i;
        for (i = 256; i < 512; ++i)
          t1[256 + i] = 255;
      }
      for (i = 0; i < 64; ++i) {
        t1 = coefBlock[i];
        t2 = quantizationTable[i];
        if (i >= 64)
          return H.ioore(dataIn, i);
        dataIn[i] = t1 * t2;
      }
      for (row = 0, i = 0; i < 8; ++i, row += 8) {
        t1 = 1 + row;
        if (t1 >= 64)
          return H.ioore(dataIn, t1);
        t2 = dataIn[t1];
        if (t2 === 0) {
          t3 = 2 + row;
          if (t3 >= 64)
            return H.ioore(dataIn, t3);
          if (dataIn[t3] === 0) {
            t3 = 3 + row;
            if (t3 >= 64)
              return H.ioore(dataIn, t3);
            if (dataIn[t3] === 0) {
              t3 = 4 + row;
              if (t3 >= 64)
                return H.ioore(dataIn, t3);
              if (dataIn[t3] === 0) {
                t3 = 5 + row;
                if (t3 >= 64)
                  return H.ioore(dataIn, t3);
                if (dataIn[t3] === 0) {
                  t3 = 6 + row;
                  if (t3 >= 64)
                    return H.ioore(dataIn, t3);
                  if (dataIn[t3] === 0) {
                    t3 = 7 + row;
                    if (t3 >= 64)
                      return H.ioore(dataIn, t3);
                    t3 = dataIn[t3] === 0;
                  } else
                    t3 = false;
                } else
                  t3 = false;
              } else
                t3 = false;
            } else
              t3 = false;
          } else
            t3 = false;
        } else
          t3 = false;
        if (t3) {
          if (row >= 64)
            return H.ioore(dataIn, row);
          t1 = C.JSInt_methods._shrOtherPositive$1(5793 * dataIn[row] + 512, 10);
          t = (t1 & 2147483647) - ((t1 & 2147483648) >>> 0);
          if (row >= 64)
            return H.ioore(dataIn, row);
          dataIn[row] = t;
          t1 = row + 1;
          if (t1 >= 64)
            return H.ioore(dataIn, t1);
          dataIn[t1] = t;
          t1 = row + 2;
          if (t1 >= 64)
            return H.ioore(dataIn, t1);
          dataIn[t1] = t;
          t1 = row + 3;
          if (t1 >= 64)
            return H.ioore(dataIn, t1);
          dataIn[t1] = t;
          t1 = row + 4;
          if (t1 >= 64)
            return H.ioore(dataIn, t1);
          dataIn[t1] = t;
          t1 = row + 5;
          if (t1 >= 64)
            return H.ioore(dataIn, t1);
          dataIn[t1] = t;
          t1 = row + 6;
          if (t1 >= 64)
            return H.ioore(dataIn, t1);
          dataIn[t1] = t;
          t1 = row + 7;
          if (t1 >= 64)
            return H.ioore(dataIn, t1);
          dataIn[t1] = t;
          continue;
        }
        if (row >= 64)
          return H.ioore(dataIn, row);
        t3 = C.JSInt_methods._shrOtherPositive$1(5793 * dataIn[row] + 128, 8);
        v0 = (t3 & 2147483647) - ((t3 & 2147483648) >>> 0);
        t3 = 4 + row;
        if (t3 >= 64)
          return H.ioore(dataIn, t3);
        t4 = C.JSInt_methods._shrOtherPositive$1(5793 * dataIn[t3] + 128, 8);
        v1 = (t4 & 2147483647) - ((t4 & 2147483648) >>> 0);
        t4 = 2 + row;
        if (t4 >= 64)
          return H.ioore(dataIn, t4);
        v2 = dataIn[t4];
        t5 = 6 + row;
        if (t5 >= 64)
          return H.ioore(dataIn, t5);
        v3 = dataIn[t5];
        t6 = 7 + row;
        if (t6 >= 64)
          return H.ioore(dataIn, t6);
        t7 = dataIn[t6];
        t8 = C.JSInt_methods._shrOtherPositive$1(2896 * (t2 - t7) + 128, 8);
        v4 = (t8 & 2147483647) - ((t8 & 2147483648) >>> 0);
        t7 = C.JSInt_methods._shrOtherPositive$1(2896 * (t2 + t7) + 128, 8);
        v7 = (t7 & 2147483647) - ((t7 & 2147483648) >>> 0);
        t7 = 3 + row;
        if (t7 >= 64)
          return H.ioore(dataIn, t7);
        t2 = dataIn[t7] << 4;
        v5 = (t2 & 2147483647) - ((t2 & 2147483648) >>> 0);
        t2 = 5 + row;
        if (t2 >= 64)
          return H.ioore(dataIn, t2);
        t8 = dataIn[t2] << 4;
        v6 = (t8 & 2147483647) - ((t8 & 2147483648) >>> 0);
        t8 = C.JSInt_methods._shrOtherPositive$1(v0 - v1 + 1, 1);
        t = (t8 & 2147483647) - ((t8 & 2147483648) >>> 0);
        t8 = C.JSInt_methods._shrOtherPositive$1(v0 + v1 + 1, 1);
        v0 = (t8 & 2147483647) - ((t8 & 2147483648) >>> 0);
        t8 = C.JSInt_methods._shrOtherPositive$1(v2 * 3784 + v3 * 1567 + 128, 8);
        t8 = (t8 & 2147483647) - ((t8 & 2147483648) >>> 0);
        t9 = C.JSInt_methods._shrOtherPositive$1(v2 * 1567 - v3 * 3784 + 128, 8);
        v2 = (t9 & 2147483647) - ((t9 & 2147483648) >>> 0);
        t9 = C.JSInt_methods._shrOtherPositive$1(v4 - v6 + 1, 1);
        t9 = (t9 & 2147483647) - ((t9 & 2147483648) >>> 0);
        t10 = C.JSInt_methods._shrOtherPositive$1(v4 + v6 + 1, 1);
        v4 = (t10 & 2147483647) - ((t10 & 2147483648) >>> 0);
        t10 = C.JSInt_methods._shrOtherPositive$1(v7 + v5 + 1, 1);
        t10 = (t10 & 2147483647) - ((t10 & 2147483648) >>> 0);
        t11 = C.JSInt_methods._shrOtherPositive$1(v7 - v5 + 1, 1);
        v5 = (t11 & 2147483647) - ((t11 & 2147483648) >>> 0);
        t11 = C.JSInt_methods._shrOtherPositive$1(v0 - t8 + 1, 1);
        t11 = (t11 & 2147483647) - ((t11 & 2147483648) >>> 0);
        t8 = C.JSInt_methods._shrOtherPositive$1(v0 + t8 + 1, 1);
        v0 = (t8 & 2147483647) - ((t8 & 2147483648) >>> 0);
        t8 = C.JSInt_methods._shrOtherPositive$1(t - v2 + 1, 1);
        t8 = (t8 & 2147483647) - ((t8 & 2147483648) >>> 0);
        t12 = C.JSInt_methods._shrOtherPositive$1(t + v2 + 1, 1);
        v1 = (t12 & 2147483647) - ((t12 & 2147483648) >>> 0);
        t12 = C.JSInt_methods._shrOtherPositive$1(v4 * 2276 + t10 * 3406 + 2048, 12);
        t = (t12 & 2147483647) - ((t12 & 2147483648) >>> 0);
        t10 = C.JSInt_methods._shrOtherPositive$1(v4 * 3406 - t10 * 2276 + 2048, 12);
        v4 = (t10 & 2147483647) - ((t10 & 2147483648) >>> 0);
        t10 = C.JSInt_methods._shrOtherPositive$1(v5 * 799 + t9 * 4017 + 2048, 12);
        t10 = (t10 & 2147483647) - ((t10 & 2147483648) >>> 0);
        t9 = C.JSInt_methods._shrOtherPositive$1(v5 * 4017 - t9 * 799 + 2048, 12);
        v5 = (t9 & 2147483647) - ((t9 & 2147483648) >>> 0);
        if (row >= 64)
          return H.ioore(dataIn, row);
        dataIn[row] = v0 + t;
        if (t6 >= 64)
          return H.ioore(dataIn, t6);
        dataIn[t6] = v0 - t;
        if (t1 >= 64)
          return H.ioore(dataIn, t1);
        dataIn[t1] = v1 + t10;
        if (t5 >= 64)
          return H.ioore(dataIn, t5);
        dataIn[t5] = v1 - t10;
        if (t4 >= 64)
          return H.ioore(dataIn, t4);
        dataIn[t4] = t8 + v5;
        if (t2 >= 64)
          return H.ioore(dataIn, t2);
        dataIn[t2] = t8 - v5;
        if (t7 >= 64)
          return H.ioore(dataIn, t7);
        dataIn[t7] = t11 + v4;
        if (t3 >= 64)
          return H.ioore(dataIn, t3);
        dataIn[t3] = t11 - v4;
      }
      for (i = 0; i < 8; ++i) {
        t1 = 8 + i;
        t2 = dataIn[t1];
        if (t2 === 0 && dataIn[16 + i] === 0 && dataIn[24 + i] === 0 && dataIn[32 + i] === 0 && dataIn[40 + i] === 0 && dataIn[48 + i] === 0 && dataIn[56 + i] === 0) {
          t2 = C.JSInt_methods._shrOtherPositive$1(5793 * dataIn[i] + 8192, 14);
          t = (t2 & 2147483647) - ((t2 & 2147483648) >>> 0);
          if (i >= 64)
            return H.ioore(dataIn, i);
          dataIn[i] = t;
          if (t1 >= 64)
            return H.ioore(dataIn, t1);
          dataIn[t1] = t;
          t1 = 16 + i;
          if (t1 >= 64)
            return H.ioore(dataIn, t1);
          dataIn[t1] = t;
          t1 = 24 + i;
          if (t1 >= 64)
            return H.ioore(dataIn, t1);
          dataIn[t1] = t;
          t1 = 32 + i;
          if (t1 >= 64)
            return H.ioore(dataIn, t1);
          dataIn[t1] = t;
          t1 = 40 + i;
          if (t1 >= 64)
            return H.ioore(dataIn, t1);
          dataIn[t1] = t;
          t1 = 48 + i;
          if (t1 >= 64)
            return H.ioore(dataIn, t1);
          dataIn[t1] = t;
          t1 = 56 + i;
          if (t1 >= 64)
            return H.ioore(dataIn, t1);
          dataIn[t1] = t;
          continue;
        }
        t3 = C.JSInt_methods._shrOtherPositive$1(5793 * dataIn[i] + 2048, 12);
        v0 = (t3 & 2147483647) - ((t3 & 2147483648) >>> 0);
        t3 = 32 + i;
        t4 = C.JSInt_methods._shrOtherPositive$1(5793 * dataIn[t3] + 2048, 12);
        v1 = (t4 & 2147483647) - ((t4 & 2147483648) >>> 0);
        t4 = 16 + i;
        v2 = dataIn[t4];
        t5 = 48 + i;
        v3 = dataIn[t5];
        t6 = 56 + i;
        t7 = dataIn[t6];
        t8 = C.JSInt_methods._shrOtherPositive$1(2896 * (t2 - t7) + 2048, 12);
        v4 = (t8 & 2147483647) - ((t8 & 2147483648) >>> 0);
        t7 = C.JSInt_methods._shrOtherPositive$1(2896 * (t2 + t7) + 2048, 12);
        v7 = (t7 & 2147483647) - ((t7 & 2147483648) >>> 0);
        t7 = 24 + i;
        v5 = dataIn[t7];
        t2 = 40 + i;
        v6 = dataIn[t2];
        t8 = C.JSInt_methods._shrOtherPositive$1(v0 - v1 + 1, 1);
        t = (t8 & 2147483647) - ((t8 & 2147483648) >>> 0);
        t8 = C.JSInt_methods._shrOtherPositive$1(v0 + v1 + 1, 1);
        v0 = (t8 & 2147483647) - ((t8 & 2147483648) >>> 0);
        t8 = C.JSInt_methods._shrOtherPositive$1(v2 * 3784 + v3 * 1567 + 2048, 12);
        t8 = (t8 & 2147483647) - ((t8 & 2147483648) >>> 0);
        t9 = C.JSInt_methods._shrOtherPositive$1(v2 * 1567 - v3 * 3784 + 2048, 12);
        v2 = (t9 & 2147483647) - ((t9 & 2147483648) >>> 0);
        t9 = C.JSInt_methods._shrOtherPositive$1(v4 - v6 + 1, 1);
        t9 = (t9 & 2147483647) - ((t9 & 2147483648) >>> 0);
        t10 = C.JSInt_methods._shrOtherPositive$1(v4 + v6 + 1, 1);
        v4 = (t10 & 2147483647) - ((t10 & 2147483648) >>> 0);
        t10 = C.JSInt_methods._shrOtherPositive$1(v7 + v5 + 1, 1);
        t10 = (t10 & 2147483647) - ((t10 & 2147483648) >>> 0);
        t11 = C.JSInt_methods._shrOtherPositive$1(v7 - v5 + 1, 1);
        v5 = (t11 & 2147483647) - ((t11 & 2147483648) >>> 0);
        t11 = C.JSInt_methods._shrOtherPositive$1(v0 - t8 + 1, 1);
        t11 = (t11 & 2147483647) - ((t11 & 2147483648) >>> 0);
        t8 = C.JSInt_methods._shrOtherPositive$1(v0 + t8 + 1, 1);
        v0 = (t8 & 2147483647) - ((t8 & 2147483648) >>> 0);
        t8 = C.JSInt_methods._shrOtherPositive$1(t - v2 + 1, 1);
        t8 = (t8 & 2147483647) - ((t8 & 2147483648) >>> 0);
        t12 = C.JSInt_methods._shrOtherPositive$1(t + v2 + 1, 1);
        v1 = (t12 & 2147483647) - ((t12 & 2147483648) >>> 0);
        t12 = C.JSInt_methods._shrOtherPositive$1(v4 * 2276 + t10 * 3406 + 2048, 12);
        t = (t12 & 2147483647) - ((t12 & 2147483648) >>> 0);
        t10 = C.JSInt_methods._shrOtherPositive$1(v4 * 3406 - t10 * 2276 + 2048, 12);
        v4 = (t10 & 2147483647) - ((t10 & 2147483648) >>> 0);
        t10 = C.JSInt_methods._shrOtherPositive$1(v5 * 799 + t9 * 4017 + 2048, 12);
        t10 = (t10 & 2147483647) - ((t10 & 2147483648) >>> 0);
        t9 = C.JSInt_methods._shrOtherPositive$1(v5 * 4017 - t9 * 799 + 2048, 12);
        v5 = (t9 & 2147483647) - ((t9 & 2147483648) >>> 0);
        if (i >= 64)
          return H.ioore(dataIn, i);
        dataIn[i] = v0 + t;
        if (t6 >= 64)
          return H.ioore(dataIn, t6);
        dataIn[t6] = v0 - t;
        dataIn[t1] = v1 + t10;
        dataIn[t5] = v1 - t10;
        dataIn[t4] = t8 + v5;
        dataIn[t2] = t8 - v5;
        dataIn[t7] = t11 + v4;
        dataIn[t3] = t11 - v4;
      }
      for (t1 = $._dctClip, i = 0; i < 64; ++i) {
        t2 = C.JSInt_methods._shrOtherPositive$1(dataIn[i] + 8, 4);
        t2 = 384 + ((t2 & 2147483647) - ((t2 & 2147483648) >>> 0));
        t1.length;
        if (t2 < 0 || t2 >= 768)
          return H.ioore(t1, t2);
        t2 = t1[t2];
        if (i >= 64)
          return H.ioore(dataOut, i);
        dataOut[i] = t2;
      }
    },
    getImageFromJpeg: function(jpeg) {
      var t2, component1, lines, hShift1, vShift1, t3, $Y, offset, y, t4, y1, component1Line, x, x1, offset0, t5, t6, t7, component2, component3, lines1, lines2, lines3, hShift2, vShift2, hShift3, vShift3, $B, $G, $R, Cr, Cb, y2, y3, component2Line, component3Line, x2, x3, t8, t9, colorTransform, component4, lines4, hShift4, vShift4, Ye, $M, $C, $K, y4, component4Line, x4, t10, t11, _null = null,
        t1 = jpeg.frame,
        image = U.Image$(t1.samplesPerLine, t1.scanLines, C.Channels_0, _null, _null);
      image.exif = G.ExifData$from(jpeg.exif);
      t1 = jpeg.components;
      t2 = t1.length;
      switch (t2) {
        case 1:
          if (0 >= t2)
            return H.ioore(t1, 0);
          component1 = t1[0];
          lines = component1.lines;
          hShift1 = component1.hScaleShift;
          vShift1 = component1.vScaleShift;
          t1 = image.data;
          t2 = t1.length;
          t3 = lines.length;
          $Y = _null;
          offset = 0;
          y = 0;
          while (true) {
            t4 = jpeg.frame.scanLines;
            if (typeof t4 !== "number")
              return H.iae(t4);
            if (!(y < t4))
              break;
            y1 = C.JSInt_methods._shrBothPositive$1(y, vShift1);
            if (y1 >= t3)
              return H.ioore(lines, y1);
            component1Line = lines[y1];
            x = 0;
            while (true) {
              t4 = jpeg.frame.samplesPerLine;
              if (typeof t4 !== "number")
                return H.iae(t4);
              if (!(x < t4))
                break;
              x1 = C.JSInt_methods._shrBothPositive$1(x, hShift1);
              if (x1 >= component1Line.length)
                return H.ioore(component1Line, x1);
              $Y = component1Line[x1];
              offset0 = offset + 1;
              t4 = C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(255, 0, 255));
              t5 = C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2($Y, 0, 255));
              t6 = C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2($Y, 0, 255));
              t7 = C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2($Y, 0, 255));
              if (offset < 0 || offset >= t2)
                return H.ioore(t1, offset);
              t1[offset] = (t4 << 24 | t5 << 16 | t6 << 8 | t7) >>> 0;
              ++x;
              offset = offset0;
            }
            ++y;
          }
          break;
        case 3:
          if (0 >= t2)
            return H.ioore(t1, 0);
          component1 = t1[0];
          if (1 >= t2)
            return H.ioore(t1, 1);
          component2 = t1[1];
          if (2 >= t2)
            return H.ioore(t1, 2);
          component3 = t1[2];
          lines1 = component1.lines;
          lines2 = component2.lines;
          lines3 = component3.lines;
          hShift1 = component1.hScaleShift;
          vShift1 = component1.vScaleShift;
          hShift2 = component2.hScaleShift;
          vShift2 = component2.vScaleShift;
          hShift3 = component3.hScaleShift;
          vShift3 = component3.vScaleShift;
          t1 = image.data;
          t2 = t1.length;
          t3 = lines1.length;
          t4 = lines2.length;
          t5 = lines3.length;
          $B = _null;
          $G = $B;
          $R = $G;
          Cr = $R;
          Cb = Cr;
          $Y = Cb;
          offset = 0;
          y = 0;
          while (true) {
            t6 = jpeg.frame.scanLines;
            if (typeof t6 !== "number")
              return H.iae(t6);
            if (!(y < t6))
              break;
            y1 = C.JSInt_methods._shrBothPositive$1(y, vShift1);
            y2 = C.JSInt_methods._shrBothPositive$1(y, vShift2);
            y3 = C.JSInt_methods._shrBothPositive$1(y, vShift3);
            if (y1 >= t3)
              return H.ioore(lines1, y1);
            component1Line = lines1[y1];
            if (y2 >= t4)
              return H.ioore(lines2, y2);
            component2Line = lines2[y2];
            if (y3 >= t5)
              return H.ioore(lines3, y3);
            component3Line = lines3[y3];
            x = 0;
            while (true) {
              t6 = jpeg.frame.samplesPerLine;
              if (typeof t6 !== "number")
                return H.iae(t6);
              if (!(x < t6))
                break;
              x1 = C.JSInt_methods._shrBothPositive$1(x, hShift1);
              x2 = C.JSInt_methods._shrBothPositive$1(x, hShift2);
              x3 = C.JSInt_methods._shrBothPositive$1(x, hShift3);
              t6 = component1Line.length;
              if (x1 >= t6)
                return H.ioore(component1Line, x1);
              $Y = component1Line[x1] << 8 >>> 0;
              if (x2 >= component2Line.length)
                return H.ioore(component2Line, x2);
              Cb = component2Line[x2] - 128;
              if (x3 >= component3Line.length)
                return H.ioore(component3Line, x3);
              Cr = component3Line[x3] - 128;
              t6 = C.JSInt_methods._shrOtherPositive$1($Y + 359 * Cr + 128, 8);
              t6 = (t6 & 2147483647) - ((t6 & 2147483648) >>> 0);
              if (t6 < 0)
                $R = 0;
              else
                $R = t6 > 255 ? 255 : t6;
              t6 = C.JSInt_methods._shrOtherPositive$1($Y - 88 * Cb - 183 * Cr + 128, 8);
              t6 = (t6 & 2147483647) - ((t6 & 2147483648) >>> 0);
              if (t6 < 0)
                $G = 0;
              else
                $G = t6 > 255 ? 255 : t6;
              t6 = C.JSInt_methods._shrOtherPositive$1($Y + 454 * Cb + 128, 8);
              t6 = (t6 & 2147483647) - ((t6 & 2147483648) >>> 0);
              if (t6 < 0)
                $B = 0;
              else
                $B = t6 > 255 ? 255 : t6;
              offset0 = offset + 1;
              t6 = C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(255, 0, 255));
              t7 = C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2($B, 0, 255));
              t8 = C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2($G, 0, 255));
              t9 = C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2($R, 0, 255));
              if (offset < 0 || offset >= t2)
                return H.ioore(t1, offset);
              t1[offset] = (t6 << 24 | t7 << 16 | t8 << 8 | t9) >>> 0;
              offset = offset0;
              ++x;
            }
            ++y;
          }
          break;
        case 4:
          t3 = jpeg.adobe;
          if (t3 == null)
            throw H.wrapException(K.ImageException$("Unsupported color mode (4 components)"));
          colorTransform = t3.transformCode !== 0 && true;
          if (0 >= t2)
            return H.ioore(t1, 0);
          component1 = t1[0];
          if (1 >= t2)
            return H.ioore(t1, 1);
          component2 = t1[1];
          if (2 >= t2)
            return H.ioore(t1, 2);
          component3 = t1[2];
          if (3 >= t2)
            return H.ioore(t1, 3);
          component4 = t1[3];
          lines1 = component1.lines;
          lines2 = component2.lines;
          lines3 = component3.lines;
          lines4 = component4.lines;
          hShift1 = component1.hScaleShift;
          vShift1 = component1.vScaleShift;
          hShift2 = component2.hScaleShift;
          vShift2 = component2.vScaleShift;
          hShift3 = component3.hScaleShift;
          vShift3 = component3.vScaleShift;
          hShift4 = component4.hScaleShift;
          vShift4 = component4.vScaleShift;
          t1 = image.data;
          t2 = t1.length;
          t3 = !colorTransform;
          t4 = lines1.length;
          t5 = lines2.length;
          t6 = lines3.length;
          t7 = lines4.length;
          $B = _null;
          $G = $B;
          $R = $G;
          Ye = $R;
          $M = Ye;
          $C = $M;
          $K = $C;
          Cr = $K;
          Cb = Cr;
          $Y = Cb;
          offset = 0;
          y = 0;
          while (true) {
            t8 = jpeg.frame.scanLines;
            if (typeof t8 !== "number")
              return H.iae(t8);
            if (!(y < t8))
              break;
            y1 = C.JSInt_methods._shrBothPositive$1(y, vShift1);
            y2 = C.JSInt_methods._shrBothPositive$1(y, vShift2);
            y3 = C.JSInt_methods._shrBothPositive$1(y, vShift3);
            y4 = C.JSInt_methods._shrBothPositive$1(y, vShift4);
            if (y1 >= t4)
              return H.ioore(lines1, y1);
            component1Line = lines1[y1];
            if (y2 >= t5)
              return H.ioore(lines2, y2);
            component2Line = lines2[y2];
            if (y3 >= t6)
              return H.ioore(lines3, y3);
            component3Line = lines3[y3];
            if (y4 >= t7)
              return H.ioore(lines4, y4);
            component4Line = lines4[y4];
            x = 0;
            while (true) {
              t8 = jpeg.frame.samplesPerLine;
              if (typeof t8 !== "number")
                return H.iae(t8);
              if (!(x < t8))
                break;
              x1 = C.JSInt_methods._shrBothPositive$1(x, hShift1);
              x2 = C.JSInt_methods._shrBothPositive$1(x, hShift2);
              x3 = C.JSInt_methods._shrBothPositive$1(x, hShift3);
              x4 = C.JSInt_methods._shrBothPositive$1(x, hShift4);
              if (t3) {
                if (x1 >= component1Line.length)
                  return H.ioore(component1Line, x1);
                $C = component1Line[x1];
                if (x2 >= component2Line.length)
                  return H.ioore(component2Line, x2);
                $M = component2Line[x2];
                if (x3 >= component3Line.length)
                  return H.ioore(component3Line, x3);
                Ye = component3Line[x3];
                if (x4 >= component4Line.length)
                  return H.ioore(component4Line, x4);
                $K = component4Line[x4];
              } else {
                if (x1 >= component1Line.length)
                  return H.ioore(component1Line, x1);
                $Y = component1Line[x1];
                if (x2 >= component2Line.length)
                  return H.ioore(component2Line, x2);
                Cb = component2Line[x2];
                if (x3 >= component3Line.length)
                  return H.ioore(component3Line, x3);
                Cr = component3Line[x3];
                if (x4 >= component4Line.length)
                  return H.ioore(component4Line, x4);
                $K = component4Line[x4];
                t8 = Cr - 128;
                t9 = C.JSNumber_methods.toInt$0($Y + 1.402 * t8);
                if (t9 < 0)
                  t9 = 0;
                else if (t9 > 255)
                  t9 = 255;
                $C = 255 - t9;
                t9 = Cb - 128;
                t8 = C.JSNumber_methods.toInt$0($Y - 0.3441363 * t9 - 0.71413636 * t8);
                if (t8 < 0)
                  t8 = 0;
                else if (t8 > 255)
                  t8 = 255;
                $M = 255 - t8;
                t9 = C.JSNumber_methods.toInt$0($Y + 1.772 * t9);
                if (t9 < 0)
                  t8 = 0;
                else
                  t8 = t9 > 255 ? 255 : t9;
                Ye = 255 - t8;
              }
              t8 = C.JSInt_methods._shrOtherPositive$1($C * $K, 8);
              $R = (t8 & 2147483647) - ((t8 & 2147483648) >>> 0);
              t8 = C.JSInt_methods._shrOtherPositive$1($M * $K, 8);
              $G = (t8 & 2147483647) - ((t8 & 2147483648) >>> 0);
              t8 = C.JSInt_methods._shrOtherPositive$1(Ye * $K, 8);
              $B = (t8 & 2147483647) - ((t8 & 2147483648) >>> 0);
              offset0 = offset + 1;
              t8 = C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(255, 0, 255));
              t9 = C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2($B, 0, 255));
              t10 = C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2($G, 0, 255));
              t11 = C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2($R, 0, 255));
              if (offset < 0 || offset >= t2)
                return H.ioore(t1, offset);
              t1[offset] = (t8 << 24 | t9 << 16 | t10 << 8 | t11) >>> 0;
              ++x;
              offset = offset0;
            }
            ++y;
          }
          break;
        default:
          throw H.wrapException(K.ImageException$("Unsupported color mode"));
      }
      return image;
    }
  },
  E = {BmpDecoder: function BmpDecoder() {
      this.info = this._bmp_decoder$_input = null;
    }, BmpDecoder_decodeFrame_closure: function BmpDecoder_decodeFrame_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.image = t1;
      this.line = t2;
    }, DibDecoder: function DibDecoder() {
      this.info = this._bmp_decoder$_input = null;
    }, Encoder: function Encoder() {
    }, WebPDecoder: function WebPDecoder() {
      this._webp_decoder$_input = this._info = null;
    }},
  A = {DecodeInfo: function DecodeInfo() {
    }, GifImageDesc: function GifImageDesc() {
    }, InternalGifImageDesc: function InternalGifImageDesc() {
      var _ = this;
      _._inputPosition = _.colorMap = _.interlaced = _.height = _.width = _.y = _.x = null;
    }, TiffBitReader: function TiffBitReader(t0) {
      this.input = t0;
      this._bitPos = this._tiff_bit_reader$_bitBuffer = 0;
    },
    TiffFaxDecoder$: function(fillOrder, width, height) {
      var t2, t3,
        t1 = new A.TiffFaxDecoder(width, fillOrder);
      if (typeof width !== "number")
        return H.iae(width);
      t2 = new Array(width);
      t2.fixed$length = Array;
      t3 = type$.JSArray_legacy_int;
      t1.set$prevChangingElems(H.setRuntimeTypeInfo(t2, t3));
      t2 = new Array(width);
      t2.fixed$length = Array;
      t1.set$currChangingElems(H.setRuntimeTypeInfo(t2, t3));
      return t1;
    },
    TiffFaxDecoder: function TiffFaxDecoder(t0, t1) {
      var _ = this;
      _.width = t0;
      _.fillOrder = t1;
      _.changingElemSize = 0;
      _.bytePointer = _.bitPointer = _.data = _.currChangingElems = _.prevChangingElems = null;
      _.lastChangingElement = 0;
      _.compression = 2;
      _.fillBits = 0;
      _.oneD = null;
    },
    TiffInfo: function TiffInfo(t0) {
      var _ = this;
      _.signature = null;
      _.images = t0;
      _.height = _.width = 0;
    },
    VP8$: function(input, _webp) {
      var t6,
        t1 = new Int32Array(4),
        t2 = new Int32Array(4),
        t3 = new Int8Array(4),
        t4 = new Int8Array(4),
        t5 = new Array(8);
      t5.fixed$length = Array;
      t5 = H.setRuntimeTypeInfo(t5, type$.JSArray_legacy_VP8BitReader);
      t6 = new Array(4);
      t6.fixed$length = Array;
      t6 = H.setRuntimeTypeInfo(t6, type$.JSArray_legacy_VP8QuantMatrix);
      return new A.VP8(input, _webp, new L.VP8FrameHeader(), new L.VP8PictureHeader(), new L.VP8FilterHeader(t1, t2), new L.VP8SegmentHeader(t3, t4), t5, t6, new Uint8Array(4));
    },
    VP8__checkMode: function(mb_x, mb_y, mode) {
      if (mode === 0)
        if (mb_x === 0)
          return mb_y === 0 ? 6 : 5;
        else
          return mb_y === 0 ? 4 : 0;
      return mode;
    },
    VP8: function VP8(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.input = t0;
      _._webp = t1;
      _._dsp = _.output = _.br = null;
      _._frameHeader = t2;
      _._picHeader = t3;
      _._filterHeader = t4;
      _._segmentHeader = t5;
      _._numPartitions = _._brMbY = _._brMbX = _._tlMbY = _._tlMbX = _._mbHeight = _._mbWidth = _._cropBottom = _._cropTop = _._cropRight = _._cropLeft = null;
      _._partitions = t6;
      _._dqm = t7;
      _._intraT = _._skipP = _._useSkipProba = _._proba = null;
      _._intraL = t8;
      _._a = _._v = _._u = _._y = _._tmpV = _._tmpU = _._tmpY = _._cacheUVStride = _._cacheYStride = _._cacheV = _._cacheU = _._cacheY = _._yuvBlock = _._fInfo = _._mbInfo = _._yuvT = _._segment = null;
      _._mbY = _._mbX = 0;
      _._alphaPlane = _._alphaData = _._alpha = _._fStrengths = _._filterType = _._mbData = null;
    },
    VP8__upsample_LOAD_UV: function VP8__upsample_LOAD_UV() {
    },
    VP8LBitReader: function VP8LBitReader(t0, t1) {
      var _ = this;
      _.bitPos = 0;
      _._vp8l_bit_reader$_input = t0;
      _._vp8l_bit_reader$_buffer = t1;
      _._buffer8 = null;
    },
    hdrToImage: function(hdr, exposure) {
      var m, t1, t2, y, di, t3, x, r, g, b, ri, gi, bi, mi, di0, a,
        _gamma = new A.hdrToImage__gamma(new A.hdrToImage__knee()),
        image = U.Image$(hdr.get$width(hdr), hdr.get$height(hdr), C.Channels_1, null, null),
        pixels = image.getBytes$0();
      if (!(hdr.red != null || hdr.green != null || hdr.blue != null))
        throw H.wrapException(K.ImageException$("Only RGB[A] images are currently supported."));
      m = Math.pow(2, C.JSNumber_methods.clamp$2(exposure + 2.47393, -20, 20));
      t1 = pixels.length;
      t2 = hdr.slices;
      y = 0;
      di = 0;
      while (true) {
        if (t2.get$isEmpty(t2))
          t3 = 0;
        else {
          t3 = t2.get$values();
          t3 = t3.get$first(t3).height;
        }
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (!(y < t3))
          break;
        x = 0;
        while (true) {
          if (t2.get$isEmpty(t2))
            t3 = 0;
          else {
            t3 = t2.get$values();
            t3 = t3.get$first(t3).width;
          }
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (!(x < t3))
            break;
          t3 = hdr.red;
          r = t3 != null ? t3.getFloat$2(x, y) : 0;
          if (t2.get$length(t2) === 1)
            g = r;
          else {
            t3 = hdr.green;
            g = t3 != null ? t3.getFloat$2(x, y) : 0;
          }
          if (t2.get$length(t2) === 1)
            b = r;
          else {
            t3 = hdr.blue;
            b = t3 != null ? t3.getFloat$2(x, y) : 0;
          }
          if (r == 1 / 0 || r == -1 / 0 || isNaN(r))
            r = 0;
          if (g == 1 / 0 || g == -1 / 0 || isNaN(g))
            g = 0;
          if (b == 1 / 0 || b == -1 / 0 || isNaN(b))
            b = 0;
          ri = _gamma.call$2(r, m);
          gi = _gamma.call$2(g, m);
          bi = _gamma.call$2(b, m);
          t3 = Math.max(H.checkNum(gi), H.checkNum(bi));
          mi = Math.max(H.checkNum(ri), t3);
          if (mi > 255) {
            if (typeof ri !== "number")
              return ri.$div();
            ri = 255 * (ri / mi);
            if (typeof gi !== "number")
              return gi.$div();
            gi = 255 * (gi / mi);
            if (typeof bi !== "number")
              return bi.$div();
            bi = 255 * (bi / mi);
          }
          di0 = di + 1;
          t3 = C.JSNumber_methods.toInt$0(J.clamp$2$n(ri, 0, 255));
          if (di < 0 || di >= t1)
            return H.ioore(pixels, di);
          pixels[di] = t3;
          di = di0 + 1;
          t3 = C.JSNumber_methods.toInt$0(J.clamp$2$n(gi, 0, 255));
          if (di0 < 0 || di0 >= t1)
            return H.ioore(pixels, di0);
          pixels[di0] = t3;
          di0 = di + 1;
          t3 = C.JSNumber_methods.toInt$0(J.clamp$2$n(bi, 0, 255));
          if (di < 0 || di >= t1)
            return H.ioore(pixels, di);
          pixels[di] = t3;
          t3 = hdr.alpha;
          if (t3 != null) {
            a = t3.getFloat$2(x, y);
            if (a == 1 / 0 || a == -1 / 0 || isNaN(a))
              a = 1;
            di = di0 + 1;
            t3 = C.JSNumber_methods.toInt$0(C.JSNumber_methods.clamp$2(a * 255, 0, 255));
            if (di0 < 0 || di0 >= t1)
              return H.ioore(pixels, di0);
            pixels[di0] = t3;
          } else {
            di = di0 + 1;
            if (di0 < 0 || di0 >= t1)
              return H.ioore(pixels, di0);
            pixels[di0] = 255;
          }
          ++x;
        }
        ++y;
      }
      return image;
    },
    hdrToImage__knee: function hdrToImage__knee() {
    },
    hdrToImage__gamma: function hdrToImage__gamma(t0) {
      this._knee = t0;
    }
  },
  B = {Decoder: function Decoder() {
    },
    ExrCompressor_ExrCompressor: function(type, hdr, maxScanLineSize, numScanLines) {
      var t1, t2;
      switch (type) {
        case 1:
          return new Y.InternalExrRleCompressor(hdr);
        case 2:
          t1 = numScanLines == null ? 1 : numScanLines;
          return new R.InternalExrZipCompressor(new Z.ZLibDecoder(), t1, hdr);
        case 3:
          t1 = numScanLines == null ? 16 : numScanLines;
          return new R.InternalExrZipCompressor(new Z.ZLibDecoder(), t1, hdr);
        case 4:
          t1 = numScanLines == null ? 32 : numScanLines;
          t2 = new G.InternalExrPizCompressor(maxScanLineSize, t1, hdr);
          t2.InternalExrPizCompressor$3(hdr, maxScanLineSize, t1);
          return t2;
        case 5:
          t1 = numScanLines == null ? 16 : numScanLines;
          return new O.InternalExrPxr24Compressor(new Z.ZLibDecoder(), maxScanLineSize, t1, hdr);
        case 6:
          return new D.InternalExrB44Compressor(numScanLines == null ? 32 : numScanLines, hdr);
        case 7:
          return new D.InternalExrB44Compressor(numScanLines == null ? 32 : numScanLines, hdr);
        default:
          throw H.wrapException(K.ImageException$("Invalid compression type: " + H.S(type)));
      }
    },
    ExrCompressor: function ExrCompressor() {
    },
    InternalExrCompressor: function InternalExrCompressor() {
    },
    TgaDecoder: function TgaDecoder() {
      this.input = this.info = null;
    },
    VP8BitReader: function VP8BitReader(t0) {
      var _ = this;
      _.input = t0;
      _._bits = _._vp8_bit_reader$_value = _._range = null;
      _._eof = false;
    },
    HuffmanTree$: function() {
      var t1 = new Uint8Array(128),
        t2 = new Int16Array(128);
      t1 = new B.HuffmanTree(t1, t2, new Int16Array(128));
      t1._init$1(0);
      return t1;
    },
    HTreeGroup$: function() {
      var t1 = new Array(5);
      t1.fixed$length = Array;
      t1 = new B.HTreeGroup(H.setRuntimeTypeInfo(t1, type$.JSArray_legacy_HuffmanTree));
      t1.HTreeGroup$0();
      return t1;
    },
    HuffmanTree: function HuffmanTree(t0, t1, t2) {
      var _ = this;
      _.lutBits = t0;
      _.lutSymbol = t1;
      _.lutJump = t2;
      _.tree = null;
      _.numNodes = _.maxNodes = 0;
    },
    HTreeGroup: function HTreeGroup(t0) {
      this.htrees = t0;
    },
    main: function() {
      var t2,
        t1 = self.self;
      t1.toString;
      type$.nullable_EventTarget._as(t1);
      t2 = type$.nullable_void_Function_legacy_MessageEvent._as(new B.main_closure());
      type$.nullable_void_Function._as(null);
      W._EventStreamSubscription$(t1, "message", t2, false, type$.legacy_MessageEvent);
    },
    main_closure: function main_closure() {
    }
  },
  U = {ExrAttribute: function ExrAttribute() {
    }, ExrDecoder: function ExrDecoder() {
      this.exrImage = null;
    }, ComponentData: function ComponentData(t0, t1, t2) {
      this.lines = t0;
      this.hScaleShift = t1;
      this.vScaleShift = t2;
    }, PsdBevelEffect: function PsdBevelEffect() {
      this.version = null;
    }, TiffImage: function TiffImage(t0) {
      var _ = this;
      _.tags = t0;
      _.photometricType = _.height = _.width = null;
      _.sampleFormat = _.samplesPerPixel = _.bitsPerSample = _.compression = 1;
      _.imageType = -1;
      _.isWhiteZero = false;
      _.predictor = 1;
      _.tilesY = _.tilesX = _.tileByteCounts = _.tileOffsets = _.tileHeight = _.tileWidth = _.chromaSubV = _.chromaSubH = null;
      _.fillOrder = 1;
      _.t6Options = _.t4Options = 0;
      _.hdrImage = _.image = _.colorMapBlue = _.colorMapGreen = _.colorMapRed = _.colorMap = null;
    },
    Image$: function(width, height, channels, exif, iccp) {
      if (typeof width !== "number")
        return width.$mul();
      if (typeof height !== "number")
        return H.iae(height);
      return new U.Image(width, height, channels, 0, 0, 0, C.DisposeMode_1, C.BlendMode_1, new Uint32Array(width * height), G.ExifData$from(exif), iccp);
    },
    Image$from: function(other) {
      return new U.Image(other.width, other.height, other.channels, other.xOffset, other.yOffset, other.duration, other.disposeMethod, other.blendMethod, C.NativeUint32List_methods.sublist$1(other.data, 0), G.ExifData$from(other.exif), other.iccProfile);
    },
    Format: function Format(t0) {
      this._image$_name = t0;
    },
    Channels: function Channels(t0) {
      this._image$_name = t0;
    },
    BlendMode: function BlendMode() {
    },
    DisposeMode: function DisposeMode() {
    },
    Image: function Image(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10) {
      var _ = this;
      _.width = t0;
      _.height = t1;
      _.channels = t2;
      _.xOffset = t3;
      _.yOffset = t4;
      _.duration = t5;
      _.disposeMethod = t6;
      _.blendMethod = t7;
      _.data = t8;
      _.exif = t9;
      _.iccProfile = t10;
    },
    Image_getPixelLinear__linear: function Image_getPixelLinear__linear(t0, t1) {
      this.dx = t0;
      this.dy = t1;
    },
    Image_getPixelCubic__cubic: function Image_getPixelCubic__cubic() {
    }
  },
  D = {InternalExrB44Compressor: function InternalExrB44Compressor(t0, t1) {
      var _ = this;
      _._numScanLines = t0;
      _.decodedHeight = _.decodedWidth = 0;
      _._header = t1;
    }, ExrChannel: function ExrChannel() {
      var _ = this;
      _.ySampling = _.xSampling = _.size = _.type = _.name = null;
    }, JpegAdobe: function JpegAdobe() {
      this.transformCode = null;
    }, PngFrame: function PngFrame() {
    }, InternalPngFrame: function InternalPngFrame(t0) {
      this.height = this.width = null;
      this._fdat = t0;
    }, PsdInnerGlowEffect: function PsdInnerGlowEffect() {
      this.version = null;
    }, WebPInfo: function WebPInfo(t0) {
      var _ = this;
      _.hasAnimation = _.hasAlpha = false;
      _.format = 0;
      _.frames = t0;
      _._numFrames = _._frame = 0;
      _._webp_info$_alphaData = null;
      _.height = _.width = _._vp8Size = _._vp8Position = 0;
    }, InternalWebPInfo: function InternalWebPInfo(t0) {
      var _ = this;
      _.hasAnimation = _.hasAlpha = false;
      _.format = 0;
      _.frames = t0;
      _._numFrames = _._frame = 0;
      _._webp_info$_alphaData = null;
      _.height = _.width = _._vp8Size = _._vp8Position = 0;
    }, ICCProfileData: function ICCProfileData() {
    }},
  O = {InternalExrPxr24Compressor: function InternalExrPxr24Compressor(t0, t1, t2, t3) {
      var _ = this;
      _._zlib = t0;
      _._maxScanLineSize = t1;
      _._exr_pxr24_compressor$_numScanLines = t2;
      _._output = null;
      _.decodedHeight = _.decodedWidth = 0;
      _._header = t3;
    }, PsdBlendingRanges: function PsdBlendingRanges() {
      var _ = this;
      _.whiteDst = _.blackDst = _.whiteSrc = _.blackSrc = null;
    }},
  M = {
    GifColorMap$: function(numColors) {
      var t1 = new M.GifColorMap(numColors, new Uint8Array(numColors * 3));
      t1._bitSize$1(numColors);
      return t1;
    },
    GifColorMap: function GifColorMap(t0, t1) {
      this.numColors = t0;
      this.transparent = null;
      this.colors = t1;
    },
    PsdDropShadowEffect: function PsdDropShadowEffect() {
      this.version = null;
    }
  },
  K = {GifInfo: function GifInfo(t0) {
      var _ = this;
      _.globalColorMap = null;
      _.frames = t0;
      _.height = _.width = 0;
    }, PsdLayerAdditionalData: function PsdLayerAdditionalData(t0) {
      this.data = t0;
    },
    HdrSlice$: function($name, width, height, type) {
      var t1;
      if (type === 1) {
        if (typeof width !== "number")
          return width.$mul();
        if (typeof height !== "number")
          return H.iae(height);
        t1 = new Uint16Array(width * height);
      } else if (type === 3) {
        if (typeof width !== "number")
          return width.$mul();
        if (typeof height !== "number")
          return H.iae(height);
        t1 = new Float64Array(width * height);
      } else if (type === 2) {
        if (typeof width !== "number")
          return width.$mul();
        if (typeof height !== "number")
          return H.iae(height);
        t1 = new Float32Array(width * height);
      } else {
        if (typeof width !== "number")
          return width.$mul();
        if (typeof height !== "number")
          return H.iae(height);
        t1 = new Uint32Array(width * height);
      }
      return new K.HdrSlice($name, width, height, type, t1);
    },
    HdrSlice: function HdrSlice(t0, t1, t2, t3, t4) {
      var _ = this;
      _.name = t0;
      _.width = t1;
      _.height = t2;
      _.type = t3;
      _.data = t4;
    },
    ImageException$: function(message) {
      return new K.ImageException(message);
    },
    ImageException: function ImageException(t0) {
      this.message = t0;
    },
    getColor: function(r, g, b, a) {
      return (C.JSNumber_methods.toInt$0(J.clamp$2$n(a, 0, 255)) << 24 | C.JSNumber_methods.toInt$0(J.clamp$2$n(b, 0, 255)) << 16 | C.JSNumber_methods.toInt$0(J.clamp$2$n(g, 0, 255)) << 8 | C.JSNumber_methods.toInt$0(J.clamp$2$n(r, 0, 255))) >>> 0;
    },
    bakeOrientation: function(image) {
      var t1, t2,
        bakedImage = U.Image$from(image);
      if (!image.exif.data.containsKey$1(274) || H._asIntS(image.exif.data.$index(0, 274)) === 1)
        return bakedImage;
      bakedImage.exif = new G.ExifData(P.LinkedHashMap_LinkedHashMap$_empty(type$.legacy_int, type$.dynamic));
      for (t1 = image.exif.data.get$keys(), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
        t2 = t1.get$current();
        if (t2 !== 274)
          bakedImage.exif.data.$indexSet(0, t2, image.exif.data.$index(0, t2));
      }
      switch (H._asIntS(image.exif.data.$index(0, 274))) {
        case 2:
          return N.flipHorizontal(bakedImage);
        case 3:
          switch (C.Flip_2) {
            case C.Flip_0:
              N.flipHorizontal(bakedImage);
              break;
            case C.Flip_1:
              N.flipVertical(bakedImage);
              break;
            case C.Flip_2:
              N.flipVertical(bakedImage);
              N.flipHorizontal(bakedImage);
              break;
          }
          return bakedImage;
        case 4:
          return N.flipHorizontal(G.copyRotate(bakedImage, 180));
        case 5:
          return N.flipHorizontal(G.copyRotate(bakedImage, 90));
        case 6:
          return G.copyRotate(bakedImage, 90);
        case 7:
          return N.flipHorizontal(G.copyRotate(bakedImage, -90));
        case 8:
          return G.copyRotate(bakedImage, -90);
      }
      return bakedImage;
    },
    copyResize: function(src, height, width) {
      var t2, t3, dst, dy, dx, scaleX, x, t4, t5, t6, t7, y, y2, t8, t9,
        t1 = width == null;
      if (t1 && height == null)
        throw H.wrapException(K.ImageException$("Invalid size"));
      src = K.bakeOrientation(src);
      if (height == null || height <= 0) {
        t2 = src.height;
        t3 = src.width;
        if (typeof t2 !== "number")
          return t2.$div();
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (typeof width !== "number")
          return width.$mul();
        height = C.JSNumber_methods.toInt$0(width * (t2 / t3));
      }
      if (t1 || width <= 0) {
        t1 = src.width;
        t2 = src.height;
        if (typeof t1 !== "number")
          return t1.$div();
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (typeof height !== "number")
          return height.$mul();
        width = C.JSNumber_methods.toInt$0(height * (t1 / t2));
      }
      t1 = src.width;
      if (width == t1 && height == src.height)
        return U.Image$from(src);
      dst = U.Image$(width, height, src.channels, src.exif, src.iccProfile);
      t2 = src.height;
      if (typeof t2 !== "number")
        return t2.$div();
      if (typeof height !== "number")
        return H.iae(height);
      dy = t2 / height;
      if (typeof t1 !== "number")
        return t1.$div();
      if (typeof width !== "number")
        return H.iae(width);
      dx = t1 / width;
      scaleX = new Int32Array(width);
      for (t2 = scaleX.length, x = 0; x < width; ++x) {
        t3 = C.JSNumber_methods.toInt$0(x * dx);
        if (x >= t2)
          return H.ioore(scaleX, x);
        scaleX[x] = t3;
      }
      for (t3 = src.data, t4 = t3.length, t5 = dst.data, t6 = dst.width, t7 = t5.length, y = 0; y < height; ++y) {
        y2 = C.JSNumber_methods.toInt$0(y * dy);
        for (x = 0; x < width; ++x) {
          if (x >= t2)
            return H.ioore(scaleX, x);
          t8 = y2 * t1 + scaleX[x];
          if (t8 < 0 || t8 >= t4)
            return H.ioore(t3, t8);
          t8 = t3[t8];
          if (typeof t6 !== "number")
            return H.iae(t6);
          t9 = y * t6 + x;
          if (t9 < 0 || t9 >= t7)
            return H.ioore(t5, t9);
          t5[t9] = t8;
        }
      }
      return dst;
    }
  },
  F = {GifDecoder: function GifDecoder() {
      var _ = this;
      _._clearCode = _._eofCode = _._runningCode = _._runningBits = _._maxCode1 = _._lastCode = _._currentCode = _._stackPtr = _._currentShiftState = _._currentShiftDWord = _._pixelCount = _._bitsPerPixel = _._gif_decoder$_prefix = _._suffix = _._stack = _._gif_decoder$_buffer = _._input = _.info = null;
    }, PsdSolidFillEffect: function PsdSolidFillEffect() {
      this.version = null;
    }, HdrImage: function HdrImage(t0) {
      var _ = this;
      _.slices = t0;
      _.alpha = _.blue = _.green = _.red = null;
    }},
  X = {
    IcoInfo__read: function(input) {
      var type, imageCount;
      if (input.readUint16$0() !== 0)
        return null;
      type = input.readUint16$0();
      if (!C.JSArray_methods.contains$1(H.setRuntimeTypeInfo([1, 2], type$.JSArray_legacy_int), type))
        return null;
      if (type === 2)
        return null;
      imageCount = input.readUint16$0();
      return new X.IcoInfo(imageCount, P.Iterable_Iterable$generate(imageCount, new X.IcoInfo__read_closure(input), type$.legacy_IcoInfoImage).toList$0(0));
    },
    IcoDecoder: function IcoDecoder() {
      this._icoInfo = this._ico_decoder$_input = null;
    },
    IcoInfo: function IcoInfo(t0, t1) {
      var _ = this;
      _.numFrames = t0;
      _.images = t1;
      _.height = _.width = 0;
    },
    IcoInfo__read_closure: function IcoInfo__read_closure(t0) {
      this.input = t0;
    },
    IcoInfoImage: function IcoInfoImage(t0, t1) {
      this.bytesSize = t0;
      this.bytesOffset = t1;
    },
    IcoBmpInfo: function IcoBmpInfo(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11) {
      var _ = this;
      _.file = t0;
      _._height = t1;
      _.BmpInfo_width = t2;
      _.headerSize = t3;
      _.planes = t4;
      _.bpp = t5;
      _.compression = t6;
      _.imageSize = t7;
      _.xppm = t8;
      _.yppm = t9;
      _.totalColors = t10;
      _.importantColors = t11;
      _.colorPalette = _.v5alphaMask = _.v5blueMask = _.v5greenMask = _.v5redMask = null;
      _.height = _.width = 0;
    },
    WebPFrame: function WebPFrame() {
    },
    InternalWebPFrame: function InternalWebPFrame() {
      this._reserved = 1;
      this._frameSize = this._framePosition = null;
    },
    Interpolation: function Interpolation(t0) {
      this._interpolation$_name = t0;
    },
    getCrc32: function(array, crc) {
      var ip, ip0,
        t1 = J.getInterceptor$asx(array),
        len = t1.get$length(array);
      crc ^= 4294967295;
      for (ip = 0; len >= 8;) {
        ip0 = ip + 1;
        crc = C.List_B8J[(crc ^ t1.$index(array, ip)) & 255] ^ crc >>> 8;
        ip = ip0 + 1;
        crc = C.List_B8J[(crc ^ t1.$index(array, ip0)) & 255] ^ crc >>> 8;
        ip0 = ip + 1;
        crc = C.List_B8J[(crc ^ t1.$index(array, ip)) & 255] ^ crc >>> 8;
        ip = ip0 + 1;
        crc = C.List_B8J[(crc ^ t1.$index(array, ip0)) & 255] ^ crc >>> 8;
        ip0 = ip + 1;
        crc = C.List_B8J[(crc ^ t1.$index(array, ip)) & 255] ^ crc >>> 8;
        ip = ip0 + 1;
        crc = C.List_B8J[(crc ^ t1.$index(array, ip0)) & 255] ^ crc >>> 8;
        ip0 = ip + 1;
        crc = C.List_B8J[(crc ^ t1.$index(array, ip)) & 255] ^ crc >>> 8;
        ip = ip0 + 1;
        crc = C.List_B8J[(crc ^ t1.$index(array, ip0)) & 255] ^ crc >>> 8;
        len -= 8;
      }
      if (len > 0)
        do {
          ip0 = ip + 1;
          crc = C.List_B8J[(crc ^ t1.$index(array, ip)) & 255] ^ crc >>> 8;
          if (--len, len > 0) {
            ip = ip0;
            continue;
          } else
            break;
        } while (true);
      return (crc ^ 4294967295) >>> 0;
    }
  },
  V = {PsdEffect: function PsdEffect() {
    }, PsdDecoder: function PsdDecoder() {
      this.info = null;
    },
    VP8Filter_AVG3: function(a, b, c) {
      if (typeof b !== "number")
        return H.iae(b);
      if (typeof a !== "number")
        return a.$add();
      if (typeof c !== "number")
        return H.iae(c);
      return C.JSInt_methods.toSigned$1(C.JSInt_methods._shrOtherPositive$1(a + 2 * b + c + 2, 2), 32);
    },
    VP8Filter_VE4: function(dst) {
      var t3, t4, t5, t6, t7, vals, i,
        t1 = dst.buffer,
        t2 = dst.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      t2 = J.$index$asx(t1, t2 + -33);
      t1 = dst.buffer;
      t3 = dst.offset;
      if (typeof t3 !== "number")
        return t3.$add();
      t3 = J.$index$asx(t1, t3 + -32);
      t1 = dst.buffer;
      t4 = dst.offset;
      if (typeof t4 !== "number")
        return t4.$add();
      t4 = V.VP8Filter_AVG3(t2, t3, J.$index$asx(t1, t4 + -31));
      t1 = dst.buffer;
      t3 = dst.offset;
      if (typeof t3 !== "number")
        return t3.$add();
      t3 = J.$index$asx(t1, t3 + -32);
      t1 = dst.buffer;
      t2 = dst.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      t2 = J.$index$asx(t1, t2 + -31);
      t1 = dst.buffer;
      t5 = dst.offset;
      if (typeof t5 !== "number")
        return t5.$add();
      t5 = V.VP8Filter_AVG3(t3, t2, J.$index$asx(t1, t5 + -30));
      t1 = dst.buffer;
      t2 = dst.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      t2 = J.$index$asx(t1, t2 + -31);
      t1 = dst.buffer;
      t3 = dst.offset;
      if (typeof t3 !== "number")
        return t3.$add();
      t3 = J.$index$asx(t1, t3 + -30);
      t1 = dst.buffer;
      t6 = dst.offset;
      if (typeof t6 !== "number")
        return t6.$add();
      t6 = V.VP8Filter_AVG3(t2, t3, J.$index$asx(t1, t6 + -29));
      t1 = dst.buffer;
      t3 = dst.offset;
      if (typeof t3 !== "number")
        return t3.$add();
      t3 = J.$index$asx(t1, t3 + -30);
      t1 = dst.buffer;
      t2 = dst.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      t2 = J.$index$asx(t1, t2 + -29);
      t1 = dst.buffer;
      t7 = dst.offset;
      if (typeof t7 !== "number")
        return t7.$add();
      vals = H.setRuntimeTypeInfo([t4, t5, t6, V.VP8Filter_AVG3(t3, t2, J.$index$asx(t1, t7 + -28))], type$.JSArray_legacy_int);
      for (i = 0; i < 4; ++i)
        dst.memcpy$3(i * 32, 4, vals);
    },
    VP8Filter_HE4: function(dst) {
      var t3, t4, t5, t6, d2,
        t1 = dst.buffer,
        t2 = dst.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      t2 = J.$index$asx(t1, t2 + -33);
      t1 = dst.buffer;
      t3 = dst.offset;
      if (typeof t3 !== "number")
        return t3.$add();
      t3 = J.$index$asx(t1, t3 + -1);
      t1 = dst.buffer;
      t4 = dst.offset;
      if (typeof t4 !== "number")
        return t4.$add();
      t4 = J.$index$asx(t1, t4 + 31);
      t1 = dst.buffer;
      t5 = dst.offset;
      if (typeof t5 !== "number")
        return t5.$add();
      t5 = J.$index$asx(t1, t5 + 63);
      t1 = dst.buffer;
      t6 = dst.offset;
      if (typeof t6 !== "number")
        return t6.$add();
      t6 = J.$index$asx(t1, t6 + 95);
      d2 = Z.InputBuffer$from(dst, null, 0);
      t1 = d2.toUint32List$0();
      t2 = V.VP8Filter_AVG3(t2, t3, t4);
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1[0] = 16843009 * t2;
      t2 = d2.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      d2.offset = t2 + 32;
      t2 = d2.toUint32List$0();
      t3 = V.VP8Filter_AVG3(t3, t4, t5);
      if (0 >= t2.length)
        return H.ioore(t2, 0);
      t2[0] = 16843009 * t3;
      t3 = d2.offset;
      if (typeof t3 !== "number")
        return t3.$add();
      d2.offset = t3 + 32;
      t3 = d2.toUint32List$0();
      t4 = V.VP8Filter_AVG3(t4, t5, t6);
      if (0 >= t3.length)
        return H.ioore(t3, 0);
      t3[0] = 16843009 * t4;
      t4 = d2.offset;
      if (typeof t4 !== "number")
        return t4.$add();
      d2.offset = t4 + 32;
      t4 = d2.toUint32List$0();
      t6 = V.VP8Filter_AVG3(t5, t6, t6);
      if (0 >= t4.length)
        return H.ioore(t4, 0);
      t4[0] = 16843009 * t6;
    },
    VP8Filter_DC4: function(dst) {
      var dc, i, t1, t2, t3;
      for (dc = 4, i = 0; i < 4; ++i) {
        t1 = dst.buffer;
        t2 = dst.offset;
        if (typeof t2 !== "number")
          return t2.$add();
        t2 = J.$index$asx(t1, t2 + (i - 32));
        t1 = dst.buffer;
        t3 = dst.offset;
        if (typeof t3 !== "number")
          return t3.$add();
        t3 = J.$index$asx(t1, t3 + (-1 + i * 32));
        if (typeof t2 !== "number")
          return t2.$add();
        if (typeof t3 !== "number")
          return H.iae(t3);
        dc += t2 + t3;
      }
      dc = C.JSInt_methods._shrOtherPositive$1(dc, 3);
      for (i = 0; i < 4; ++i) {
        t1 = dst.buffer;
        t2 = dst.offset;
        if (typeof t2 !== "number")
          return t2.$add();
        t2 += i * 32;
        J.fillRange$3$ax(t1, t2, t2 + 4, dc);
      }
    },
    VP8Filter_trueMotion: function(dst, size) {
      var clip0, di, y, clip, x, t3,
        t1 = dst.buffer,
        t2 = dst.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      t2 = J.$index$asx(t1, t2 + -33);
      if (typeof t2 !== "number")
        return H.iae(t2);
      clip0 = 255 - t2;
      for (di = 0, y = 0; y < size; ++y) {
        t1 = dst.buffer;
        t2 = dst.offset;
        if (typeof t2 !== "number")
          return t2.$add();
        t2 = J.$index$asx(t1, t2 + (di - 1));
        if (typeof t2 !== "number")
          return H.iae(t2);
        clip = clip0 + t2;
        for (x = 0; x < size; ++x) {
          t1 = $.$get$VP8Filter_clip1();
          t2 = dst.buffer;
          t3 = dst.offset;
          if (typeof t3 !== "number")
            return t3.$add();
          t3 = J.$index$asx(t2, t3 + (-32 + x));
          if (typeof t3 !== "number")
            return H.iae(t3);
          t3 = clip + t3;
          t1.length;
          if (t3 < 0 || t3 >= 766)
            return H.ioore(t1, t3);
          t3 = t1[t3];
          t1 = dst.buffer;
          t2 = dst.offset;
          if (typeof t2 !== "number")
            return t2.$add();
          J.$indexSet$ax(t1, t2 + (di + x), t3);
        }
        di += 32;
      }
    },
    VP8Filter_TM4: function(dst) {
      V.VP8Filter_trueMotion(dst, 4);
    },
    VP8Filter_TM8uv: function(dst) {
      V.VP8Filter_trueMotion(dst, 8);
    },
    VP8Filter_TM16: function(dst) {
      V.VP8Filter_trueMotion(dst, 16);
    },
    VP8Filter_RD4: function(dst) {
      var t3, t4, t5, t6, t7, t8, t9, t10,
        t1 = dst.buffer,
        t2 = dst.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      t2 = J.$index$asx(t1, t2 + -1);
      t1 = dst.buffer;
      t3 = dst.offset;
      if (typeof t3 !== "number")
        return t3.$add();
      t3 = J.$index$asx(t1, t3 + 31);
      t1 = dst.buffer;
      t4 = dst.offset;
      if (typeof t4 !== "number")
        return t4.$add();
      t4 = J.$index$asx(t1, t4 + 63);
      t1 = dst.buffer;
      t5 = dst.offset;
      if (typeof t5 !== "number")
        return t5.$add();
      t5 = J.$index$asx(t1, t5 + 95);
      t1 = dst.buffer;
      t6 = dst.offset;
      if (typeof t6 !== "number")
        return t6.$add();
      t6 = J.$index$asx(t1, t6 + -33);
      t1 = dst.buffer;
      t7 = dst.offset;
      if (typeof t7 !== "number")
        return t7.$add();
      t7 = J.$index$asx(t1, t7 + -32);
      t1 = dst.buffer;
      t8 = dst.offset;
      if (typeof t8 !== "number")
        return t8.$add();
      t8 = J.$index$asx(t1, t8 + -31);
      t1 = dst.buffer;
      t9 = dst.offset;
      if (typeof t9 !== "number")
        return t9.$add();
      t9 = J.$index$asx(t1, t9 + -30);
      t1 = dst.buffer;
      t10 = dst.offset;
      if (typeof t10 !== "number")
        return t10.$add();
      t10 = J.$index$asx(t1, t10 + -29);
      dst.$indexSet(0, 96, V.VP8Filter_AVG3(t3, t4, t5));
      t4 = V.VP8Filter_AVG3(t2, t3, t4);
      dst.$indexSet(0, 97, t4);
      dst.$indexSet(0, 64, t4);
      t3 = V.VP8Filter_AVG3(t6, t2, t3);
      dst.$indexSet(0, 98, t3);
      dst.$indexSet(0, 65, t3);
      dst.$indexSet(0, 32, t3);
      t2 = V.VP8Filter_AVG3(t7, t6, t2);
      dst.$indexSet(0, 99, t2);
      dst.$indexSet(0, 66, t2);
      dst.$indexSet(0, 33, t2);
      dst.$indexSet(0, 0, t2);
      t6 = V.VP8Filter_AVG3(t8, t7, t6);
      dst.$indexSet(0, 67, t6);
      dst.$indexSet(0, 34, t6);
      dst.$indexSet(0, 1, t6);
      t7 = V.VP8Filter_AVG3(t9, t8, t7);
      dst.$indexSet(0, 35, t7);
      dst.$indexSet(0, 2, t7);
      dst.$indexSet(0, 3, V.VP8Filter_AVG3(t10, t9, t8));
    },
    VP8Filter_LD4: function(dst) {
      var t3, t4, t5, t6, t7, t8, t9,
        t1 = dst.buffer,
        t2 = dst.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      t2 = J.$index$asx(t1, t2 + -32);
      t1 = dst.buffer;
      t3 = dst.offset;
      if (typeof t3 !== "number")
        return t3.$add();
      t3 = J.$index$asx(t1, t3 + -31);
      t1 = dst.buffer;
      t4 = dst.offset;
      if (typeof t4 !== "number")
        return t4.$add();
      t4 = J.$index$asx(t1, t4 + -30);
      t1 = dst.buffer;
      t5 = dst.offset;
      if (typeof t5 !== "number")
        return t5.$add();
      t5 = J.$index$asx(t1, t5 + -29);
      t1 = dst.buffer;
      t6 = dst.offset;
      if (typeof t6 !== "number")
        return t6.$add();
      t6 = J.$index$asx(t1, t6 + -28);
      t1 = dst.buffer;
      t7 = dst.offset;
      if (typeof t7 !== "number")
        return t7.$add();
      t7 = J.$index$asx(t1, t7 + -27);
      t1 = dst.buffer;
      t8 = dst.offset;
      if (typeof t8 !== "number")
        return t8.$add();
      t8 = J.$index$asx(t1, t8 + -26);
      t1 = dst.buffer;
      t9 = dst.offset;
      if (typeof t9 !== "number")
        return t9.$add();
      t9 = J.$index$asx(t1, t9 + -25);
      dst.$indexSet(0, 0, V.VP8Filter_AVG3(t2, t3, t4));
      t3 = V.VP8Filter_AVG3(t3, t4, t5);
      dst.$indexSet(0, 32, t3);
      dst.$indexSet(0, 1, t3);
      t4 = V.VP8Filter_AVG3(t4, t5, t6);
      dst.$indexSet(0, 64, t4);
      dst.$indexSet(0, 33, t4);
      dst.$indexSet(0, 2, t4);
      t5 = V.VP8Filter_AVG3(t5, t6, t7);
      dst.$indexSet(0, 96, t5);
      dst.$indexSet(0, 65, t5);
      dst.$indexSet(0, 34, t5);
      dst.$indexSet(0, 3, t5);
      t6 = V.VP8Filter_AVG3(t6, t7, t8);
      dst.$indexSet(0, 97, t6);
      dst.$indexSet(0, 66, t6);
      dst.$indexSet(0, 35, t6);
      t7 = V.VP8Filter_AVG3(t7, t8, t9);
      dst.$indexSet(0, 98, t7);
      dst.$indexSet(0, 67, t7);
      dst.$indexSet(0, 99, V.VP8Filter_AVG3(t8, t9, t9));
    },
    VP8Filter_VR4: function(dst) {
      var t3, t4, t5, t6, t7, t8, t9,
        t1 = dst.buffer,
        t2 = dst.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      t2 = J.$index$asx(t1, t2 + -1);
      t1 = dst.buffer;
      t3 = dst.offset;
      if (typeof t3 !== "number")
        return t3.$add();
      t3 = J.$index$asx(t1, t3 + 31);
      t1 = dst.buffer;
      t4 = dst.offset;
      if (typeof t4 !== "number")
        return t4.$add();
      t4 = J.$index$asx(t1, t4 + 63);
      t1 = dst.buffer;
      t5 = dst.offset;
      if (typeof t5 !== "number")
        return t5.$add();
      t5 = J.$index$asx(t1, t5 + -33);
      t1 = dst.buffer;
      t6 = dst.offset;
      if (typeof t6 !== "number")
        return t6.$add();
      t6 = J.$index$asx(t1, t6 + -32);
      t1 = dst.buffer;
      t7 = dst.offset;
      if (typeof t7 !== "number")
        return t7.$add();
      t7 = J.$index$asx(t1, t7 + -31);
      t1 = dst.buffer;
      t8 = dst.offset;
      if (typeof t8 !== "number")
        return t8.$add();
      t8 = J.$index$asx(t1, t8 + -30);
      t1 = dst.buffer;
      t9 = dst.offset;
      if (typeof t9 !== "number")
        return t9.$add();
      t9 = J.$index$asx(t1, t9 + -29);
      if (typeof t5 !== "number")
        return t5.$add();
      if (typeof t6 !== "number")
        return H.iae(t6);
      t1 = C.JSInt_methods.toSigned$1(C.JSInt_methods._shrOtherPositive$1(t5 + t6 + 1, 1), 32);
      dst.$indexSet(0, 65, t1);
      dst.$indexSet(0, 0, t1);
      if (typeof t7 !== "number")
        return H.iae(t7);
      t1 = C.JSInt_methods.toSigned$1(C.JSInt_methods._shrOtherPositive$1(t6 + t7 + 1, 1), 32);
      dst.$indexSet(0, 66, t1);
      dst.$indexSet(0, 1, t1);
      if (typeof t8 !== "number")
        return H.iae(t8);
      t1 = C.JSInt_methods.toSigned$1(C.JSInt_methods._shrOtherPositive$1(t7 + t8 + 1, 1), 32);
      dst.$indexSet(0, 67, t1);
      dst.$indexSet(0, 2, t1);
      if (typeof t9 !== "number")
        return H.iae(t9);
      dst.$indexSet(0, 3, C.JSInt_methods.toSigned$1(C.JSInt_methods._shrOtherPositive$1(t8 + t9 + 1, 1), 32));
      dst.$indexSet(0, 96, V.VP8Filter_AVG3(t4, t3, t2));
      dst.$indexSet(0, 64, V.VP8Filter_AVG3(t3, t2, t5));
      t2 = V.VP8Filter_AVG3(t2, t5, t6);
      dst.$indexSet(0, 97, t2);
      dst.$indexSet(0, 32, t2);
      t5 = V.VP8Filter_AVG3(t5, t6, t7);
      dst.$indexSet(0, 98, t5);
      dst.$indexSet(0, 33, t5);
      t6 = V.VP8Filter_AVG3(t6, t7, t8);
      dst.$indexSet(0, 99, t6);
      dst.$indexSet(0, 34, t6);
      dst.$indexSet(0, 35, V.VP8Filter_AVG3(t7, t8, t9));
    },
    VP8Filter_VL4: function(dst) {
      var t3, t4, t5, t6, t7, t8, t9,
        t1 = dst.buffer,
        t2 = dst.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      t2 = J.$index$asx(t1, t2 + -32);
      t1 = dst.buffer;
      t3 = dst.offset;
      if (typeof t3 !== "number")
        return t3.$add();
      t3 = J.$index$asx(t1, t3 + -31);
      t1 = dst.buffer;
      t4 = dst.offset;
      if (typeof t4 !== "number")
        return t4.$add();
      t4 = J.$index$asx(t1, t4 + -30);
      t1 = dst.buffer;
      t5 = dst.offset;
      if (typeof t5 !== "number")
        return t5.$add();
      t5 = J.$index$asx(t1, t5 + -29);
      t1 = dst.buffer;
      t6 = dst.offset;
      if (typeof t6 !== "number")
        return t6.$add();
      t6 = J.$index$asx(t1, t6 + -28);
      t1 = dst.buffer;
      t7 = dst.offset;
      if (typeof t7 !== "number")
        return t7.$add();
      t7 = J.$index$asx(t1, t7 + -27);
      t1 = dst.buffer;
      t8 = dst.offset;
      if (typeof t8 !== "number")
        return t8.$add();
      t8 = J.$index$asx(t1, t8 + -26);
      t1 = dst.buffer;
      t9 = dst.offset;
      if (typeof t9 !== "number")
        return t9.$add();
      t9 = J.$index$asx(t1, t9 + -25);
      if (typeof t2 !== "number")
        return t2.$add();
      if (typeof t3 !== "number")
        return H.iae(t3);
      dst.$indexSet(0, 0, C.JSInt_methods.toSigned$1(C.JSInt_methods._shrOtherPositive$1(t2 + t3 + 1, 1), 32));
      if (typeof t4 !== "number")
        return H.iae(t4);
      t1 = C.JSInt_methods.toSigned$1(C.JSInt_methods._shrOtherPositive$1(t3 + t4 + 1, 1), 32);
      dst.$indexSet(0, 64, t1);
      dst.$indexSet(0, 1, t1);
      if (typeof t5 !== "number")
        return H.iae(t5);
      t1 = C.JSInt_methods.toSigned$1(C.JSInt_methods._shrOtherPositive$1(t4 + t5 + 1, 1), 32);
      dst.$indexSet(0, 65, t1);
      dst.$indexSet(0, 2, t1);
      if (typeof t6 !== "number")
        return H.iae(t6);
      t1 = C.JSInt_methods.toSigned$1(C.JSInt_methods._shrOtherPositive$1(t5 + t6 + 1, 1), 32);
      dst.$indexSet(0, 66, t1);
      dst.$indexSet(0, 3, t1);
      dst.$indexSet(0, 32, V.VP8Filter_AVG3(t2, t3, t4));
      t3 = V.VP8Filter_AVG3(t3, t4, t5);
      dst.$indexSet(0, 96, t3);
      dst.$indexSet(0, 33, t3);
      t4 = V.VP8Filter_AVG3(t4, t5, t6);
      dst.$indexSet(0, 97, t4);
      dst.$indexSet(0, 34, t4);
      t5 = V.VP8Filter_AVG3(t5, t6, t7);
      dst.$indexSet(0, 98, t5);
      dst.$indexSet(0, 35, t5);
      dst.$indexSet(0, 67, V.VP8Filter_AVG3(t6, t7, t8));
      dst.$indexSet(0, 99, V.VP8Filter_AVG3(t7, t8, t9));
    },
    VP8Filter_HU4: function(dst) {
      var t3, t4, t5,
        t1 = dst.buffer,
        t2 = dst.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      t2 = J.$index$asx(t1, t2 + -1);
      t1 = dst.buffer;
      t3 = dst.offset;
      if (typeof t3 !== "number")
        return t3.$add();
      t3 = J.$index$asx(t1, t3 + 31);
      t1 = dst.buffer;
      t4 = dst.offset;
      if (typeof t4 !== "number")
        return t4.$add();
      t4 = J.$index$asx(t1, t4 + 63);
      t1 = dst.buffer;
      t5 = dst.offset;
      if (typeof t5 !== "number")
        return t5.$add();
      t5 = J.$index$asx(t1, t5 + 95);
      if (typeof t2 !== "number")
        return t2.$add();
      if (typeof t3 !== "number")
        return H.iae(t3);
      dst.$indexSet(0, 0, C.JSInt_methods.toSigned$1(C.JSInt_methods._shrOtherPositive$1(t2 + t3 + 1, 1), 32));
      if (typeof t4 !== "number")
        return H.iae(t4);
      t1 = C.JSInt_methods.toSigned$1(C.JSInt_methods._shrOtherPositive$1(t3 + t4 + 1, 1), 32);
      dst.$indexSet(0, 32, t1);
      dst.$indexSet(0, 2, t1);
      if (typeof t5 !== "number")
        return H.iae(t5);
      t1 = C.JSInt_methods.toSigned$1(C.JSInt_methods._shrOtherPositive$1(t4 + t5 + 1, 1), 32);
      dst.$indexSet(0, 64, t1);
      dst.$indexSet(0, 34, t1);
      dst.$indexSet(0, 1, V.VP8Filter_AVG3(t2, t3, t4));
      t3 = V.VP8Filter_AVG3(t3, t4, t5);
      dst.$indexSet(0, 33, t3);
      dst.$indexSet(0, 3, t3);
      t4 = V.VP8Filter_AVG3(t4, t5, t5);
      dst.$indexSet(0, 65, t4);
      dst.$indexSet(0, 35, t4);
      dst.$indexSet(0, 99, t5);
      dst.$indexSet(0, 98, t5);
      dst.$indexSet(0, 97, t5);
      dst.$indexSet(0, 96, t5);
      dst.$indexSet(0, 66, t5);
      dst.$indexSet(0, 67, t5);
    },
    VP8Filter_HD4: function(dst) {
      var t3, t4, t5, t6, t7, t8, t9,
        t1 = dst.buffer,
        t2 = dst.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      t2 = J.$index$asx(t1, t2 + -1);
      t1 = dst.buffer;
      t3 = dst.offset;
      if (typeof t3 !== "number")
        return t3.$add();
      t3 = J.$index$asx(t1, t3 + 31);
      t1 = dst.buffer;
      t4 = dst.offset;
      if (typeof t4 !== "number")
        return t4.$add();
      t4 = J.$index$asx(t1, t4 + 63);
      t1 = dst.buffer;
      t5 = dst.offset;
      if (typeof t5 !== "number")
        return t5.$add();
      t5 = J.$index$asx(t1, t5 + 95);
      t1 = dst.buffer;
      t6 = dst.offset;
      if (typeof t6 !== "number")
        return t6.$add();
      t6 = J.$index$asx(t1, t6 + -33);
      t1 = dst.buffer;
      t7 = dst.offset;
      if (typeof t7 !== "number")
        return t7.$add();
      t7 = J.$index$asx(t1, t7 + -32);
      t1 = dst.buffer;
      t8 = dst.offset;
      if (typeof t8 !== "number")
        return t8.$add();
      t8 = J.$index$asx(t1, t8 + -31);
      t1 = dst.buffer;
      t9 = dst.offset;
      if (typeof t9 !== "number")
        return t9.$add();
      t9 = J.$index$asx(t1, t9 + -30);
      if (typeof t2 !== "number")
        return t2.$add();
      if (typeof t6 !== "number")
        return H.iae(t6);
      t1 = C.JSInt_methods.toSigned$1(C.JSInt_methods._shrOtherPositive$1(t2 + t6 + 1, 1), 32);
      dst.$indexSet(0, 34, t1);
      dst.$indexSet(0, 0, t1);
      if (typeof t3 !== "number")
        return t3.$add();
      t1 = C.JSInt_methods.toSigned$1(C.JSInt_methods._shrOtherPositive$1(t3 + t2 + 1, 1), 32);
      dst.$indexSet(0, 66, t1);
      dst.$indexSet(0, 32, t1);
      if (typeof t4 !== "number")
        return t4.$add();
      t1 = C.JSInt_methods.toSigned$1(C.JSInt_methods._shrOtherPositive$1(t4 + t3 + 1, 1), 32);
      dst.$indexSet(0, 98, t1);
      dst.$indexSet(0, 64, t1);
      if (typeof t5 !== "number")
        return t5.$add();
      dst.$indexSet(0, 96, C.JSInt_methods.toSigned$1(C.JSInt_methods._shrOtherPositive$1(t5 + t4 + 1, 1), 32));
      dst.$indexSet(0, 3, V.VP8Filter_AVG3(t7, t8, t9));
      dst.$indexSet(0, 2, V.VP8Filter_AVG3(t6, t7, t8));
      t7 = V.VP8Filter_AVG3(t2, t6, t7);
      dst.$indexSet(0, 35, t7);
      dst.$indexSet(0, 1, t7);
      t6 = V.VP8Filter_AVG3(t3, t2, t6);
      dst.$indexSet(0, 67, t6);
      dst.$indexSet(0, 33, t6);
      t2 = V.VP8Filter_AVG3(t4, t3, t2);
      dst.$indexSet(0, 99, t2);
      dst.$indexSet(0, 65, t2);
      dst.$indexSet(0, 97, V.VP8Filter_AVG3(t5, t4, t3));
    },
    VP8Filter_VE16: function(dst) {
      var j;
      for (j = 0; j < 16; ++j)
        dst.memcpy$4(j * 32, 16, dst, -32);
    },
    VP8Filter_HE16: function(dst) {
      var di, j, t1, t2, t3;
      for (di = 0, j = 16; j > 0; --j) {
        t1 = dst.buffer;
        t2 = dst.offset;
        if (typeof t2 !== "number")
          return t2.$add();
        t2 = J.$index$asx(t1, t2 + (di - 1));
        t1 = dst.buffer;
        t3 = dst.offset;
        if (typeof t3 !== "number")
          return t3.$add();
        t3 += di;
        J.fillRange$3$ax(t1, t3, t3 + 16, t2);
        di += 32;
      }
    },
    VP8Filter_Put16: function(v, dst) {
      var j, t1, t2;
      for (j = 0; j < 16; ++j) {
        t1 = dst.buffer;
        t2 = dst.offset;
        if (typeof t2 !== "number")
          return t2.$add();
        t2 += j * 32;
        J.fillRange$3$ax(t1, t2, t2 + 16, v);
      }
    },
    VP8Filter_DC16: function(dst) {
      var DC, j, t1, t2, t3;
      for (DC = 16, j = 0; j < 16; ++j) {
        t1 = dst.buffer;
        t2 = dst.offset;
        if (typeof t2 !== "number")
          return t2.$add();
        t2 = J.$index$asx(t1, t2 + (-1 + j * 32));
        t1 = dst.buffer;
        t3 = dst.offset;
        if (typeof t3 !== "number")
          return t3.$add();
        t3 = J.$index$asx(t1, t3 + (j - 32));
        if (typeof t2 !== "number")
          return t2.$add();
        if (typeof t3 !== "number")
          return H.iae(t3);
        DC += t2 + t3;
      }
      V.VP8Filter_Put16(C.JSInt_methods._shrOtherPositive$1(DC, 5), dst);
    },
    VP8Filter_DC16NoTop: function(dst) {
      var DC, j, t1, t2;
      for (DC = 8, j = 0; j < 16; ++j) {
        t1 = dst.buffer;
        t2 = dst.offset;
        if (typeof t2 !== "number")
          return t2.$add();
        t2 = J.$index$asx(t1, t2 + (-1 + j * 32));
        if (typeof t2 !== "number")
          return H.iae(t2);
        DC += t2;
      }
      V.VP8Filter_Put16(C.JSInt_methods._shrOtherPositive$1(DC, 4), dst);
    },
    VP8Filter_DC16NoLeft: function(dst) {
      var DC, i, t1, t2;
      for (DC = 8, i = 0; i < 16; ++i) {
        t1 = dst.buffer;
        t2 = dst.offset;
        if (typeof t2 !== "number")
          return t2.$add();
        t2 = J.$index$asx(t1, t2 + (i - 32));
        if (typeof t2 !== "number")
          return H.iae(t2);
        DC += t2;
      }
      V.VP8Filter_Put16(C.JSInt_methods._shrOtherPositive$1(DC, 4), dst);
    },
    VP8Filter_DC16NoTopLeft: function(dst) {
      V.VP8Filter_Put16(128, dst);
    },
    VP8Filter_VE8uv: function(dst) {
      var j;
      for (j = 0; j < 8; ++j)
        dst.memcpy$4(j * 32, 8, dst, -32);
    },
    VP8Filter_HE8uv: function(dst) {
      var di, j, t1, t2, t3;
      for (di = 0, j = 0; j < 8; ++j) {
        t1 = dst.buffer;
        t2 = dst.offset;
        if (typeof t2 !== "number")
          return t2.$add();
        t2 = J.$index$asx(t1, t2 + (di - 1));
        t1 = dst.buffer;
        t3 = dst.offset;
        if (typeof t3 !== "number")
          return t3.$add();
        t3 += di;
        J.fillRange$3$ax(t1, t3, t3 + 8, t2);
        di += 32;
      }
    },
    VP8Filter_Put8x8uv: function(value, dst) {
      var j, t1, t2;
      for (j = 0; j < 8; ++j) {
        t1 = dst.buffer;
        t2 = dst.offset;
        if (typeof t2 !== "number")
          return t2.$add();
        t2 += j * 32;
        J.fillRange$3$ax(t1, t2, t2 + 8, value);
      }
    },
    VP8Filter_DC8uv: function(dst) {
      var dc0, i, t1, t2, t3;
      for (dc0 = 8, i = 0; i < 8; ++i) {
        t1 = dst.buffer;
        t2 = dst.offset;
        if (typeof t2 !== "number")
          return t2.$add();
        t2 = J.$index$asx(t1, t2 + (i - 32));
        t1 = dst.buffer;
        t3 = dst.offset;
        if (typeof t3 !== "number")
          return t3.$add();
        t3 = J.$index$asx(t1, t3 + (-1 + i * 32));
        if (typeof t2 !== "number")
          return t2.$add();
        if (typeof t3 !== "number")
          return H.iae(t3);
        dc0 += t2 + t3;
      }
      V.VP8Filter_Put8x8uv(C.JSInt_methods._shrOtherPositive$1(dc0, 4), dst);
    },
    VP8Filter_DC8uvNoLeft: function(dst) {
      var dc0, i, t1, t2;
      for (dc0 = 4, i = 0; i < 8; ++i) {
        t1 = dst.buffer;
        t2 = dst.offset;
        if (typeof t2 !== "number")
          return t2.$add();
        t2 = J.$index$asx(t1, t2 + (i - 32));
        if (typeof t2 !== "number")
          return H.iae(t2);
        dc0 += t2;
      }
      V.VP8Filter_Put8x8uv(C.JSInt_methods._shrOtherPositive$1(dc0, 3), dst);
    },
    VP8Filter_DC8uvNoTop: function(dst) {
      var dc0, i, t1, t2;
      for (dc0 = 4, i = 0; i < 8; ++i) {
        t1 = dst.buffer;
        t2 = dst.offset;
        if (typeof t2 !== "number")
          return t2.$add();
        t2 = J.$index$asx(t1, t2 + (-1 + i * 32));
        if (typeof t2 !== "number")
          return H.iae(t2);
        dc0 += t2;
      }
      V.VP8Filter_Put8x8uv(C.JSInt_methods._shrOtherPositive$1(dc0, 3), dst);
    },
    VP8Filter_DC8uvNoTopLeft: function(dst) {
      V.VP8Filter_Put8x8uv(128, dst);
    },
    VP8Filter__store: function(dst, di, x, y, v) {
      var t1 = di + x + y * 32,
        t2 = dst.buffer,
        t3 = dst.offset;
      if (typeof t3 !== "number")
        return t3.$add();
      t3 = J.$index$asx(t2, t3 + t1);
      t2 = C.JSInt_methods._shrOtherPositive$1(v, 3);
      if (typeof t3 !== "number")
        return t3.$add();
      t2 = t3 + t2;
      if (!((t2 & -256) >>> 0 === 0))
        t2 = t2 < 0 ? 0 : 255;
      dst.$indexSet(0, t1, t2);
    },
    VP8Filter__store2: function(dst, y, dc, d, c) {
      V.VP8Filter__store(dst, 0, 0, y, dc + d);
      V.VP8Filter__store(dst, 0, 1, y, dc + c);
      V.VP8Filter__store(dst, 0, 2, y, dc - c);
      V.VP8Filter__store(dst, 0, 3, y, dc - d);
    },
    VP8Filter__initTables: function() {
      var i, t1, t2;
      if (!$.VP8Filter__tablesInitialized) {
        for (i = -255; i <= 255; ++i) {
          t1 = $.$get$VP8Filter_abs0();
          t2 = 255 + i;
          t1[t2] = i < 0 ? -i : i;
          $.$get$VP8Filter_abs1()[t2] = C.JSInt_methods._shrOtherPositive$1(t1[t2], 1);
        }
        for (i = -1020; i <= 1020; ++i) {
          t1 = $.$get$VP8Filter_sclip1();
          if (i < -128)
            t2 = -128;
          else
            t2 = i > 127 ? 127 : i;
          t1[1020 + i] = t2;
        }
        for (i = -112; i <= 112; ++i) {
          t1 = $.$get$VP8Filter_sclip2();
          if (i < -16)
            t2 = -16;
          else
            t2 = i > 15 ? 15 : i;
          t1[112 + i] = t2;
        }
        for (i = -255; i <= 510; ++i) {
          t1 = $.$get$VP8Filter_clip1();
          if (i < 0)
            t2 = 0;
          else
            t2 = i > 255 ? 255 : i;
          t1[255 + i] = t2;
        }
        $.VP8Filter__tablesInitialized = true;
      }
    },
    VP8Filter: function VP8Filter() {
    }
  },
  N = {PsdOuterGlowEffect: function PsdOuterGlowEffect() {
      this.version = null;
    }, PsdChannel: function PsdChannel(t0) {
      this.id = t0;
      this.data = null;
    }, TiffDecoder: function TiffDecoder() {
    },
    flipVertical: function(src) {
      var t1, t2, t3, t4, y, y1, y2, x, t5, t, t6,
        w = src.width,
        h = src.height;
      if (typeof h !== "number")
        return h.$tdiv();
      t1 = C.JSInt_methods._tdivFast$1(h, 2);
      for (t2 = src.data, t3 = t2.length, t4 = h - 1, y = 0; y < t1; ++y) {
        if (typeof w !== "number")
          return H.iae(w);
        y1 = y * w;
        y2 = (t4 - y) * w;
        for (x = 0; x < w; ++x) {
          t5 = y2 + x;
          if (t5 < 0 || t5 >= t3)
            return H.ioore(t2, t5);
          t = t2[t5];
          t6 = y1 + x;
          if (t6 < 0 || t6 >= t3)
            return H.ioore(t2, t6);
          t2[t5] = t2[t6];
          t2[t6] = t;
        }
      }
      return src;
    },
    flipHorizontal: function(src) {
      var t1, t2, t3, y, y1, t4, x, t5, t, t6,
        w = src.width,
        h = src.height;
      if (typeof w !== "number")
        return w.$tdiv();
      t1 = C.JSInt_methods._tdivFast$1(w, 2);
      if (typeof h !== "number")
        return H.iae(h);
      t2 = src.data;
      t3 = t2.length;
      y = 0;
      for (; y < h; ++y) {
        y1 = y * w;
        for (t4 = w - 1, x = 0; x < t1; ++x) {
          t5 = y1 + (t4 - x);
          if (t5 < 0 || t5 >= t3)
            return H.ioore(t2, t5);
          t = t2[t5];
          t6 = y1 + x;
          if (t6 < 0 || t6 >= t3)
            return H.ioore(t2, t6);
          t2[t5] = t2[t6];
          t2[t6] = t;
        }
      }
      return src;
    },
    Flip: function Flip(t0) {
      this._flip$_name = t0;
    },
    findDecoderForData: function(data) {
      var png, gif, webp, tiff, tga, ico, t1, _null = null,
        bytes = type$.legacy_Uint8List._is(data) ? data : new Uint8Array(H._ensureNativeList(data));
      type$.legacy_List_legacy_int._as(bytes);
      if (Y.JpegData$().validate$1(bytes))
        return new Z.JpegDecoder();
      png = new G.PngDecoder();
      if (png.isValidFile$1(bytes))
        return png;
      gif = new F.GifDecoder();
      gif._input = Z.InputBuffer$(bytes, false, _null, 0);
      gif.info = new K.GifInfo(H.setRuntimeTypeInfo([], type$.JSArray_legacy_GifImageDesc));
      if (gif._getInfo$0())
        return gif;
      webp = new E.WebPDecoder();
      if (webp.isValidFile$1(bytes))
        return webp;
      tiff = new N.TiffDecoder();
      if (tiff._readHeader$1(Z.InputBuffer$(bytes, false, _null, 0)) != null)
        return tiff;
      if (L.PsdImage$(bytes).signature === 943870035)
        return new V.PsdDecoder();
      if (Y.ExrImage_isValidFile(bytes))
        return new U.ExrDecoder();
      if (L.BitmapFileHeader_isValidFile(Z.InputBuffer$(bytes, false, _null, 0)))
        return new E.BmpDecoder();
      tga = new B.TgaDecoder();
      if (tga.isValidFile$1(bytes))
        return tga;
      ico = new X.IcoDecoder();
      t1 = Z.InputBuffer$(bytes, false, _null, 0);
      ico._ico_decoder$_input = t1;
      t1 = X.IcoInfo__read(t1);
      ico._icoInfo = t1;
      if (t1 != null)
        return ico;
      return _null;
    },
    decodeImage: function(data) {
      var decoder = N.findDecoderForData(data);
      if (decoder == null)
        return null;
      return decoder.decodeImage$1(data);
    },
    WebPFilters_horizontalUnfilter: function(width, height, stride, row, numRows, data) {
      N.WebPFilters__doHorizontalFilter(data, width, height, stride, row, numRows, true, data);
    },
    WebPFilters_verticalUnfilter: function(width, height, stride, row, num_rows, data) {
      N.WebPFilters__doVerticalFilter(data, width, height, stride, row, num_rows, true, data);
    },
    WebPFilters_gradientUnfilter: function(width, height, stride, row, num_rows, data) {
      N.WebPFilters__doGradientFilter(data, width, height, stride, row, num_rows, true, data);
    },
    WebPFilters__predictLine: function(src, pred, dst, $length, inverse) {
      var i, t1, t2, t3, t4;
      for (i = 0; i < $length; ++i) {
        t1 = src.buffer;
        t2 = src.offset;
        if (typeof t2 !== "number")
          return t2.$add();
        t2 = J.$index$asx(t1, t2 + i);
        t1 = pred.buffer;
        t3 = pred.offset;
        if (typeof t3 !== "number")
          return t3.$add();
        t3 = J.$index$asx(t1, t3 + i);
        if (typeof t2 !== "number")
          return t2.$add();
        if (typeof t3 !== "number")
          return H.iae(t3);
        t1 = dst.buffer;
        t4 = dst.offset;
        if (typeof t4 !== "number")
          return t4.$add();
        J.$indexSet$ax(t1, t4 + i, t2 + t3);
      }
    },
    WebPFilters__doHorizontalFilter: function(src, width, height, stride, row, numRows, inverse, out) {
      var t1, t2, t3, _null = null,
        startOffset = row * stride,
        lastRow = row + numRows,
        s = Z.InputBuffer$(src, false, _null, startOffset),
        o = Z.InputBuffer$(src, false, _null, startOffset),
        preds = Z.InputBuffer$from(o, _null, 0);
      if (row === 0) {
        t1 = s.buffer;
        t2 = s.offset;
        if (typeof t2 !== "number")
          return t2.$add();
        o.$indexSet(0, 0, J.$index$asx(t1, t2));
        N.WebPFilters__predictLine(Z.InputBuffer$from(s, _null, 1), preds, Z.InputBuffer$from(o, _null, 1), width - 1, true);
        t2 = preds.offset;
        if (typeof t2 !== "number")
          return t2.$add();
        preds.offset = t2 + stride;
        t2 = s.offset;
        if (typeof t2 !== "number")
          return t2.$add();
        s.offset = t2 + stride;
        t2 = o.offset;
        if (typeof t2 !== "number")
          return t2.$add();
        o.offset = t2 + stride;
        row = 1;
      }
      for (t1 = -stride, t2 = width - 1; row < lastRow;) {
        N.WebPFilters__predictLine(s, Z.InputBuffer$from(preds, _null, t1), o, 1, true);
        N.WebPFilters__predictLine(Z.InputBuffer$from(s, _null, 1), preds, Z.InputBuffer$from(o, _null, 1), t2, true);
        ++row;
        t3 = preds.offset;
        if (typeof t3 !== "number")
          return t3.$add();
        preds.offset = t3 + stride;
        t3 = s.offset;
        if (typeof t3 !== "number")
          return t3.$add();
        s.offset = t3 + stride;
        t3 = o.offset;
        if (typeof t3 !== "number")
          return t3.$add();
        o.offset = t3 + stride;
      }
    },
    WebPFilters__doVerticalFilter: function(src, width, height, stride, row, numRows, inverse, out) {
      var t1, t2, _null = null,
        startOffset = row * stride,
        last_row = row + numRows,
        s = Z.InputBuffer$(src, false, _null, startOffset),
        o = Z.InputBuffer$(out, false, _null, startOffset),
        preds = Z.InputBuffer$from(o, _null, 0);
      if (row === 0) {
        t1 = s.buffer;
        t2 = s.offset;
        if (typeof t2 !== "number")
          return t2.$add();
        o.$indexSet(0, 0, J.$index$asx(t1, t2));
        N.WebPFilters__predictLine(Z.InputBuffer$from(s, _null, 1), preds, Z.InputBuffer$from(o, _null, 1), width - 1, true);
        t2 = s.offset;
        if (typeof t2 !== "number")
          return t2.$add();
        s.offset = t2 + stride;
        t2 = o.offset;
        if (typeof t2 !== "number")
          return t2.$add();
        o.offset = t2 + stride;
        row = 1;
      } else {
        t1 = preds.offset;
        if (typeof t1 !== "number")
          return t1.$sub();
        preds.offset = t1 - stride;
      }
      for (; row < last_row;) {
        N.WebPFilters__predictLine(s, preds, o, width, true);
        ++row;
        t1 = preds.offset;
        if (typeof t1 !== "number")
          return t1.$add();
        preds.offset = t1 + stride;
        t1 = s.offset;
        if (typeof t1 !== "number")
          return t1.$add();
        s.offset = t1 + stride;
        t1 = o.offset;
        if (typeof t1 !== "number")
          return t1.$add();
        o.offset = t1 + stride;
      }
    },
    WebPFilters__doGradientFilter: function(src, width, height, stride, row, numRows, inverse, out) {
      var t1, t2, w, t3, t4, t5, t6, g, pred, _null = null,
        startOffset = row * stride,
        lastRow = row + numRows,
        s = Z.InputBuffer$(src, false, _null, startOffset),
        o = Z.InputBuffer$(out, false, _null, startOffset),
        preds = Z.InputBuffer$from(o, _null, 0);
      if (row === 0) {
        t1 = s.buffer;
        t2 = s.offset;
        if (typeof t2 !== "number")
          return t2.$add();
        o.$indexSet(0, 0, J.$index$asx(t1, t2));
        N.WebPFilters__predictLine(Z.InputBuffer$from(s, _null, 1), preds, Z.InputBuffer$from(o, _null, 1), width - 1, true);
        t2 = preds.offset;
        if (typeof t2 !== "number")
          return t2.$add();
        preds.offset = t2 + stride;
        t2 = s.offset;
        if (typeof t2 !== "number")
          return t2.$add();
        s.offset = t2 + stride;
        t2 = o.offset;
        if (typeof t2 !== "number")
          return t2.$add();
        o.offset = t2 + stride;
        row = 1;
      }
      for (t1 = -stride; row < lastRow;) {
        N.WebPFilters__predictLine(s, Z.InputBuffer$from(preds, _null, t1), o, 1, true);
        for (w = 1; w < width; ++w) {
          t2 = preds.buffer;
          t3 = preds.offset;
          if (typeof t3 !== "number")
            return t3.$add();
          t3 = J.$index$asx(t2, t3 + (w - 1));
          t2 = w - stride;
          t4 = preds.buffer;
          t5 = preds.offset;
          if (typeof t5 !== "number")
            return t5.$add();
          t5 = J.$index$asx(t4, t5 + t2);
          t4 = preds.buffer;
          t6 = preds.offset;
          if (typeof t6 !== "number")
            return t6.$add();
          t2 = J.$index$asx(t4, t6 + (t2 - 1));
          if (typeof t3 !== "number")
            return t3.$add();
          if (typeof t5 !== "number")
            return H.iae(t5);
          if (typeof t2 !== "number")
            return H.iae(t2);
          g = t3 + t5 - t2;
          if ((g & 4294967040) >>> 0 === 0)
            pred = g;
          else
            pred = g < 0 ? 0 : 255;
          t2 = s.buffer;
          t3 = s.offset;
          if (typeof t3 !== "number")
            return t3.$add();
          t3 = J.$index$asx(t2, t3 + w);
          if (typeof t3 !== "number")
            return t3.$add();
          t2 = o.buffer;
          t4 = o.offset;
          if (typeof t4 !== "number")
            return t4.$add();
          J.$indexSet$ax(t2, t4 + w, t3 + pred);
        }
        ++row;
        t2 = preds.offset;
        if (typeof t2 !== "number")
          return t2.$add();
        preds.offset = t2 + stride;
        t2 = s.offset;
        if (typeof t2 !== "number")
          return t2.$add();
        s.offset = t2 + stride;
        t2 = o.offset;
        if (typeof t2 !== "number")
          return t2.$add();
        o.offset = t2 + stride;
      }
    }
  };
  var holders = [C, H, J, P, W, R, T, Q, G, Y, S, Z, L, E, A, B, U, D, O, M, K, F, X, V, N];
  hunkHelpers.setFunctionNamesIfNecessary(holders);
  var $ = {};
  H.JS_CONST.prototype = {};
  J.Interceptor.prototype = {
    $eq: function(receiver, other) {
      return receiver === other;
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    toString$0: function(receiver) {
      return "Instance of '" + H.S(H.Primitives_objectTypeName(receiver)) + "'";
    }
  };
  J.JSBool.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    },
    get$hashCode: function(receiver) {
      return receiver ? 519018 : 218159;
    },
    $isbool: 1
  };
  J.JSNull.prototype = {
    $eq: function(receiver, other) {
      return null == other;
    },
    toString$0: function(receiver) {
      return "null";
    },
    get$hashCode: function(receiver) {
      return 0;
    },
    $isNull: 1
  };
  J.JavaScriptObject.prototype = {
    get$hashCode: function(receiver) {
      return 0;
    },
    toString$0: function(receiver) {
      return String(receiver);
    },
    $isJSObject: 1
  };
  J.PlainJavaScriptObject.prototype = {};
  J.UnknownJavaScriptObject.prototype = {};
  J.JavaScriptFunction.prototype = {
    toString$0: function(receiver) {
      var dartClosure = receiver[$.$get$DART_CLOSURE_PROPERTY_NAME()];
      if (dartClosure == null)
        return this.super$JavaScriptObject$toString(receiver);
      return "JavaScript function for " + H.S(J.toString$0$(dartClosure));
    },
    $isFunction: 1
  };
  J.JSArray.prototype = {
    add$1: function(receiver, value) {
      H._arrayInstanceType(receiver)._precomputed1._as(value);
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("add"));
      receiver.push(value);
    },
    addAll$1: function(receiver, collection) {
      var t1, _i;
      H._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(collection);
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("addAll"));
      for (t1 = collection.length, _i = 0; _i < t1; ++_i)
        receiver.push(collection[_i]);
    },
    skip$1: function(receiver, n) {
      return H.SubListIterable$(receiver, n, null, H._arrayInstanceType(receiver)._precomputed1);
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      if (start < 0 || start > receiver.length)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length, "start", null));
      if (end < start || end > receiver.length)
        throw H.wrapException(P.RangeError$range(end, start, receiver.length, "end", null));
      if (start === end)
        return H.setRuntimeTypeInfo([], H._arrayInstanceType(receiver));
      return H.setRuntimeTypeInfo(receiver.slice(start, end), H._arrayInstanceType(receiver));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(H.IterableElementError_noElement());
    },
    get$last: function(receiver) {
      var t1 = receiver.length;
      if (t1 > 0)
        return receiver[t1 - 1];
      throw H.wrapException(H.IterableElementError_noElement());
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      var $length, otherList, otherStart, t1, i;
      H._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(iterable);
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("setRange"));
      P.RangeError_checkValidRange(start, end, receiver.length);
      $length = end - start;
      if ($length === 0)
        return;
      P.RangeError_checkNotNegative(skipCount, "skipCount");
      if (type$.List_dynamic._is(iterable)) {
        otherList = iterable;
        otherStart = skipCount;
      } else {
        otherList = J.skip$1$ax(iterable, skipCount).toList$1$growable(0, false);
        otherStart = 0;
      }
      t1 = J.getInterceptor$asx(otherList);
      if (otherStart + $length > t1.get$length(otherList))
        throw H.wrapException(H.IterableElementError_tooFew());
      if (otherStart < start)
        for (i = $length - 1; i >= 0; --i)
          receiver[start + i] = t1.$index(otherList, otherStart + i);
      else
        for (i = 0; i < $length; ++i)
          receiver[start + i] = t1.$index(otherList, otherStart + i);
    },
    fillRange$3: function(receiver, start, end, fillValue) {
      var i;
      H._arrayInstanceType(receiver)._eval$1("1?")._as(fillValue);
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("fill range"));
      P.RangeError_checkValidRange(start, end, receiver.length);
      for (i = start; i < end; ++i)
        receiver[i] = fillValue;
    },
    contains$1: function(receiver, other) {
      var i;
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq$(receiver[i], other))
          return true;
      return false;
    },
    get$isEmpty: function(receiver) {
      return receiver.length === 0;
    },
    get$isNotEmpty: function(receiver) {
      return receiver.length !== 0;
    },
    toString$0: function(receiver) {
      return P.IterableBase_iterableToFullString(receiver, "[", "]");
    },
    get$iterator: function(receiver) {
      return new J.ArrayIterator(receiver, receiver.length, H._arrayInstanceType(receiver)._eval$1("ArrayIterator<1>"));
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    set$length: function(receiver, newLength) {
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("set length"));
      if (newLength < 0)
        throw H.wrapException(P.RangeError$range(newLength, 0, null, "newLength", null));
      receiver.length = newLength;
    },
    $index: function(receiver, index) {
      if (!H._isInt(index))
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H._asIntS(index);
      H._arrayInstanceType(receiver)._precomputed1._as(value);
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("indexed set"));
      if (!H._isInt(index))
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      receiver[index] = value;
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  J.JSUnmodifiableArray.prototype = {};
  J.ArrayIterator.prototype = {
    get$current: function() {
      return this._current;
    },
    moveNext$0: function() {
      var t2, _this = this,
        t1 = _this._iterable,
        $length = t1.length;
      if (_this._length !== $length)
        throw H.wrapException(H.throwConcurrentModificationError(t1));
      t2 = _this._index;
      if (t2 >= $length) {
        _this.set$_current(null);
        return false;
      }
      _this.set$_current(t1[t2]);
      ++_this._index;
      return true;
    },
    set$_current: function(_current) {
      this._current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  J.JSNumber.prototype = {
    compareTo$1: function(receiver, b) {
      var bIsNegative;
      if (receiver < b)
        return -1;
      else if (receiver > b)
        return 1;
      else if (receiver === b) {
        if (receiver === 0) {
          bIsNegative = C.JSInt_methods.get$isNegative(b);
          if (this.get$isNegative(receiver) === bIsNegative)
            return 0;
          if (this.get$isNegative(receiver))
            return -1;
          return 1;
        }
        return 0;
      } else if (isNaN(receiver)) {
        if (isNaN(b))
          return 0;
        return 1;
      } else
        return -1;
    },
    get$isNegative: function(receiver) {
      return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
    },
    toInt$0: function(receiver) {
      var t1;
      if (receiver >= -2147483648 && receiver <= 2147483647)
        return receiver | 0;
      if (isFinite(receiver)) {
        t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
        return t1 + 0;
      }
      throw H.wrapException(P.UnsupportedError$("" + receiver + ".toInt()"));
    },
    ceil$0: function(receiver) {
      var truncated, d;
      if (receiver >= 0) {
        if (receiver <= 2147483647) {
          truncated = receiver | 0;
          return receiver === truncated ? truncated : truncated + 1;
        }
      } else if (receiver >= -2147483648)
        return receiver | 0;
      d = Math.ceil(receiver);
      if (isFinite(d))
        return d;
      throw H.wrapException(P.UnsupportedError$("" + receiver + ".ceil()"));
    },
    floor$0: function(receiver) {
      var truncated, d;
      if (receiver >= 0) {
        if (receiver <= 2147483647)
          return receiver | 0;
      } else if (receiver >= -2147483648) {
        truncated = receiver | 0;
        return receiver === truncated ? truncated : truncated - 1;
      }
      d = Math.floor(receiver);
      if (isFinite(d))
        return d;
      throw H.wrapException(P.UnsupportedError$("" + receiver + ".floor()"));
    },
    round$0: function(receiver) {
      if (receiver > 0) {
        if (receiver !== 1 / 0)
          return Math.round(receiver);
      } else if (receiver > -1 / 0)
        return 0 - Math.round(0 - receiver);
      throw H.wrapException(P.UnsupportedError$("" + receiver + ".round()"));
    },
    clamp$2: function(receiver, lowerLimit, upperLimit) {
      if (C.JSInt_methods.compareTo$1(lowerLimit, upperLimit) > 0)
        throw H.wrapException(H.argumentErrorValue(lowerLimit));
      if (this.compareTo$1(receiver, lowerLimit) < 0)
        return lowerLimit;
      if (this.compareTo$1(receiver, upperLimit) > 0)
        return upperLimit;
      return receiver;
    },
    toRadixString$1: function(receiver, radix) {
      var result, match, t1, exponent;
      if (radix < 2 || radix > 36)
        throw H.wrapException(P.RangeError$range(radix, 2, 36, "radix", null));
      result = receiver.toString(radix);
      if (C.JSString_methods.codeUnitAt$1(result, result.length - 1) !== 41)
        return result;
      match = /^([\da-z]+)(?:\.([\da-z]+))?\(e\+(\d+)\)$/.exec(result);
      if (match == null)
        H.throwExpression(P.UnsupportedError$("Unexpected toString result: " + result));
      t1 = match.length;
      if (1 >= t1)
        return H.ioore(match, 1);
      result = match[1];
      if (3 >= t1)
        return H.ioore(match, 3);
      exponent = +match[3];
      t1 = match[2];
      if (t1 != null) {
        result += t1;
        exponent -= t1.length;
      }
      return result + C.JSString_methods.$mul("0", exponent);
    },
    toString$0: function(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode: function(receiver) {
      var absolute, floorLog2, factor, scaled,
        intValue = receiver | 0;
      if (receiver === intValue)
        return 536870911 & intValue;
      absolute = Math.abs(receiver);
      floorLog2 = Math.log(absolute) / 0.6931471805599453 | 0;
      factor = Math.pow(2, floorLog2);
      scaled = absolute < 1 ? absolute / factor : factor / absolute;
      return 536870911 & ((scaled * 9007199254740992 | 0) + (scaled * 3542243181176521 | 0)) * 599197 + floorLog2 * 1259;
    },
    $mod: function(receiver, other) {
      var result;
      if (typeof other != "number")
        throw H.wrapException(H.argumentErrorValue(other));
      result = receiver % other;
      if (result === 0)
        return 0;
      if (result > 0)
        return result;
      if (other < 0)
        return result - other;
      else
        return result + other;
    },
    $tdiv: function(receiver, other) {
      if (typeof other != "number")
        throw H.wrapException(H.argumentErrorValue(other));
      if ((receiver | 0) === receiver)
        if (other >= 1 || other < -1)
          return receiver / other | 0;
      return this._tdivSlow$1(receiver, other);
    },
    _tdivFast$1: function(receiver, other) {
      return (receiver | 0) === receiver ? receiver / other | 0 : this._tdivSlow$1(receiver, other);
    },
    _tdivSlow$1: function(receiver, other) {
      var quotient = receiver / other;
      if (quotient >= -2147483648 && quotient <= 2147483647)
        return quotient | 0;
      if (quotient > 0) {
        if (quotient !== 1 / 0)
          return Math.floor(quotient);
      } else if (quotient > -1 / 0)
        return Math.ceil(quotient);
      throw H.wrapException(P.UnsupportedError$("Result of truncating division is " + H.S(quotient) + ": " + H.S(receiver) + " ~/ " + other));
    },
    $shl: function(receiver, other) {
      if (typeof other != "number")
        throw H.wrapException(H.argumentErrorValue(other));
      if (other < 0)
        throw H.wrapException(H.argumentErrorValue(other));
      return other > 31 ? 0 : receiver << other >>> 0;
    },
    _shlPositive$1: function(receiver, other) {
      return other > 31 ? 0 : receiver << other >>> 0;
    },
    $shr: function(receiver, other) {
      var t1;
      if (typeof other != "number")
        throw H.wrapException(H.argumentErrorValue(other));
      if (other < 0)
        throw H.wrapException(H.argumentErrorValue(other));
      if (receiver > 0)
        t1 = this._shrBothPositive$1(receiver, other);
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrOtherPositive$1: function(receiver, other) {
      var t1;
      if (receiver > 0)
        t1 = this._shrBothPositive$1(receiver, other);
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrReceiverPositive$1: function(receiver, other) {
      if (other < 0)
        throw H.wrapException(H.argumentErrorValue(other));
      return this._shrBothPositive$1(receiver, other);
    },
    _shrBothPositive$1: function(receiver, other) {
      return other > 31 ? 0 : receiver >>> other;
    },
    $isdouble: 1,
    $isnum: 1
  };
  J.JSInt.prototype = {
    toSigned$1: function(receiver, width) {
      var signMask = this.$shl(1, width - 1);
      return ((receiver & signMask - 1) >>> 0) - ((receiver & signMask) >>> 0);
    },
    $isint: 1
  };
  J.JSDouble.prototype = {};
  J.JSString.prototype = {
    codeUnitAt$1: function(receiver, index) {
      if (!H._isInt(index))
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      if (index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      if (index >= receiver.length)
        H.throwExpression(H.diagnoseIndexError(receiver, index));
      return receiver.charCodeAt(index);
    },
    _codeUnitAt$1: function(receiver, index) {
      if (index >= receiver.length)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return receiver.charCodeAt(index);
    },
    $add: function(receiver, other) {
      if (typeof other != "string")
        throw H.wrapException(P.ArgumentError$value(other, null, null));
      return receiver + other;
    },
    substring$2: function(receiver, startIndex, endIndex) {
      if (startIndex > endIndex)
        throw H.wrapException(P.RangeError$value(startIndex, null));
      if (endIndex > receiver.length)
        throw H.wrapException(P.RangeError$value(endIndex, null));
      return receiver.substring(startIndex, endIndex);
    },
    $mul: function(receiver, times) {
      var s, result;
      if (0 >= times)
        return "";
      if (times === 1 || receiver.length === 0)
        return receiver;
      if (times !== times >>> 0)
        throw H.wrapException(C.C_OutOfMemoryError);
      for (s = receiver, result = ""; true;) {
        if ((times & 1) === 1)
          result = s + result;
        times = times >>> 1;
        if (times === 0)
          break;
        s += s;
      }
      return result;
    },
    toString$0: function(receiver) {
      return receiver;
    },
    get$hashCode: function(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = 536870911 & hash + receiver.charCodeAt(i);
        hash = 536870911 & hash + ((524287 & hash) << 10);
        hash ^= hash >> 6;
      }
      hash = 536870911 & hash + ((67108863 & hash) << 3);
      hash ^= hash >> 11;
      return 536870911 & hash + ((16383 & hash) << 15);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (!H._isInt(index))
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      if (index >= receiver.length || false)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $isJSIndexable: 1,
    $isString: 1
  };
  H.LateInitializationErrorImpl.prototype = {
    toString$0: function(_) {
      var message = this._message;
      return message != null ? "LateInitializationError: " + message : "LateInitializationError";
    }
  };
  H.CodeUnits.prototype = {
    get$length: function(_) {
      return this._string.length;
    },
    $index: function(_, i) {
      return C.JSString_methods.codeUnitAt$1(this._string, i);
    }
  };
  H.EfficientLengthIterable.prototype = {};
  H.ListIterable.prototype = {
    get$iterator: function(_) {
      var _this = this;
      return new H.ListIterator(_this, _this.get$length(_this), H._instanceType(_this)._eval$1("ListIterator<1>"));
    },
    skip$1: function(_, count) {
      return H.SubListIterable$(this, count, null, H._instanceType(this)._precomputed1);
    },
    toList$1$growable: function(_, growable) {
      return P.List_List$from(this, true, H._instanceType(this)._precomputed1);
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    }
  };
  H.SubListIterable.prototype = {
    get$_endIndex: function() {
      var $length = J.get$length$asx(this.__internal$_iterable),
        endOrLength = this._endOrLength;
      if (endOrLength == null || endOrLength > $length)
        return $length;
      return endOrLength;
    },
    get$_startIndex: function() {
      var $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this._start;
      if (t1 > $length)
        return $length;
      return t1;
    },
    get$length: function(_) {
      var endOrLength,
        $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this._start;
      if (t1 >= $length)
        return 0;
      endOrLength = this._endOrLength;
      if (endOrLength == null || endOrLength >= $length)
        return $length - t1;
      if (typeof endOrLength !== "number")
        return endOrLength.$sub();
      return endOrLength - t1;
    },
    elementAt$1: function(_, index) {
      var _this = this,
        realIndex = _this.get$_startIndex() + index;
      if (index < 0 || realIndex >= _this.get$_endIndex())
        throw H.wrapException(P.IndexError$(index, _this, "index", null, null));
      return J.elementAt$1$ax(_this.__internal$_iterable, realIndex);
    },
    skip$1: function(_, count) {
      var newStart, endOrLength, _this = this;
      P.RangeError_checkNotNegative(count, "count");
      newStart = _this._start + count;
      endOrLength = _this._endOrLength;
      if (endOrLength != null && newStart >= endOrLength)
        return new H.EmptyIterable(_this.$ti._eval$1("EmptyIterable<1>"));
      return H.SubListIterable$(_this.__internal$_iterable, newStart, endOrLength, _this.$ti._precomputed1);
    },
    toList$1$growable: function(_, growable) {
      var $length, result, i, _this = this,
        start = _this._start,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        end = t2.get$length(t1),
        endOrLength = _this._endOrLength;
      if (endOrLength != null && endOrLength < end)
        end = endOrLength;
      if (typeof end !== "number")
        return end.$sub();
      $length = end - start;
      if ($length <= 0) {
        t1 = J.JSArray_JSArray$fixed(0, _this.$ti._precomputed1);
        return t1;
      }
      result = P.List_List$filled($length, t2.elementAt$1(t1, start), false, _this.$ti._precomputed1);
      for (i = 1; i < $length; ++i) {
        C.JSArray_methods.$indexSet(result, i, t2.elementAt$1(t1, start + i));
        if (t2.get$length(t1) < end)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
      }
      return result;
    }
  };
  H.ListIterator.prototype = {
    get$current: function() {
      var cur = this.__internal$_current;
      return cur;
    },
    moveNext$0: function() {
      var t3, _this = this,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        $length = t2.get$length(t1);
      if (_this.__internal$_length !== $length)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      t3 = _this.__internal$_index;
      if (t3 >= $length) {
        _this.set$__internal$_current(null);
        return false;
      }
      _this.set$__internal$_current(t2.elementAt$1(t1, t3));
      ++_this.__internal$_index;
      return true;
    },
    set$__internal$_current: function(_current) {
      this.__internal$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  H.MappedIterable.prototype = {
    get$iterator: function(_) {
      var t1 = H._instanceType(this);
      return new H.MappedIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, t1._eval$1("@<1>")._bind$1(t1._rest[1])._eval$1("MappedIterator<1,2>"));
    },
    get$length: function(_) {
      return J.get$length$asx(this.__internal$_iterable);
    },
    get$first: function(_) {
      return this._f.call$1(J.get$first$ax(this.__internal$_iterable));
    }
  };
  H.EfficientLengthMappedIterable.prototype = {$isEfficientLengthIterable: 1};
  H.MappedIterator.prototype = {
    moveNext$0: function() {
      var _this = this,
        t1 = _this._iterator;
      if (t1.moveNext$0()) {
        _this.set$__internal$_current(_this._f.call$1(t1.get$current()));
        return true;
      }
      _this.set$__internal$_current(null);
      return false;
    },
    get$current: function() {
      var cur = this.__internal$_current;
      return cur;
    },
    set$__internal$_current: function(_current) {
      this.__internal$_current = this.$ti._eval$1("2?")._as(_current);
    }
  };
  H.SkipIterable.prototype = {
    skip$1: function(_, count) {
      P.ArgumentError_checkNotNull(count, "count", type$.int);
      P.RangeError_checkNotNegative(count, "count");
      return new H.SkipIterable(this.__internal$_iterable, this._skipCount + count, H._instanceType(this)._eval$1("SkipIterable<1>"));
    },
    get$iterator: function(_) {
      var t1 = this.__internal$_iterable;
      return new H.SkipIterator(t1.get$iterator(t1), this._skipCount, H._instanceType(this)._eval$1("SkipIterator<1>"));
    }
  };
  H.EfficientLengthSkipIterable.prototype = {
    get$length: function(_) {
      var t1 = this.__internal$_iterable,
        $length = t1.get$length(t1) - this._skipCount;
      if ($length >= 0)
        return $length;
      return 0;
    },
    skip$1: function(_, count) {
      P.ArgumentError_checkNotNull(count, "count", type$.int);
      P.RangeError_checkNotNegative(count, "count");
      return new H.EfficientLengthSkipIterable(this.__internal$_iterable, this._skipCount + count, this.$ti);
    },
    $isEfficientLengthIterable: 1
  };
  H.SkipIterator.prototype = {
    moveNext$0: function() {
      var t1, i;
      for (t1 = this._iterator, i = 0; i < this._skipCount; ++i)
        t1.moveNext$0();
      this._skipCount = 0;
      return t1.moveNext$0();
    },
    get$current: function() {
      return this._iterator.get$current();
    }
  };
  H.EmptyIterable.prototype = {
    get$iterator: function(_) {
      return C.C_EmptyIterator;
    },
    get$length: function(_) {
      return 0;
    },
    skip$1: function(_, count) {
      P.RangeError_checkNotNegative(count, "count");
      return this;
    },
    toList$1$growable: function(_, growable) {
      var t1 = this.$ti._precomputed1;
      return growable ? J.JSArray_JSArray$growable(0, t1) : J.JSArray_JSArray$fixed(0, t1);
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    }
  };
  H.EmptyIterator.prototype = {
    moveNext$0: function() {
      return false;
    },
    get$current: function() {
      throw H.wrapException(H.IterableElementError_noElement());
    },
    $isIterator: 1
  };
  H.FixedLengthListMixin.prototype = {};
  H.UnmodifiableListMixin.prototype = {
    $indexSet: function(_, index, value) {
      H._asIntS(index);
      H._instanceType(this)._eval$1("UnmodifiableListMixin.E")._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    setRange$4: function(_, start, end, iterable, skipCount) {
      H._instanceType(this)._eval$1("Iterable<UnmodifiableListMixin.E>")._as(iterable);
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    fillRange$3: function(_, start, end, fillValue) {
      H._instanceType(this)._eval$1("UnmodifiableListMixin.E?")._as(fillValue);
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    }
  };
  H.UnmodifiableListBase.prototype = {};
  H.ConstantMap.prototype = {
    get$isEmpty: function(_) {
      return this.get$length(this) === 0;
    },
    toString$0: function(_) {
      return P.MapBase_mapToString(this);
    },
    $isMap: 1
  };
  H.GeneralConstantMap.prototype = {
    _getMap$0: function() {
      var t1, _this = this,
        backingMap = _this.$map;
      if (backingMap == null) {
        t1 = _this.$ti;
        backingMap = new H.JsLinkedHashMap(t1._eval$1("@<1>")._bind$1(t1._rest[1])._eval$1("JsLinkedHashMap<1,2>"));
        H.fillLiteralMap(_this._jsData, backingMap);
        _this.$map = backingMap;
      }
      return backingMap;
    },
    containsKey$1: function(key) {
      return this._getMap$0().containsKey$1(key);
    },
    $index: function(_, key) {
      return this._getMap$0().$index(0, key);
    },
    forEach$1: function(_, f) {
      this.$ti._eval$1("~(1,2)")._as(f);
      this._getMap$0().forEach$1(0, f);
    },
    get$length: function(_) {
      var t1 = this._getMap$0();
      return t1.get$length(t1);
    }
  };
  H.TypeErrorDecoder.prototype = {
    matchTypeError$1: function(message) {
      var result, t1, _this = this,
        match = new RegExp(_this._pattern).exec(message);
      if (match == null)
        return null;
      result = Object.create(null);
      t1 = _this._arguments;
      if (t1 !== -1)
        result.arguments = match[t1 + 1];
      t1 = _this._argumentsExpr;
      if (t1 !== -1)
        result.argumentsExpr = match[t1 + 1];
      t1 = _this._expr;
      if (t1 !== -1)
        result.expr = match[t1 + 1];
      t1 = _this._method;
      if (t1 !== -1)
        result.method = match[t1 + 1];
      t1 = _this._receiver;
      if (t1 !== -1)
        result.receiver = match[t1 + 1];
      return result;
    }
  };
  H.NullError.prototype = {
    toString$0: function(_) {
      var t1 = this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + H.S(this.__js_helper$_message);
      return "NoSuchMethodError: method not found: '" + t1 + "' on null";
    }
  };
  H.JsNoSuchMethodError.prototype = {
    toString$0: function(_) {
      var t2, _this = this,
        _s38_ = "NoSuchMethodError: method not found: '",
        t1 = _this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + H.S(_this.__js_helper$_message);
      t2 = _this._receiver;
      if (t2 == null)
        return _s38_ + t1 + "' (" + H.S(_this.__js_helper$_message) + ")";
      return _s38_ + t1 + "' on '" + t2 + "' (" + H.S(_this.__js_helper$_message) + ")";
    }
  };
  H.UnknownJsTypeError.prototype = {
    toString$0: function(_) {
      var t1 = this.__js_helper$_message;
      return t1.length === 0 ? "Error" : "Error: " + t1;
    }
  };
  H.NullThrownFromJavaScriptException.prototype = {
    toString$0: function(_) {
      return "Throw of null ('" + (this._irritant === null ? "null" : "undefined") + "' from JavaScript)";
    }
  };
  H._StackTrace.prototype = {
    toString$0: function(_) {
      var trace,
        t1 = this._trace;
      if (t1 != null)
        return t1;
      t1 = this._exception;
      trace = t1 !== null && typeof t1 === "object" ? t1.stack : null;
      return this._trace = trace == null ? "" : trace;
    },
    $isStackTrace: 1
  };
  H.Closure.prototype = {
    toString$0: function(_) {
      var $constructor = this.constructor,
        $name = $constructor == null ? null : $constructor.name;
      return "Closure '" + H.unminifyOrTag($name == null ? "unknown" : $name) + "'";
    },
    $isFunction: 1,
    get$$call: function() {
      return this;
    },
    "call*": "call$1",
    $requiredArgCount: 1,
    $defaultValues: null
  };
  H.TearOffClosure.prototype = {};
  H.StaticClosure.prototype = {
    toString$0: function(_) {
      var $name = this.$static_name;
      if ($name == null)
        return "Closure of unknown static method";
      return "Closure '" + H.unminifyOrTag($name) + "'";
    }
  };
  H.BoundClosure.prototype = {
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!(other instanceof H.BoundClosure))
        return false;
      return _this._self === other._self && _this.__js_helper$_target === other.__js_helper$_target && _this._receiver === other._receiver;
    },
    get$hashCode: function(_) {
      var receiverHashCode,
        t1 = this._receiver;
      if (t1 == null)
        receiverHashCode = H.Primitives_objectHashCode(this._self);
      else
        receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
      return (receiverHashCode ^ H.Primitives_objectHashCode(this.__js_helper$_target)) >>> 0;
    },
    toString$0: function(_) {
      var receiver = this._receiver;
      if (receiver == null)
        receiver = this._self;
      return "Closure '" + H.S(this._name) + "' of " + ("Instance of '" + H.S(H.Primitives_objectTypeName(receiver)) + "'");
    }
  };
  H.RuntimeError.prototype = {
    toString$0: function(_) {
      return "RuntimeError: " + this.message;
    }
  };
  H._AssertionError.prototype = {
    toString$0: function(_) {
      return "Assertion failed: " + P.Error_safeToString(this.message);
    }
  };
  H.JsLinkedHashMap.prototype = {
    get$length: function(_) {
      return this.__js_helper$_length;
    },
    get$isEmpty: function(_) {
      return this.__js_helper$_length === 0;
    },
    get$keys: function() {
      return new H.LinkedHashMapKeyIterable(this, H._instanceType(this)._eval$1("LinkedHashMapKeyIterable<1>"));
    },
    get$values: function() {
      var t1 = H._instanceType(this);
      return H.MappedIterable_MappedIterable(this.get$keys(), new H.JsLinkedHashMap_values_closure(this), t1._precomputed1, t1._rest[1]);
    },
    containsKey$1: function(key) {
      var strings, nums, _this = this;
      if (typeof key == "string") {
        strings = _this._strings;
        if (strings == null)
          return false;
        return _this._containsTableEntry$2(strings, key);
      } else if (typeof key == "number" && (key & 0x3ffffff) === key) {
        nums = _this._nums;
        if (nums == null)
          return false;
        return _this._containsTableEntry$2(nums, key);
      } else
        return _this.internalContainsKey$1(key);
    },
    internalContainsKey$1: function(key) {
      var _this = this,
        rest = _this.__js_helper$_rest;
      if (rest == null)
        return false;
      return _this.internalFindBucketIndex$2(_this._getTableBucket$2(rest, _this.internalComputeHashCode$1(key)), key) >= 0;
    },
    $index: function(_, key) {
      var strings, cell, t1, nums, _this = this, _null = null;
      if (typeof key == "string") {
        strings = _this._strings;
        if (strings == null)
          return _null;
        cell = _this._getTableCell$2(strings, key);
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else if (typeof key == "number" && (key & 0x3ffffff) === key) {
        nums = _this._nums;
        if (nums == null)
          return _null;
        cell = _this._getTableCell$2(nums, key);
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else
        return _this.internalGet$1(key);
    },
    internalGet$1: function(key) {
      var bucket, index, _this = this,
        rest = _this.__js_helper$_rest;
      if (rest == null)
        return null;
      bucket = _this._getTableBucket$2(rest, _this.internalComputeHashCode$1(key));
      index = _this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return null;
      return bucket[index].hashMapCellValue;
    },
    $indexSet: function(_, key, value) {
      var strings, nums, _this = this,
        t1 = H._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      if (typeof key == "string") {
        strings = _this._strings;
        _this._addHashTableEntry$3(strings == null ? _this._strings = _this._newHashTable$0() : strings, key, value);
      } else if (typeof key == "number" && (key & 0x3ffffff) === key) {
        nums = _this._nums;
        _this._addHashTableEntry$3(nums == null ? _this._nums = _this._newHashTable$0() : nums, key, value);
      } else
        _this.internalSet$2(key, value);
    },
    internalSet$2: function(key, value) {
      var rest, hash, bucket, index, _this = this,
        t1 = H._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      rest = _this.__js_helper$_rest;
      if (rest == null)
        rest = _this.__js_helper$_rest = _this._newHashTable$0();
      hash = _this.internalComputeHashCode$1(key);
      bucket = _this._getTableBucket$2(rest, hash);
      if (bucket == null)
        _this._setTableEntry$3(rest, hash, [_this._newLinkedCell$2(key, value)]);
      else {
        index = _this.internalFindBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index].hashMapCellValue = value;
        else
          bucket.push(_this._newLinkedCell$2(key, value));
      }
    },
    forEach$1: function(_, action) {
      var cell, modifications, _this = this;
      H._instanceType(_this)._eval$1("~(1,2)")._as(action);
      cell = _this._first;
      modifications = _this._modifications;
      for (; cell != null;) {
        action.call$2(cell.hashMapCellKey, cell.hashMapCellValue);
        if (modifications !== _this._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
        cell = cell._next;
      }
    },
    _addHashTableEntry$3: function(table, key, value) {
      var cell, _this = this,
        t1 = H._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      cell = _this._getTableCell$2(table, key);
      if (cell == null)
        _this._setTableEntry$3(table, key, _this._newLinkedCell$2(key, value));
      else
        cell.hashMapCellValue = value;
    },
    _newLinkedCell$2: function(key, value) {
      var _this = this,
        t1 = H._instanceType(_this),
        cell = new H.LinkedHashMapCell(t1._precomputed1._as(key), t1._rest[1]._as(value));
      if (_this._first == null)
        _this._first = _this._last = cell;
      else
        _this._last = _this._last._next = cell;
      ++_this.__js_helper$_length;
      _this._modifications = _this._modifications + 1 & 67108863;
      return cell;
    },
    internalComputeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 0x3ffffff;
    },
    internalFindBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i].hashMapCellKey, key))
          return i;
      return -1;
    },
    toString$0: function(_) {
      return P.MapBase_mapToString(this);
    },
    _getTableCell$2: function(table, key) {
      return table[key];
    },
    _getTableBucket$2: function(table, key) {
      return table[key];
    },
    _setTableEntry$3: function(table, key, value) {
      table[key] = value;
    },
    _deleteTableEntry$2: function(table, key) {
      delete table[key];
    },
    _containsTableEntry$2: function(table, key) {
      return this._getTableCell$2(table, key) != null;
    },
    _newHashTable$0: function() {
      var _s20_ = "<non-identifier-key>",
        table = Object.create(null);
      this._setTableEntry$3(table, _s20_, table);
      this._deleteTableEntry$2(table, _s20_);
      return table;
    },
    $isLinkedHashMap: 1
  };
  H.JsLinkedHashMap_values_closure.prototype = {
    call$1: function(each) {
      var t1 = this.$this;
      return t1.$index(0, H._instanceType(t1)._precomputed1._as(each));
    },
    $signature: function() {
      return H._instanceType(this.$this)._eval$1("2(1)");
    }
  };
  H.LinkedHashMapCell.prototype = {};
  H.LinkedHashMapKeyIterable.prototype = {
    get$length: function(_) {
      return this._map.__js_helper$_length;
    },
    get$isEmpty: function(_) {
      return this._map.__js_helper$_length === 0;
    },
    get$iterator: function(_) {
      var t1 = this._map,
        t2 = new H.LinkedHashMapKeyIterator(t1, t1._modifications, this.$ti._eval$1("LinkedHashMapKeyIterator<1>"));
      t2._cell = t1._first;
      return t2;
    }
  };
  H.LinkedHashMapKeyIterator.prototype = {
    get$current: function() {
      return this.__js_helper$_current;
    },
    moveNext$0: function() {
      var cell, _this = this,
        t1 = _this._map;
      if (_this._modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      cell = _this._cell;
      if (cell == null) {
        _this.set$__js_helper$_current(null);
        return false;
      } else {
        _this.set$__js_helper$_current(cell.hashMapCellKey);
        _this._cell = cell._next;
        return true;
      }
    },
    set$__js_helper$_current: function(_current) {
      this.__js_helper$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  H.initHooks_closure.prototype = {
    call$1: function(o) {
      return this.getTag(o);
    },
    $signature: 10
  };
  H.initHooks_closure0.prototype = {
    call$2: function(o, tag) {
      return this.getUnknownTag(o, tag);
    },
    $signature: 14
  };
  H.initHooks_closure1.prototype = {
    call$1: function(tag) {
      return this.prototypeForTag(H._asStringS(tag));
    },
    $signature: 15
  };
  H.NativeByteBuffer.prototype = {$isNativeByteBuffer: 1};
  H.NativeTypedData.prototype = {
    _invalidPosition$3: function(receiver, position, $length, $name) {
      if (!H._isInt(position))
        throw H.wrapException(P.ArgumentError$value(position, $name, "Invalid list position"));
      else
        throw H.wrapException(P.RangeError$range(position, 0, $length, $name, null));
    },
    _checkPosition$3: function(receiver, position, $length, $name) {
      if (position >>> 0 !== position || position > $length)
        this._invalidPosition$3(receiver, position, $length, $name);
    },
    $isNativeTypedData: 1,
    $isTypedData: 1
  };
  H.NativeTypedArray.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    _setRangeFast$4: function(receiver, start, end, source, skipCount) {
      var count, sourceLength,
        targetLength = receiver.length;
      this._checkPosition$3(receiver, start, targetLength, "start");
      this._checkPosition$3(receiver, end, targetLength, "end");
      if (typeof start !== "number")
        return start.$gt();
      if (start > end)
        throw H.wrapException(P.RangeError$range(start, 0, end, null, null));
      count = end - start;
      if (skipCount < 0)
        throw H.wrapException(P.ArgumentError$(skipCount));
      sourceLength = source.length;
      if (sourceLength - skipCount < count)
        throw H.wrapException(P.StateError$("Not enough elements"));
      if (skipCount !== 0 || sourceLength !== count)
        source = source.subarray(skipCount, skipCount + count);
      receiver.set(source, start);
    },
    $isJSIndexable: 1,
    $isJavaScriptIndexingBehavior: 1
  };
  H.NativeTypedArrayOfDouble.prototype = {
    $index: function(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H._asIntS(index);
      H._asDoubleS(value);
      H._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      type$.Iterable_double._as(iterable);
      if (type$.NativeTypedArrayOfDouble._is(iterable)) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
      }
      this.super$ListMixin$setRange(receiver, start, end, iterable, skipCount);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  H.NativeTypedArrayOfInt.prototype = {
    $indexSet: function(receiver, index, value) {
      H._asIntS(index);
      H._asIntS(value);
      H._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      type$.Iterable_int._as(iterable);
      if (type$.NativeTypedArrayOfInt._is(iterable)) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
      }
      this.super$ListMixin$setRange(receiver, start, end, iterable, skipCount);
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  H.NativeFloat32List.prototype = {
    sublist$2: function(receiver, start, end) {
      return new Float32Array(receiver.subarray(start, H._checkValidRange(start, end, receiver.length)));
    },
    $isFloat32List: 1
  };
  H.NativeFloat64List.prototype = {
    sublist$2: function(receiver, start, end) {
      return new Float64Array(receiver.subarray(start, H._checkValidRange(start, end, receiver.length)));
    }
  };
  H.NativeInt16List.prototype = {
    $index: function(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      return new Int16Array(receiver.subarray(start, H._checkValidRange(start, end, receiver.length)));
    },
    $isInt16List: 1
  };
  H.NativeInt32List.prototype = {
    $index: function(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      return new Int32Array(receiver.subarray(start, H._checkValidRange(start, end, receiver.length)));
    },
    $isInt32List: 1
  };
  H.NativeInt8List.prototype = {
    $index: function(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      return new Int8Array(receiver.subarray(start, H._checkValidRange(start, end, receiver.length)));
    },
    $isInt8List: 1
  };
  H.NativeUint16List.prototype = {
    $index: function(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      return new Uint16Array(receiver.subarray(start, H._checkValidRange(start, end, receiver.length)));
    },
    $isUint16List: 1
  };
  H.NativeUint32List.prototype = {
    $index: function(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      return new Uint32Array(receiver.subarray(start, H._checkValidRange(start, end, receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $isUint32List: 1
  };
  H.NativeUint8ClampedList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      return new Uint8ClampedArray(receiver.subarray(start, H._checkValidRange(start, end, receiver.length)));
    }
  };
  H.NativeUint8List.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      return new Uint8Array(receiver.subarray(start, H._checkValidRange(start, end, receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $isNativeUint8List: 1,
    $isUint8List: 1
  };
  H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.prototype = {};
  H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.prototype = {};
  H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  H.Rti.prototype = {
    _eval$1: function(recipe) {
      return H._Universe_evalInEnvironment(init.typeUniverse, this, recipe);
    },
    _bind$1: function(typeOrTuple) {
      return H._Universe_bind(init.typeUniverse, this, typeOrTuple);
    }
  };
  H._FunctionParameters.prototype = {};
  H._Error.prototype = {
    toString$0: function(_) {
      return this.__rti$_message;
    }
  };
  H._TypeError.prototype = {};
  P._AsyncRun__initializeScheduleImmediate_internalCallback.prototype = {
    call$1: function(_) {
      var t1 = this._box_0,
        f = t1.storedCallback;
      t1.storedCallback = null;
      f.call$0();
    },
    $signature: 11
  };
  P._AsyncRun__initializeScheduleImmediate_closure.prototype = {
    call$1: function(callback) {
      var t1, t2;
      this._box_0.storedCallback = type$.void_Function._as(callback);
      t1 = this.div;
      t2 = this.span;
      t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
    },
    $signature: 16
  };
  P._AsyncRun__scheduleImmediateJsOverride_internalCallback.prototype = {
    call$0: function() {
      this.callback.call$0();
    },
    $signature: 2
  };
  P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback.prototype = {
    call$0: function() {
      this.callback.call$0();
    },
    $signature: 2
  };
  P._TimerImpl.prototype = {
    _TimerImpl$2: function(milliseconds, callback) {
      if (self.setTimeout != null)
        self.setTimeout(H.convertDartClosureToJS(new P._TimerImpl_internalCallback(this, callback), 0), milliseconds);
      else
        throw H.wrapException(P.UnsupportedError$("`setTimeout()` not found."));
    }
  };
  P._TimerImpl_internalCallback.prototype = {
    call$0: function() {
      this.callback.call$0();
    },
    $signature: 3
  };
  P._Completer.prototype = {};
  P._AsyncCompleter.prototype = {};
  P._FutureListener.prototype = {
    matchesErrorTest$1: function(asyncError) {
      if ((this.state & 15) !== 6)
        return true;
      return this.result._zone.runUnary$2$2(type$.bool_Function_Object._as(this.callback), asyncError.error, type$.bool, type$.Object);
    },
    handleError$1: function(asyncError) {
      var errorCallback = this.errorCallback,
        t1 = type$.dynamic,
        t2 = type$.Object,
        t3 = this.$ti._eval$1("2/"),
        t4 = this.result._zone;
      if (type$.dynamic_Function_Object_StackTrace._is(errorCallback))
        return t3._as(t4.runBinary$3$3(errorCallback, asyncError.error, asyncError.stackTrace, t1, t2, type$.StackTrace));
      else
        return t3._as(t4.runUnary$2$2(type$.dynamic_Function_Object._as(errorCallback), asyncError.error, t1, t2));
    }
  };
  P._Future.prototype = {
    then$1$2$onError: function(f, onError, $R) {
      var currentZone, result, t2,
        t1 = this.$ti;
      t1._bind$1($R)._eval$1("1/(2)")._as(f);
      currentZone = $.Zone__current;
      if (currentZone !== C.C__RootZone) {
        $R._eval$1("@<0/>")._bind$1(t1._precomputed1)._eval$1("1(2)")._as(f);
        if (onError != null)
          onError = P._registerErrorHandler(onError, currentZone);
      }
      result = new P._Future(currentZone, $R._eval$1("_Future<0>"));
      t2 = onError == null ? 1 : 3;
      this._addListener$1(new P._FutureListener(result, t2, f, onError, t1._eval$1("@<1>")._bind$1($R)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    then$1$1: function(f, $R) {
      return this.then$1$2$onError(f, null, $R);
    },
    _addListener$1: function(listener) {
      var source, _this = this,
        t1 = _this._state;
      if (t1 <= 1) {
        listener._nextListener = type$.nullable__FutureListener_dynamic_dynamic._as(_this._resultOrListeners);
        _this._resultOrListeners = listener;
      } else {
        if (t1 === 2) {
          source = type$._Future_dynamic._as(_this._resultOrListeners);
          t1 = source._state;
          if (t1 < 4) {
            source._addListener$1(listener);
            return;
          }
          _this._state = t1;
          _this._resultOrListeners = source._resultOrListeners;
        }
        P._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(new P._Future__addListener_closure(_this, listener)));
      }
    },
    _prependListeners$1: function(listeners) {
      var t1, existingListeners, next, cursor, next0, source, _this = this, _box_0 = {};
      _box_0.listeners = listeners;
      if (listeners == null)
        return;
      t1 = _this._state;
      if (t1 <= 1) {
        existingListeners = type$.nullable__FutureListener_dynamic_dynamic._as(_this._resultOrListeners);
        _this._resultOrListeners = listeners;
        if (existingListeners != null) {
          next = listeners._nextListener;
          for (cursor = listeners; next != null; cursor = next, next = next0)
            next0 = next._nextListener;
          cursor._nextListener = existingListeners;
        }
      } else {
        if (t1 === 2) {
          source = type$._Future_dynamic._as(_this._resultOrListeners);
          t1 = source._state;
          if (t1 < 4) {
            source._prependListeners$1(listeners);
            return;
          }
          _this._state = t1;
          _this._resultOrListeners = source._resultOrListeners;
        }
        _box_0.listeners = _this._reverseListeners$1(listeners);
        P._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(new P._Future__prependListeners_closure(_box_0, _this)));
      }
    },
    _removeListeners$0: function() {
      var current = type$.nullable__FutureListener_dynamic_dynamic._as(this._resultOrListeners);
      this._resultOrListeners = null;
      return this._reverseListeners$1(current);
    },
    _reverseListeners$1: function(listeners) {
      var current, prev, next;
      for (current = listeners, prev = null; current != null; prev = current, current = next) {
        next = current._nextListener;
        current._nextListener = prev;
      }
      return prev;
    },
    _complete$1: function(value) {
      var listeners, _this = this,
        t1 = _this.$ti;
      t1._eval$1("1/")._as(value);
      if (t1._eval$1("Future<1>")._is(value))
        if (t1._is(value))
          P._Future__chainCoreFuture(value, _this);
        else
          P._Future__chainForeignFuture(value, _this);
      else {
        listeners = _this._removeListeners$0();
        t1._precomputed1._as(value);
        _this._state = 4;
        _this._resultOrListeners = value;
        P._Future__propagateToListeners(_this, listeners);
      }
    },
    _completeError$2: function(error, stackTrace) {
      var listeners, t1, _this = this;
      type$.StackTrace._as(stackTrace);
      listeners = _this._removeListeners$0();
      t1 = P.AsyncError$(error, stackTrace);
      _this._state = 8;
      _this._resultOrListeners = t1;
      P._Future__propagateToListeners(_this, listeners);
    },
    _asyncComplete$1: function(value) {
      var t1 = this.$ti;
      t1._eval$1("1/")._as(value);
      if (t1._eval$1("Future<1>")._is(value)) {
        this._chainFuture$1(value);
        return;
      }
      this._asyncCompleteWithValue$1(t1._precomputed1._as(value));
    },
    _asyncCompleteWithValue$1: function(value) {
      var _this = this;
      _this.$ti._precomputed1._as(value);
      _this._state = 1;
      P._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(new P._Future__asyncCompleteWithValue_closure(_this, value)));
    },
    _chainFuture$1: function(value) {
      var _this = this,
        t1 = _this.$ti;
      t1._eval$1("Future<1>")._as(value);
      if (t1._is(value)) {
        if (value._state === 8) {
          _this._state = 1;
          P._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(new P._Future__chainFuture_closure(_this, value)));
        } else
          P._Future__chainCoreFuture(value, _this);
        return;
      }
      P._Future__chainForeignFuture(value, _this);
    },
    _asyncCompleteError$2: function(error, stackTrace) {
      this._state = 1;
      P._rootScheduleMicrotask(null, null, this._zone, type$.void_Function._as(new P._Future__asyncCompleteError_closure(this, error, stackTrace)));
    },
    $isFuture: 1
  };
  P._Future__addListener_closure.prototype = {
    call$0: function() {
      P._Future__propagateToListeners(this.$this, this.listener);
    },
    $signature: 2
  };
  P._Future__prependListeners_closure.prototype = {
    call$0: function() {
      P._Future__propagateToListeners(this.$this, this._box_0.listeners);
    },
    $signature: 2
  };
  P._Future__chainForeignFuture_closure.prototype = {
    call$1: function(value) {
      var t1 = this.target;
      t1._state = 0;
      t1._complete$1(value);
    },
    $signature: 11
  };
  P._Future__chainForeignFuture_closure0.prototype = {
    call$2: function(error, stackTrace) {
      this.target._completeError$2(error, type$.StackTrace._as(stackTrace));
    },
    $signature: 17
  };
  P._Future__chainForeignFuture_closure1.prototype = {
    call$0: function() {
      this.target._completeError$2(this.e, this.s);
    },
    $signature: 2
  };
  P._Future__asyncCompleteWithValue_closure.prototype = {
    call$0: function() {
      var t1 = this.$this,
        t2 = t1.$ti._precomputed1._as(this.value),
        listeners = t1._removeListeners$0();
      t1._state = 4;
      t1._resultOrListeners = t2;
      P._Future__propagateToListeners(t1, listeners);
    },
    $signature: 2
  };
  P._Future__chainFuture_closure.prototype = {
    call$0: function() {
      P._Future__chainCoreFuture(this.value, this.$this);
    },
    $signature: 2
  };
  P._Future__asyncCompleteError_closure.prototype = {
    call$0: function() {
      this.$this._completeError$2(this.error, this.stackTrace);
    },
    $signature: 2
  };
  P._Future__propagateToListeners_handleWhenCompleteCallback.prototype = {
    call$0: function() {
      var e, s, t1, exception, t2, originalSource, _this = this, completeResult = null;
      try {
        t1 = _this._box_0.listener;
        completeResult = t1.result._zone.run$1$1(type$.dynamic_Function._as(t1.callback), type$.dynamic);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        if (_this.hasError) {
          t1 = type$.AsyncError._as(_this._box_1.source._resultOrListeners).error;
          t2 = e;
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
        t2 = _this._box_0;
        if (t1)
          t2.listenerValueOrError = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        else
          t2.listenerValueOrError = P.AsyncError$(e, s);
        t2.listenerHasError = true;
        return;
      }
      if (completeResult instanceof P._Future && completeResult._state >= 4) {
        if (completeResult._state === 8) {
          t1 = _this._box_0;
          t1.listenerValueOrError = type$.AsyncError._as(completeResult._resultOrListeners);
          t1.listenerHasError = true;
        }
        return;
      }
      if (type$.Future_dynamic._is(completeResult)) {
        originalSource = _this._box_1.source;
        t1 = _this._box_0;
        t1.listenerValueOrError = completeResult.then$1$1(new P._Future__propagateToListeners_handleWhenCompleteCallback_closure(originalSource), type$.dynamic);
        t1.listenerHasError = false;
      }
    },
    $signature: 3
  };
  P._Future__propagateToListeners_handleWhenCompleteCallback_closure.prototype = {
    call$1: function(_) {
      return this.originalSource;
    },
    $signature: 18
  };
  P._Future__propagateToListeners_handleValueCallback.prototype = {
    call$0: function() {
      var e, s, t1, t2, t3, t4, t5, exception;
      try {
        t1 = this._box_0;
        t2 = t1.listener;
        t3 = t2.$ti;
        t4 = t3._precomputed1;
        t5 = t4._as(this.sourceResult);
        t1.listenerValueOrError = t2.result._zone.runUnary$2$2(t3._eval$1("2/(1)")._as(t2.callback), t5, t3._eval$1("2/"), t4);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        t1 = this._box_0;
        t1.listenerValueOrError = P.AsyncError$(e, s);
        t1.listenerHasError = true;
      }
    },
    $signature: 3
  };
  P._Future__propagateToListeners_handleError.prototype = {
    call$0: function() {
      var asyncError, e, s, t1, exception, t2, t3, t4, _this = this;
      try {
        asyncError = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        t1 = _this._box_0;
        if (H.boolConversionCheck(t1.listener.matchesErrorTest$1(asyncError)) && t1.listener.errorCallback != null) {
          t1.listenerValueOrError = t1.listener.handleError$1(asyncError);
          t1.listenerHasError = false;
        }
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        t1 = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        t2 = t1.error;
        t3 = e;
        t4 = _this._box_0;
        if (t2 == null ? t3 == null : t2 === t3)
          t4.listenerValueOrError = t1;
        else
          t4.listenerValueOrError = P.AsyncError$(e, s);
        t4.listenerHasError = true;
      }
    },
    $signature: 3
  };
  P._AsyncCallbackEntry.prototype = {};
  P.Stream.prototype = {
    get$length: function(_) {
      var t2, t3, _this = this, t1 = {},
        future = new P._Future($.Zone__current, type$._Future_int);
      t1.count = 0;
      t2 = _this.$ti;
      t3 = t2._eval$1("~(1)?")._as(new P.Stream_length_closure(t1, _this));
      type$.nullable_void_Function._as(new P.Stream_length_closure0(t1, future));
      W._EventStreamSubscription$(_this._target, _this._eventType, t3, false, t2._precomputed1);
      return future;
    }
  };
  P.Stream_length_closure.prototype = {
    call$1: function(_) {
      this.$this.$ti._precomputed1._as(_);
      ++this._box_0.count;
    },
    $signature: function() {
      return this.$this.$ti._eval$1("Null(1)");
    }
  };
  P.Stream_length_closure0.prototype = {
    call$0: function() {
      this.future._complete$1(this._box_0.count);
    },
    $signature: 2
  };
  P.StreamSubscription.prototype = {};
  P.AsyncError.prototype = {
    toString$0: function(_) {
      return H.S(this.error);
    },
    $isError: 1,
    get$stackTrace: function() {
      return this.stackTrace;
    }
  };
  P._Zone.prototype = {$isZone: 1};
  P._rootHandleUncaughtError_closure.prototype = {
    call$0: function() {
      var error = H.wrapException(this.error);
      error.stack = J.toString$0$(this.stackTrace);
      throw error;
    },
    $signature: 2
  };
  P._RootZone.prototype = {
    runGuarded$1: function(f) {
      var e, s, exception, _null = null;
      type$.void_Function._as(f);
      try {
        if (C.C__RootZone === $.Zone__current) {
          f.call$0();
          return;
        }
        P._rootRun(_null, _null, this, f, type$.void);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P._rootHandleUncaughtError(_null, _null, this, e, type$.StackTrace._as(s));
      }
    },
    runUnaryGuarded$1$2: function(f, arg, $T) {
      var e, s, exception, _null = null;
      $T._eval$1("~(0)")._as(f);
      $T._as(arg);
      try {
        if (C.C__RootZone === $.Zone__current) {
          f.call$1(arg);
          return;
        }
        P._rootRunUnary(_null, _null, this, f, arg, type$.void, $T);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P._rootHandleUncaughtError(_null, _null, this, e, type$.StackTrace._as(s));
      }
    },
    bindCallback$1$1: function(f, $R) {
      return new P._RootZone_bindCallback_closure(this, $R._eval$1("0()")._as(f), $R);
    },
    bindCallbackGuarded$1: function(f) {
      return new P._RootZone_bindCallbackGuarded_closure(this, type$.void_Function._as(f));
    },
    bindUnaryCallbackGuarded$1$1: function(f, $T) {
      return new P._RootZone_bindUnaryCallbackGuarded_closure(this, $T._eval$1("~(0)")._as(f), $T);
    },
    $index: function(_, key) {
      return null;
    },
    run$1$1: function(f, $R) {
      $R._eval$1("0()")._as(f);
      if ($.Zone__current === C.C__RootZone)
        return f.call$0();
      return P._rootRun(null, null, this, f, $R);
    },
    runUnary$2$2: function(f, arg, $R, $T) {
      $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f);
      $T._as(arg);
      if ($.Zone__current === C.C__RootZone)
        return f.call$1(arg);
      return P._rootRunUnary(null, null, this, f, arg, $R, $T);
    },
    runBinary$3$3: function(f, arg1, arg2, $R, T1, T2) {
      $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
      T1._as(arg1);
      T2._as(arg2);
      if ($.Zone__current === C.C__RootZone)
        return f.call$2(arg1, arg2);
      return P._rootRunBinary(null, null, this, f, arg1, arg2, $R, T1, T2);
    }
  };
  P._RootZone_bindCallback_closure.prototype = {
    call$0: function() {
      return this.$this.run$1$1(this.f, this.R);
    },
    $signature: function() {
      return this.R._eval$1("0()");
    }
  };
  P._RootZone_bindCallbackGuarded_closure.prototype = {
    call$0: function() {
      return this.$this.runGuarded$1(this.f);
    },
    $signature: 3
  };
  P._RootZone_bindUnaryCallbackGuarded_closure.prototype = {
    call$1: function(arg) {
      var t1 = this.T;
      return this.$this.runUnaryGuarded$1$2(this.f, t1._as(arg), t1);
    },
    $signature: function() {
      return this.T._eval$1("~(0)");
    }
  };
  P.LinkedHashMap_LinkedHashMap$from_closure.prototype = {
    call$2: function(k, v) {
      this.result.$indexSet(0, this.K._as(k), this.V._as(v));
    },
    $signature: 5
  };
  P.ListBase.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1, $isList: 1};
  P.ListMixin.prototype = {
    get$iterator: function(receiver) {
      return new H.ListIterator(receiver, this.get$length(receiver), H.instanceType(receiver)._eval$1("ListIterator<ListMixin.E>"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    get$isEmpty: function(receiver) {
      return this.get$length(receiver) === 0;
    },
    get$isNotEmpty: function(receiver) {
      return this.get$length(receiver) !== 0;
    },
    skip$1: function(receiver, count) {
      return H.SubListIterable$(receiver, count, null, H.instanceType(receiver)._eval$1("ListMixin.E"));
    },
    sublist$2: function(receiver, start, end) {
      var t1,
        listLength = this.get$length(receiver);
      P.RangeError_checkValidRange(start, end, listLength);
      P.RangeError_checkValidRange(start, end, this.get$length(receiver));
      t1 = H.instanceType(receiver)._eval$1("ListMixin.E");
      return P.List_List$from(H.SubListIterable$(receiver, start, end, t1), true, t1);
    },
    fillRange$3: function(receiver, start, end, fill) {
      var i;
      H.instanceType(receiver)._eval$1("ListMixin.E?")._as(fill);
      P.RangeError_checkValidRange(start, end, this.get$length(receiver));
      for (i = start; i < end; ++i)
        this.$indexSet(receiver, i, fill);
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      var $length, otherStart, otherList, i,
        t1 = H.instanceType(receiver);
      t1._eval$1("Iterable<ListMixin.E>")._as(iterable);
      P.RangeError_checkValidRange(start, end, this.get$length(receiver));
      if (typeof start !== "number")
        return H.iae(start);
      $length = end - start;
      if ($length === 0)
        return;
      P.RangeError_checkNotNegative(skipCount, "skipCount");
      if (t1._eval$1("List<ListMixin.E>")._is(iterable)) {
        otherStart = skipCount;
        otherList = iterable;
      } else {
        otherList = J.skip$1$ax(iterable, skipCount).toList$1$growable(0, false);
        otherStart = 0;
      }
      t1 = J.getInterceptor$asx(otherList);
      if (otherStart + $length > t1.get$length(otherList))
        throw H.wrapException(H.IterableElementError_tooFew());
      if (otherStart < start)
        for (i = $length - 1; i >= 0; --i)
          this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
      else
        for (i = 0; i < $length; ++i)
          this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
    },
    toString$0: function(receiver) {
      return P.IterableBase_iterableToFullString(receiver, "[", "]");
    }
  };
  P.MapBase.prototype = {};
  P.MapBase_mapToString_closure.prototype = {
    call$2: function(k, v) {
      var t2,
        t1 = this._box_0;
      if (!t1.first)
        this.result._contents += ", ";
      t1.first = false;
      t1 = this.result;
      t2 = t1._contents += H.S(k);
      t1._contents = t2 + ": ";
      t1._contents += H.S(v);
    },
    $signature: 6
  };
  P.MapMixin.prototype = {
    forEach$1: function(_, action) {
      var t1, key;
      H._instanceType(this)._eval$1("~(1,2)")._as(action);
      for (t1 = this.get$keys(), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
        key = t1.get$current();
        action.call$2(key, this.$index(0, key));
      }
    },
    get$length: function(_) {
      var t1 = this.get$keys();
      return t1.get$length(t1);
    },
    get$isEmpty: function(_) {
      var t1 = this.get$keys();
      return t1.get$isEmpty(t1);
    },
    toString$0: function(_) {
      return P.MapBase_mapToString(this);
    },
    $isMap: 1
  };
  P._ListBase_Object_ListMixin.prototype = {};
  P.JsonUnsupportedObjectError.prototype = {
    toString$0: function(_) {
      var safeString = P.Error_safeToString(this.unsupportedObject);
      return (this.cause != null ? "Converting object to an encodable object failed:" : "Converting object did not return an encodable object:") + " " + safeString;
    }
  };
  P.JsonCyclicError.prototype = {
    toString$0: function(_) {
      return "Cyclic error in JSON stringify";
    }
  };
  P._JsonStringifier.prototype = {
    writeStringContent$1: function(s) {
      var t1, t2, offset, i, charCode, t3, t4,
        $length = s.length;
      for (t1 = J.getInterceptor$s(s), t2 = this._sink, offset = 0, i = 0; i < $length; ++i) {
        charCode = t1._codeUnitAt$1(s, i);
        if (charCode > 92) {
          if (charCode >= 55296) {
            t3 = charCode & 64512;
            if (t3 === 55296) {
              t4 = i + 1;
              t4 = !(t4 < $length && (C.JSString_methods._codeUnitAt$1(s, t4) & 64512) === 56320);
            } else
              t4 = false;
            if (!t4)
              if (t3 === 56320) {
                t3 = i - 1;
                t3 = !(t3 >= 0 && (C.JSString_methods.codeUnitAt$1(s, t3) & 64512) === 55296);
              } else
                t3 = false;
            else
              t3 = true;
            if (t3) {
              if (i > offset)
                t2._contents += C.JSString_methods.substring$2(s, offset, i);
              offset = i + 1;
              t2._contents += H.Primitives_stringFromCharCode(92);
              t2._contents += H.Primitives_stringFromCharCode(117);
              t2._contents += H.Primitives_stringFromCharCode(100);
              t3 = charCode >>> 8 & 15;
              t2._contents += H.Primitives_stringFromCharCode(t3 < 10 ? 48 + t3 : 87 + t3);
              t3 = charCode >>> 4 & 15;
              t2._contents += H.Primitives_stringFromCharCode(t3 < 10 ? 48 + t3 : 87 + t3);
              t3 = charCode & 15;
              t2._contents += H.Primitives_stringFromCharCode(t3 < 10 ? 48 + t3 : 87 + t3);
            }
          }
          continue;
        }
        if (charCode < 32) {
          if (i > offset)
            t2._contents += C.JSString_methods.substring$2(s, offset, i);
          offset = i + 1;
          t2._contents += H.Primitives_stringFromCharCode(92);
          switch (charCode) {
            case 8:
              t2._contents += H.Primitives_stringFromCharCode(98);
              break;
            case 9:
              t2._contents += H.Primitives_stringFromCharCode(116);
              break;
            case 10:
              t2._contents += H.Primitives_stringFromCharCode(110);
              break;
            case 12:
              t2._contents += H.Primitives_stringFromCharCode(102);
              break;
            case 13:
              t2._contents += H.Primitives_stringFromCharCode(114);
              break;
            default:
              t2._contents += H.Primitives_stringFromCharCode(117);
              t2._contents += H.Primitives_stringFromCharCode(48);
              t2._contents += H.Primitives_stringFromCharCode(48);
              t3 = charCode >>> 4 & 15;
              t2._contents += H.Primitives_stringFromCharCode(t3 < 10 ? 48 + t3 : 87 + t3);
              t3 = charCode & 15;
              t2._contents += H.Primitives_stringFromCharCode(t3 < 10 ? 48 + t3 : 87 + t3);
              break;
          }
        } else if (charCode === 34 || charCode === 92) {
          if (i > offset)
            t2._contents += C.JSString_methods.substring$2(s, offset, i);
          offset = i + 1;
          t2._contents += H.Primitives_stringFromCharCode(92);
          t2._contents += H.Primitives_stringFromCharCode(charCode);
        }
      }
      if (offset === 0)
        t2._contents += H.S(s);
      else if (offset < $length)
        t2._contents += t1.substring$2(s, offset, $length);
    },
    _checkCycle$1: function(object) {
      var t1, t2, i, t3;
      for (t1 = this._seen, t2 = t1.length, i = 0; i < t2; ++i) {
        t3 = t1[i];
        if (object == null ? t3 == null : object === t3)
          throw H.wrapException(new P.JsonCyclicError(object, null));
      }
      C.JSArray_methods.add$1(t1, object);
    },
    writeObject$1: function(object) {
      var customJson, e, t1, exception, _this = this;
      if (_this.writeJsonValue$1(object))
        return;
      _this._checkCycle$1(object);
      try {
        customJson = _this._toEncodable.call$1(object);
        if (!_this.writeJsonValue$1(customJson)) {
          t1 = P.JsonUnsupportedObjectError$(object, null, _this.get$_partialResult());
          throw H.wrapException(t1);
        }
        t1 = _this._seen;
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
      } catch (exception) {
        e = H.unwrapException(exception);
        t1 = P.JsonUnsupportedObjectError$(object, e, _this.get$_partialResult());
        throw H.wrapException(t1);
      }
    },
    writeJsonValue$1: function(object) {
      var t1, success, _this = this;
      if (typeof object == "number") {
        if (!isFinite(object))
          return false;
        _this._sink._contents += C.JSNumber_methods.toString$0(object);
        return true;
      } else if (object === true) {
        _this._sink._contents += "true";
        return true;
      } else if (object === false) {
        _this._sink._contents += "false";
        return true;
      } else if (object == null) {
        _this._sink._contents += "null";
        return true;
      } else if (typeof object == "string") {
        t1 = _this._sink;
        t1._contents += '"';
        _this.writeStringContent$1(object);
        t1._contents += '"';
        return true;
      } else if (type$.List_dynamic._is(object)) {
        _this._checkCycle$1(object);
        _this.writeList$1(object);
        t1 = _this._seen;
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
        return true;
      } else if (type$.Map_dynamic_dynamic._is(object)) {
        _this._checkCycle$1(object);
        success = _this.writeMap$1(object);
        t1 = _this._seen;
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
        return success;
      } else
        return false;
    },
    writeList$1: function(list) {
      var t2, i,
        t1 = this._sink;
      t1._contents += "[";
      t2 = J.getInterceptor$ax(list);
      if (t2.get$isNotEmpty(list)) {
        this.writeObject$1(t2.$index(list, 0));
        for (i = 1; i < t2.get$length(list); ++i) {
          t1._contents += ",";
          this.writeObject$1(t2.$index(list, i));
        }
      }
      t1._contents += "]";
    },
    writeMap$1: function(map) {
      var keyValueList, i, t1, separator, t2, _this = this, _box_0 = {};
      if (map.get$isEmpty(map)) {
        _this._sink._contents += "{}";
        return true;
      }
      keyValueList = P.List_List$filled(map.get$length(map) * 2, null, false, type$.nullable_Object);
      i = _box_0.i = 0;
      _box_0.allStringKeys = true;
      map.forEach$1(0, new P._JsonStringifier_writeMap_closure(_box_0, keyValueList));
      if (!_box_0.allStringKeys)
        return false;
      t1 = _this._sink;
      t1._contents += "{";
      for (separator = '"'; i < keyValueList.length; i += 2, separator = ',"') {
        t1._contents += separator;
        _this.writeStringContent$1(H._asStringS(keyValueList[i]));
        t1._contents += '":';
        t2 = i + 1;
        if (t2 >= keyValueList.length)
          return H.ioore(keyValueList, t2);
        _this.writeObject$1(keyValueList[t2]);
      }
      t1._contents += "}";
      return true;
    }
  };
  P._JsonStringifier_writeMap_closure.prototype = {
    call$2: function(key, value) {
      var t1, t2;
      if (typeof key != "string")
        this._box_0.allStringKeys = false;
      t1 = this.keyValueList;
      t2 = this._box_0;
      C.JSArray_methods.$indexSet(t1, t2.i++, key);
      C.JSArray_methods.$indexSet(t1, t2.i++, value);
    },
    $signature: 6
  };
  P._JsonPrettyPrintMixin.prototype = {
    writeList$1: function(list) {
      var i, _this = this,
        t1 = J.getInterceptor$asx(list),
        t2 = t1.get$isEmpty(list),
        t3 = _this._sink,
        t4 = t3._contents;
      if (t2)
        t3._contents = t4 + "[]";
      else {
        t3._contents = t4 + "[\n";
        _this.writeIndentation$1(++_this._JsonPrettyPrintMixin__indentLevel);
        _this.writeObject$1(t1.$index(list, 0));
        for (i = 1; i < t1.get$length(list); ++i) {
          t3._contents += ",\n";
          _this.writeIndentation$1(_this._JsonPrettyPrintMixin__indentLevel);
          _this.writeObject$1(t1.$index(list, i));
        }
        t3._contents += "\n";
        _this.writeIndentation$1(--_this._JsonPrettyPrintMixin__indentLevel);
        t3._contents += "]";
      }
    },
    writeMap$1: function(map) {
      var keyValueList, i, t1, separator, t2, _this = this, _box_0 = {};
      if (map.get$isEmpty(map)) {
        _this._sink._contents += "{}";
        return true;
      }
      keyValueList = P.List_List$filled(map.get$length(map) * 2, null, false, type$.nullable_Object);
      i = _box_0.i = 0;
      _box_0.allStringKeys = true;
      map.forEach$1(0, new P._JsonPrettyPrintMixin_writeMap_closure(_box_0, keyValueList));
      if (!_box_0.allStringKeys)
        return false;
      t1 = _this._sink;
      t1._contents += "{\n";
      ++_this._JsonPrettyPrintMixin__indentLevel;
      for (separator = ""; i < keyValueList.length; i += 2, separator = ",\n") {
        t1._contents += separator;
        _this.writeIndentation$1(_this._JsonPrettyPrintMixin__indentLevel);
        t1._contents += '"';
        if (i >= keyValueList.length)
          return H.ioore(keyValueList, i);
        _this.writeStringContent$1(H._asStringS(keyValueList[i]));
        t1._contents += '": ';
        t2 = i + 1;
        if (t2 >= keyValueList.length)
          return H.ioore(keyValueList, t2);
        _this.writeObject$1(keyValueList[t2]);
      }
      t1._contents += "\n";
      _this.writeIndentation$1(--_this._JsonPrettyPrintMixin__indentLevel);
      t1._contents += "}";
      return true;
    }
  };
  P._JsonPrettyPrintMixin_writeMap_closure.prototype = {
    call$2: function(key, value) {
      var t1, t2;
      if (typeof key != "string")
        this._box_0.allStringKeys = false;
      t1 = this.keyValueList;
      t2 = this._box_0;
      C.JSArray_methods.$indexSet(t1, t2.i++, key);
      C.JSArray_methods.$indexSet(t1, t2.i++, value);
    },
    $signature: 6
  };
  P._JsonStringStringifier.prototype = {
    get$_partialResult: function() {
      var t1 = this._sink._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  P._JsonStringStringifierPretty.prototype = {
    writeIndentation$1: function(count) {
      var t1, t2, i;
      for (t1 = this._indent, t2 = this._sink, i = 0; i < count; ++i)
        t2._contents += t1;
    }
  };
  P.__JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin.prototype = {};
  P.DateTime.prototype = {
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof P.DateTime && this._value === other._value && true;
    },
    get$hashCode: function(_) {
      var t1 = this._value;
      return (t1 ^ C.JSInt_methods._shrOtherPositive$1(t1, 30)) & 1073741823;
    },
    toString$0: function(_) {
      var _this = this,
        y = P.DateTime__fourDigits(H.Primitives_getYear(_this)),
        m = P.DateTime__twoDigits(H.Primitives_getMonth(_this)),
        d = P.DateTime__twoDigits(H.Primitives_getDay(_this)),
        h = P.DateTime__twoDigits(H.Primitives_getHours(_this)),
        min = P.DateTime__twoDigits(H.Primitives_getMinutes(_this)),
        sec = P.DateTime__twoDigits(H.Primitives_getSeconds(_this)),
        ms = P.DateTime__threeDigits(H.Primitives_getMilliseconds(_this)),
        t1 = y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms + "Z";
      return t1;
    }
  };
  P.Error.prototype = {
    get$stackTrace: function() {
      return H.getTraceFromException(this.$thrownJsError);
    }
  };
  P.AssertionError.prototype = {
    toString$0: function(_) {
      var t1 = this.message;
      if (t1 != null)
        return "Assertion failed: " + P.Error_safeToString(t1);
      return "Assertion failed";
    }
  };
  P.TypeError.prototype = {};
  P.NullThrownError.prototype = {
    toString$0: function(_) {
      return "Throw of null.";
    }
  };
  P.ArgumentError.prototype = {
    get$_errorName: function() {
      return "Invalid argument" + (!this._hasValue ? "(s)" : "");
    },
    get$_errorExplanation: function() {
      return "";
    },
    toString$0: function(_) {
      var explanation, errorValue, _this = this,
        $name = _this.name,
        nameString = $name == null ? "" : " (" + $name + ")",
        message = _this.message,
        messageString = message == null ? "" : ": " + H.S(message),
        prefix = _this.get$_errorName() + nameString + messageString;
      if (!_this._hasValue)
        return prefix;
      explanation = _this.get$_errorExplanation();
      errorValue = P.Error_safeToString(_this.invalidValue);
      return prefix + explanation + ": " + errorValue;
    }
  };
  P.RangeError.prototype = {
    get$_errorName: function() {
      return "RangeError";
    },
    get$_errorExplanation: function() {
      var explanation,
        start = this.start,
        end = this.end;
      if (start == null)
        explanation = end != null ? ": Not less than or equal to " + H.S(end) : "";
      else if (end == null)
        explanation = ": Not greater than or equal to " + H.S(start);
      else if (end > start)
        explanation = ": Not in inclusive range " + H.S(start) + ".." + H.S(end);
      else
        explanation = end < start ? ": Valid value range is empty" : ": Only valid value is " + H.S(start);
      return explanation;
    }
  };
  P.IndexError.prototype = {
    get$_errorName: function() {
      return "RangeError";
    },
    get$_errorExplanation: function() {
      var t1,
        invalidValue = H._asIntS(this.invalidValue);
      if (typeof invalidValue !== "number")
        return invalidValue.$lt();
      if (invalidValue < 0)
        return ": index must not be negative";
      t1 = this.length;
      if (t1 === 0)
        return ": no indices are valid";
      return ": index should be less than " + t1;
    },
    get$length: function(receiver) {
      return this.length;
    }
  };
  P.UnsupportedError.prototype = {
    toString$0: function(_) {
      return "Unsupported operation: " + this.message;
    }
  };
  P.UnimplementedError.prototype = {
    toString$0: function(_) {
      var message = this.message;
      return message != null ? "UnimplementedError: " + message : "UnimplementedError";
    }
  };
  P.StateError.prototype = {
    toString$0: function(_) {
      return "Bad state: " + this.message;
    }
  };
  P.ConcurrentModificationError.prototype = {
    toString$0: function(_) {
      var t1 = this.modifiedObject;
      if (t1 == null)
        return "Concurrent modification during iteration.";
      return "Concurrent modification during iteration: " + P.Error_safeToString(t1) + ".";
    }
  };
  P.OutOfMemoryError.prototype = {
    toString$0: function(_) {
      return "Out of Memory";
    },
    get$stackTrace: function() {
      return null;
    },
    $isError: 1
  };
  P.StackOverflowError.prototype = {
    toString$0: function(_) {
      return "Stack Overflow";
    },
    get$stackTrace: function() {
      return null;
    },
    $isError: 1
  };
  P.CyclicInitializationError.prototype = {
    toString$0: function(_) {
      var variableName = this.variableName;
      return variableName == null ? "Reading static variable during its initialization" : "Reading static variable '" + variableName + "' during its initialization";
    }
  };
  P._Exception.prototype = {
    toString$0: function(_) {
      return "Exception: " + this.message;
    }
  };
  P.FormatException.prototype = {
    toString$0: function(_) {
      var message = this.message,
        report = "" !== message ? "FormatException: " + message : "FormatException";
      return report;
    }
  };
  P.Iterable.prototype = {
    toList$1$growable: function(_, growable) {
      return P.List_List$from(this, false, H._instanceType(this)._eval$1("Iterable.E"));
    },
    get$length: function(_) {
      var count,
        it = this.get$iterator(this);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    skip$1: function(_, count) {
      return H.SkipIterable_SkipIterable(this, count, H._instanceType(this)._eval$1("Iterable.E"));
    },
    get$first: function(_) {
      var it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      return it.get$current();
    },
    elementAt$1: function(_, index) {
      var t1, elementIndex, element;
      P.RangeError_checkNotNegative(index, "index");
      for (t1 = this.get$iterator(this), elementIndex = 0; t1.moveNext$0();) {
        element = t1.get$current();
        if (index === elementIndex)
          return element;
        ++elementIndex;
      }
      throw H.wrapException(P.IndexError$(index, this, "index", null, elementIndex));
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToShortString(this, "(", ")");
    }
  };
  P._GeneratorIterable.prototype = {
    elementAt$1: function(_, index) {
      var $length = this.length;
      if (0 > index || index >= $length)
        H.throwExpression(P.IndexError$(index, this, "index", null, $length));
      return this._generator.call$1(index);
    },
    get$length: function(receiver) {
      return this.length;
    }
  };
  P.Iterator.prototype = {};
  P.Null.prototype = {
    get$hashCode: function(_) {
      return P.Object.prototype.get$hashCode.call(C.JSNull_methods, this);
    },
    toString$0: function(_) {
      return "null";
    }
  };
  P.Object.prototype = {constructor: P.Object, $isObject: 1,
    $eq: function(_, other) {
      return this === other;
    },
    get$hashCode: function(_) {
      return H.Primitives_objectHashCode(this);
    },
    toString$0: function(_) {
      return "Instance of '" + H.S(H.Primitives_objectTypeName(this)) + "'";
    },
    toString: function() {
      return this.toString$0(this);
    }
  };
  P._StringStackTrace.prototype = {
    toString$0: function(_) {
      return "";
    },
    $isStackTrace: 1
  };
  P.StringBuffer.prototype = {
    get$length: function(_) {
      return this._contents.length;
    },
    toString$0: function(_) {
      var t1 = this._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $isStringSink: 1
  };
  W.Blob.prototype = {$isBlob: 1};
  W.DedicatedWorkerGlobalScope.prototype = {
    postMessage$2: function(receiver, message, transfer) {
      receiver.postMessage(new P._StructuredCloneDart2Js([], []).walk$1(message));
      return;
    }
  };
  W.DomException.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    }
  };
  W.Event.prototype = {$isEvent: 1};
  W.EventTarget.prototype = {
    addEventListener$3: function(receiver, type, listener, useCapture) {
      type$.nullable_dynamic_Function_Event._as(listener);
      if (listener != null)
        this._addEventListener$3(receiver, type, listener, false);
    },
    _addEventListener$3: function(receiver, type, listener, options) {
      return receiver.addEventListener(type, H.convertDartClosureToJS(type$.nullable_dynamic_Function_Event._as(listener), 1), false);
    },
    $isEventTarget: 1
  };
  W.File.prototype = {$isFile: 1};
  W.MessageEvent.prototype = {$isMessageEvent: 1};
  W.MessagePort.prototype = {$isMessagePort: 1};
  W.WorkerGlobalScope.prototype = {};
  W.EventStreamProvider.prototype = {};
  W._EventStream.prototype = {};
  W._EventStreamSubscription.prototype = {
    _tryResume$0: function() {
      var t2,
        t1 = this._onData;
      if (t1 != null && true) {
        t2 = this._target;
        t2.toString;
        C.DedicatedWorkerGlobalScope_methods.addEventListener$3(t2, this._eventType, t1, false);
      }
    }
  };
  W._EventStreamSubscription_closure.prototype = {
    call$1: function(e) {
      return this.onData.call$1(type$.Event._as(e));
    },
    $signature: 19
  };
  P._StructuredClone.prototype = {
    findSlot$1: function(value) {
      var i,
        t1 = this.values,
        $length = t1.length;
      for (i = 0; i < $length; ++i)
        if (t1[i] === value)
          return i;
      C.JSArray_methods.add$1(t1, value);
      C.JSArray_methods.add$1(this.copies, null);
      return $length;
    },
    walk$1: function(e) {
      var slot, t2, copy, _this = this, t1 = {};
      if (e == null)
        return e;
      if (H._isBool(e))
        return e;
      if (typeof e == "number")
        return e;
      if (typeof e == "string")
        return e;
      if (e instanceof P.DateTime)
        return new Date(e._value);
      if (type$.File._is(e))
        return e;
      if (type$.Blob._is(e))
        return e;
      if (type$.NativeByteBuffer._is(e) || type$.NativeTypedData._is(e) || type$.MessagePort._is(e))
        return e;
      if (type$.Map_dynamic_dynamic._is(e)) {
        slot = _this.findSlot$1(e);
        t2 = _this.copies;
        if (slot >= t2.length)
          return H.ioore(t2, slot);
        copy = t1.copy = t2[slot];
        if (copy != null)
          return copy;
        copy = {};
        t1.copy = copy;
        C.JSArray_methods.$indexSet(t2, slot, copy);
        e.forEach$1(0, new P._StructuredClone_walk_closure(t1, _this));
        return t1.copy;
      }
      if (type$.List_dynamic._is(e)) {
        slot = _this.findSlot$1(e);
        t1 = _this.copies;
        if (slot >= t1.length)
          return H.ioore(t1, slot);
        copy = t1[slot];
        if (copy != null)
          return copy;
        return _this.copyList$2(e, slot);
      }
      if (type$.JSObject._is(e)) {
        slot = _this.findSlot$1(e);
        t2 = _this.copies;
        if (slot >= t2.length)
          return H.ioore(t2, slot);
        copy = t1.copy = t2[slot];
        if (copy != null)
          return copy;
        copy = {};
        t1.copy = copy;
        C.JSArray_methods.$indexSet(t2, slot, copy);
        _this.forEachObjectKey$2(e, new P._StructuredClone_walk_closure0(t1, _this));
        return t1.copy;
      }
      throw H.wrapException(P.UnimplementedError$("structured clone of other type"));
    },
    copyList$2: function(e, slot) {
      var i,
        t1 = J.getInterceptor$asx(e),
        $length = t1.get$length(e),
        copy = new Array($length);
      C.JSArray_methods.$indexSet(this.copies, slot, copy);
      for (i = 0; i < $length; ++i)
        C.JSArray_methods.$indexSet(copy, i, this.walk$1(t1.$index(e, i)));
      return copy;
    }
  };
  P._StructuredClone_walk_closure.prototype = {
    call$2: function(key, value) {
      this._box_0.copy[key] = this.$this.walk$1(value);
    },
    $signature: 5
  };
  P._StructuredClone_walk_closure0.prototype = {
    call$2: function(key, value) {
      this._box_0.copy[key] = this.$this.walk$1(value);
    },
    $signature: 5
  };
  P._AcceptStructuredClone.prototype = {
    findSlot$1: function(value) {
      var i,
        t1 = this.values,
        $length = t1.length;
      for (i = 0; i < $length; ++i)
        if (t1[i] === value)
          return i;
      C.JSArray_methods.add$1(t1, value);
      C.JSArray_methods.add$1(this.copies, null);
      return $length;
    },
    walk$1: function(e) {
      var millisSinceEpoch, t1, proto, slot, copy, t2, l, $length, i, _this = this, _box_0 = {};
      if (e == null)
        return e;
      if (H._isBool(e))
        return e;
      if (typeof e == "number")
        return e;
      if (typeof e == "string")
        return e;
      if (e instanceof Date) {
        millisSinceEpoch = e.getTime();
        if (Math.abs(millisSinceEpoch) <= 864e13)
          t1 = false;
        else
          t1 = true;
        if (t1)
          H.throwExpression(P.ArgumentError$("DateTime is outside valid range: " + millisSinceEpoch));
        P.ArgumentError_checkNotNull(true, "isUtc", type$.bool);
        return new P.DateTime(millisSinceEpoch, true);
      }
      if (e instanceof RegExp)
        throw H.wrapException(P.UnimplementedError$("structured clone of RegExp"));
      if (typeof Promise != "undefined" && e instanceof Promise)
        return P.promiseToFuture(e, type$.dynamic);
      proto = Object.getPrototypeOf(e);
      if (proto === Object.prototype || proto === null) {
        slot = _this.findSlot$1(e);
        t1 = _this.copies;
        if (slot >= t1.length)
          return H.ioore(t1, slot);
        copy = _box_0.copy = t1[slot];
        if (copy != null)
          return copy;
        t2 = type$.dynamic;
        copy = P.LinkedHashMap_LinkedHashMap$_empty(t2, t2);
        _box_0.copy = copy;
        C.JSArray_methods.$indexSet(t1, slot, copy);
        _this.forEachJsField$2(e, new P._AcceptStructuredClone_walk_closure(_box_0, _this));
        return _box_0.copy;
      }
      if (e instanceof Array) {
        l = e;
        slot = _this.findSlot$1(l);
        t1 = _this.copies;
        if (slot >= t1.length)
          return H.ioore(t1, slot);
        copy = t1[slot];
        if (copy != null)
          return copy;
        t2 = J.getInterceptor$asx(l);
        $length = t2.get$length(l);
        copy = _this.mustCopy ? new Array($length) : l;
        C.JSArray_methods.$indexSet(t1, slot, copy);
        for (t1 = J.getInterceptor$ax(copy), i = 0; i < $length; ++i)
          t1.$indexSet(copy, i, _this.walk$1(t2.$index(l, i)));
        return copy;
      }
      return e;
    }
  };
  P._AcceptStructuredClone_walk_closure.prototype = {
    call$2: function(key, value) {
      var t1 = this._box_0.copy,
        t2 = this.$this.walk$1(value);
      J.$indexSet$ax(t1, key, t2);
      return t2;
    },
    $signature: 20
  };
  P._StructuredCloneDart2Js.prototype = {
    forEachObjectKey$2: function(object, action) {
      var t1, t2, _i, key;
      type$.dynamic_Function_dynamic_dynamic._as(action);
      for (t1 = Object.keys(object), t2 = t1.length, _i = 0; _i < t2; ++_i) {
        key = t1[_i];
        action.call$2(key, object[key]);
      }
    }
  };
  P._AcceptStructuredCloneDart2Js.prototype = {
    forEachJsField$2: function(object, action) {
      var t1, t2, _i, key;
      type$.dynamic_Function_dynamic_dynamic._as(action);
      for (t1 = Object.keys(object), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        key = t1[_i];
        action.call$2(key, object[key]);
      }
    }
  };
  P.promiseToFuture_closure.prototype = {
    call$1: function(r) {
      var t1 = this.completer,
        t2 = t1.$ti;
      r = t2._eval$1("1/?")._as(this.T._eval$1("0/?")._as(r));
      t1 = t1.future;
      if (t1._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      t1._asyncComplete$1(t2._eval$1("1/")._as(r));
      return null;
    },
    $signature: 12
  };
  P.promiseToFuture_closure0.prototype = {
    call$1: function(e) {
      var t1, stackTrace;
      P.ArgumentError_checkNotNull(e, "error", type$.Object);
      t1 = this.completer.future;
      if (t1._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      stackTrace = P.AsyncError_defaultStackTrace(e);
      t1._asyncCompleteError$2(e, stackTrace);
      return null;
    },
    $signature: 12
  };
  R.ArchiveException.prototype = {};
  T.InputStreamBase.prototype = {};
  T.InputStream.prototype = {
    get$length: function(_) {
      var t1 = this._input_stream$_length,
        t2 = this.offset;
      if (typeof t1 !== "number")
        return t1.$sub();
      return t1 - (t2 - this.start);
    },
    get$isEOS: function() {
      var t1 = this.offset,
        t2 = this._input_stream$_length;
      if (typeof t2 !== "number")
        return H.iae(t2);
      return t1 >= this.start + t2;
    },
    $index: function(_, index) {
      var t1 = this.buffer,
        t2 = this.offset;
      if (typeof index !== "number")
        return H.iae(index);
      t2 += index;
      if (t2 < 0 || t2 >= t1.length)
        return H.ioore(t1, t2);
      return t1[t2];
    },
    readByte$0: function() {
      var t1 = this.buffer,
        t2 = this.offset++;
      if (t2 < 0 || t2 >= t1.length)
        return H.ioore(t1, t2);
      return t1[t2];
    },
    readUint32$0: function() {
      var b1, b2, b3, b4, _this = this,
        t1 = _this.buffer,
        t2 = _this.offset,
        t3 = _this.offset = t2 + 1,
        t4 = t1.length;
      if (t2 < 0 || t2 >= t4)
        return H.ioore(t1, t2);
      t2 = t1[t2];
      if (typeof t2 !== "number")
        return t2.$and();
      b1 = t2 & 255;
      t2 = _this.offset = t3 + 1;
      if (t3 < 0 || t3 >= t4)
        return H.ioore(t1, t3);
      t3 = t1[t3];
      if (typeof t3 !== "number")
        return t3.$and();
      b2 = t3 & 255;
      t3 = _this.offset = t2 + 1;
      if (t2 < 0 || t2 >= t4)
        return H.ioore(t1, t2);
      t2 = t1[t2];
      if (typeof t2 !== "number")
        return t2.$and();
      b3 = t2 & 255;
      _this.offset = t3 + 1;
      if (t3 < 0 || t3 >= t4)
        return H.ioore(t1, t3);
      t3 = t1[t3];
      if (typeof t3 !== "number")
        return t3.$and();
      b4 = t3 & 255;
      if (_this.byteOrder === 1)
        return (b1 << 24 | b2 << 16 | b3 << 8 | b4) >>> 0;
      return (b4 << 24 | b3 << 16 | b2 << 8 | b1) >>> 0;
    }
  };
  Q.OutputStreamBase.prototype = {};
  Q.OutputStream.prototype = {
    get$length: function(_) {
      return this._output_stream$_length;
    },
    writeBytes$1: function(bytes) {
      var len, t1, t2, t3, t4, _this = this;
      type$.legacy_List_legacy_int._as(bytes);
      len = bytes.length;
      for (; t1 = _this._output_stream$_length, t2 = t1 + len, t3 = _this._output_stream$_buffer, t4 = t3.length, t2 > t4;)
        _this._output_stream$_expandBuffer$1(t2 - t4);
      C.NativeUint8List_methods.setRange$3(t3, t1, t2, bytes);
      _this._output_stream$_length += len;
    },
    writeInputStream$1: function(stream) {
      var t2, t3, t4, t5, _this = this,
        t1 = stream.start;
      while (true) {
        t2 = _this._output_stream$_length;
        t3 = stream._input_stream$_length;
        t4 = stream.offset;
        if (typeof t3 !== "number")
          return t3.$sub();
        t4 = t2 + (t3 - (t4 - t1));
        t3 = _this._output_stream$_buffer;
        t5 = t3.length;
        if (!(t4 > t5))
          break;
        _this._output_stream$_expandBuffer$1(t4 - t5);
      }
      C.NativeUint8List_methods.setRange$4(t3, t2, t2 + stream.get$length(stream), stream.buffer, stream.offset);
      _this._output_stream$_length = _this._output_stream$_length + stream.get$length(stream);
    },
    subset$2: function(start, end) {
      var _this = this;
      if (start < 0)
        start = _this._output_stream$_length + start;
      if (end == null)
        end = _this._output_stream$_length;
      else if (end < 0)
        end = _this._output_stream$_length + end;
      return H.NativeUint8List_NativeUint8List$view(_this._output_stream$_buffer.buffer, start, end - start);
    },
    subset$1: function(start) {
      return this.subset$2(start, null);
    },
    _output_stream$_expandBuffer$1: function(required) {
      var blockSize = required != null ? required > 32768 ? required : 32768 : 32768,
        t1 = this._output_stream$_buffer,
        newBuffer = new Uint8Array((t1.length + blockSize) * 2);
      t1 = this._output_stream$_buffer;
      C.NativeUint8List_methods.setRange$3(newBuffer, 0, t1.length, t1);
      this._output_stream$_buffer = newBuffer;
    },
    _output_stream$_expandBuffer$0: function() {
      return this._output_stream$_expandBuffer$1(null);
    }
  };
  G._ZLibDecoder.prototype = {
    decodeBuffer$2$verify: function(input, verify) {
      var method, t1, t2, t3, buffer,
        cmf = input.readByte$0(),
        flg = input.readByte$0();
      if (typeof cmf !== "number")
        return cmf.$and();
      method = cmf & 8;
      C.JSInt_methods._shrOtherPositive$1(cmf, 3);
      if (method !== 8)
        throw H.wrapException(R.ArchiveException$("Only DEFLATE compression supported: " + method));
      if (typeof flg !== "number")
        return flg.$and();
      if (C.JSInt_methods.$mod((cmf << 8 >>> 0) + flg, 31) !== 0)
        throw H.wrapException(R.ArchiveException$("Invalid FCHECK"));
      if ((flg & 32) >>> 5 !== 0) {
        input.readUint32$0();
        throw H.wrapException(R.ArchiveException$("FDICT Encoding not currently supported"));
      }
      t1 = new Y.HuffmanTable();
      t1.HuffmanTable$1(C.List_2Bc);
      t2 = new Y.HuffmanTable();
      t2.HuffmanTable$1(C.List_X3d);
      t3 = Q.OutputStream$(null);
      new S.Inflate(input, t3, t1, t2)._inflate$0();
      buffer = type$.legacy_List_legacy_int._as(H.NativeUint8List_NativeUint8List$view(t3._output_stream$_buffer.buffer, 0, t3._output_stream$_length));
      input.readUint32$0();
      return buffer;
    }
  };
  Y.HuffmanTable.prototype = {
    HuffmanTable$1: function(lengths) {
      var i, t1, size, t2, t3, bitLength, code, skip, t4, rtemp, reversed, j, t5, _this = this,
        listSize = lengths.length;
      for (i = 0; i < listSize; ++i) {
        t1 = lengths[i];
        if (t1 > _this.maxCodeLength)
          _this.maxCodeLength = t1;
        if (t1 < _this.minCodeLength)
          _this.minCodeLength = t1;
      }
      size = C.JSInt_methods._shlPositive$1(1, _this.maxCodeLength);
      t1 = _this.table = new Uint32Array(size);
      for (t2 = _this.maxCodeLength, t3 = lengths.length, bitLength = 1, code = 0, skip = 2; bitLength <= t2;) {
        for (t4 = bitLength << 16, i = 0; i < listSize; ++i) {
          if (i >= t3)
            return H.ioore(lengths, i);
          if (lengths[i] === bitLength) {
            for (rtemp = code, reversed = 0, j = 0; j < bitLength; ++j) {
              reversed = (reversed << 1 | rtemp & 1) >>> 0;
              rtemp = rtemp >>> 1;
            }
            for (t5 = (t4 | i) >>> 0, j = reversed; j < size; j += skip) {
              if (j < 0 || j >= t1.length)
                return H.ioore(t1, j);
              t1[j] = t5;
            }
            ++code;
          }
        }
        ++bitLength;
        code = code << 1 >>> 0;
        skip = skip << 1 >>> 0;
      }
    }
  };
  S.Inflate.prototype = {
    _inflate$0: function() {
      var t1, t2, t3, t4, _this = this;
      _this._bitBufferLen = _this._bitBuffer = 0;
      t1 = _this.input;
      t2 = t1.start;
      while (true) {
        t3 = t1.offset;
        t4 = t1._input_stream$_length;
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (!(t3 < t2 + t4))
          break;
        if (!_this._parseBlock$0())
          break;
      }
    },
    _parseBlock$0: function() {
      var hdr, btype, len, t2, t3, bytes, _this = this,
        t1 = _this.input;
      if (t1.get$isEOS())
        return false;
      hdr = _this._readBits$1(3);
      btype = hdr >>> 1;
      switch (btype) {
        case 0:
          _this._bitBufferLen = _this._bitBuffer = 0;
          len = _this._readBits$1(16);
          t2 = _this._readBits$1(16);
          if (len !== 0 && len !== (t2 ^ 65535) >>> 0)
            H.throwExpression(R.ArchiveException$("Invalid uncompressed block header"));
          if (len > t1.get$length(t1))
            H.throwExpression(R.ArchiveException$("Input buffer is broken"));
          t2 = t1.offset;
          t3 = t1.start;
          bytes = T.InputStream$(t1.buffer, t1.byteOrder, len, t2 - t3 + t3);
          t1.offset = t1.offset + bytes.get$length(bytes);
          _this.output.writeInputStream$1(bytes);
          break;
        case 1:
          _this._decodeHuffman$2(_this._fixedLiteralLengthTable, _this._fixedDistanceTable);
          break;
        case 2:
          _this._parseDynamicHuffmanBlock$0();
          break;
        default:
          throw H.wrapException(R.ArchiveException$("unknown BTYPE: " + btype));
      }
      return (hdr & 1) === 0;
    },
    _readBits$1: function($length) {
      var t1, t2, t3, t4, t5, t6, _this = this;
      if ($length === 0)
        return 0;
      for (t1 = _this.input, t2 = t1.buffer, t3 = t1.start; t4 = _this._bitBufferLen, t4 < $length;) {
        t5 = t1.offset;
        t6 = t1._input_stream$_length;
        if (typeof t6 !== "number")
          return H.iae(t6);
        if (t5 >= t3 + t6)
          throw H.wrapException(R.ArchiveException$("input buffer is broken"));
        t1.offset = t5 + 1;
        if (t5 < 0 || t5 >= t2.length)
          return H.ioore(t2, t5);
        t5 = t2[t5];
        t6 = _this._bitBuffer;
        if (typeof t5 !== "number")
          return t5.$shl();
        _this._bitBuffer = (t6 | C.JSInt_methods.$shl(t5, t4)) >>> 0;
        _this._bitBufferLen = t4 + 8;
      }
      t1 = _this._bitBuffer;
      t2 = C.JSInt_methods._shlPositive$1(1, $length);
      _this._bitBuffer = C.JSInt_methods._shrBothPositive$1(t1, $length);
      _this._bitBufferLen = t4 - $length;
      return (t1 & t2 - 1) >>> 0;
    },
    _readCodeByTable$1: function(table) {
      var t1, t2, t3, t4, t5, t6, codeWithLength, codeLength, _this = this,
        codeTable = table.table,
        maxCodeLength = table.maxCodeLength;
      for (t1 = _this.input, t2 = t1.buffer, t3 = t1.start; t4 = _this._bitBufferLen, t4 < maxCodeLength;) {
        t5 = t1.offset;
        t6 = t1._input_stream$_length;
        if (typeof t6 !== "number")
          return H.iae(t6);
        if (t5 >= t3 + t6)
          break;
        t1.offset = t5 + 1;
        if (t5 < 0 || t5 >= t2.length)
          return H.ioore(t2, t5);
        t5 = t2[t5];
        t6 = _this._bitBuffer;
        if (typeof t5 !== "number")
          return t5.$shl();
        _this._bitBuffer = (t6 | C.JSInt_methods.$shl(t5, t4)) >>> 0;
        _this._bitBufferLen = t4 + 8;
      }
      t1 = _this._bitBuffer;
      t2 = (t1 & C.JSInt_methods._shlPositive$1(1, maxCodeLength) - 1) >>> 0;
      if (t2 >= codeTable.length)
        return H.ioore(codeTable, t2);
      codeWithLength = codeTable[t2];
      codeLength = codeWithLength >>> 16;
      _this._bitBuffer = C.JSInt_methods._shrBothPositive$1(t1, codeLength);
      _this._bitBufferLen = t4 - codeLength;
      return codeWithLength & 65535;
    },
    _parseDynamicHuffmanBlock$0: function() {
      var t1, i, t2, t3, codeLengthsTable, litlenLengths, distLengths, litlen, dist, _this = this,
        numLitLengthCodes = _this._readBits$1(5) + 257,
        numDistanceCodes = _this._readBits$1(5) + 1,
        numCodeLengths = _this._readBits$1(4) + 4,
        codeLengths = new Uint8Array(19);
      for (t1 = codeLengths.length, i = 0; i < numCodeLengths; ++i) {
        if (i >= 19)
          return H.ioore(C.List_uSC, i);
        t2 = C.List_uSC[i];
        t3 = _this._readBits$1(3);
        if (t2 >= t1)
          return H.ioore(codeLengths, t2);
        codeLengths[t2] = t3;
      }
      codeLengthsTable = new Y.HuffmanTable();
      codeLengthsTable.HuffmanTable$1(codeLengths);
      litlenLengths = new Uint8Array(numLitLengthCodes);
      distLengths = new Uint8Array(numDistanceCodes);
      litlen = _this._decode$3(numLitLengthCodes, codeLengthsTable, litlenLengths);
      dist = _this._decode$3(numDistanceCodes, codeLengthsTable, distLengths);
      t1 = new Y.HuffmanTable();
      t1.HuffmanTable$1(litlen);
      t2 = new Y.HuffmanTable();
      t2.HuffmanTable$1(dist);
      _this._decodeHuffman$2(t1, t2);
    },
    _decodeHuffman$2: function(litlen, dist) {
      var t1, code, t2, t3, ti, codeLength, distCode, distance, _this = this;
      for (t1 = _this.output; true;) {
        code = _this._readCodeByTable$1(litlen);
        if (code > 285)
          throw H.wrapException(R.ArchiveException$("Invalid Huffman Code " + code));
        if (code === 256)
          break;
        if (code < 256) {
          if (t1._output_stream$_length === t1._output_stream$_buffer.length)
            t1._output_stream$_expandBuffer$0();
          t2 = t1._output_stream$_buffer;
          t3 = t1._output_stream$_length++;
          if (t3 < 0 || t3 >= t2.length)
            return H.ioore(t2, t3);
          t2[t3] = code & 255 & 255;
          continue;
        }
        ti = code - 257;
        if (ti < 0)
          return H.ioore(C.List_qQn, ti);
        codeLength = C.List_qQn[ti] + _this._readBits$1(C.List_eea[ti]);
        distCode = _this._readCodeByTable$1(dist);
        if (distCode <= 29) {
          distance = C.List_i3t[distCode] + _this._readBits$1(C.List_X3d0[distCode]);
          for (t2 = -distance; codeLength > distance;) {
            t1.writeBytes$1(t1.subset$1(t2));
            codeLength -= distance;
          }
          if (codeLength === distance)
            t1.writeBytes$1(t1.subset$1(t2));
          else
            t1.writeBytes$1(t1.subset$2(t2, codeLength - distance));
        } else
          throw H.wrapException(R.ArchiveException$("Illegal unused distance symbol"));
      }
      for (t1 = _this.input; t2 = _this._bitBufferLen, t2 >= 8;) {
        _this._bitBufferLen = t2 - 8;
        if (--t1.offset < 0)
          t1.offset = 0;
      }
    },
    _decode$3: function(num, table, lengths) {
      var t1, prev, i, code, repeat, repeat0, i0, _this = this;
      type$.legacy_List_legacy_int._as(lengths);
      for (t1 = lengths.length, prev = 0, i = 0; i < num;) {
        code = _this._readCodeByTable$1(table);
        switch (code) {
          case 16:
            repeat = 3 + _this._readBits$1(2);
            for (; repeat0 = repeat - 1, repeat > 0; repeat = repeat0, i = i0) {
              i0 = i + 1;
              if (i < 0 || i >= t1)
                return H.ioore(lengths, i);
              lengths[i] = prev;
            }
            break;
          case 17:
            repeat = 3 + _this._readBits$1(3);
            for (; repeat0 = repeat - 1, repeat > 0; repeat = repeat0, i = i0) {
              i0 = i + 1;
              if (i < 0 || i >= t1)
                return H.ioore(lengths, i);
              lengths[i] = 0;
            }
            prev = 0;
            break;
          case 18:
            repeat = 11 + _this._readBits$1(7);
            for (; repeat0 = repeat - 1, repeat > 0; repeat = repeat0, i = i0) {
              i0 = i + 1;
              if (i < 0 || i >= t1)
                return H.ioore(lengths, i);
              lengths[i] = 0;
            }
            prev = 0;
            break;
          default:
            if (code > 15)
              throw H.wrapException(R.ArchiveException$("Invalid Huffman Code: " + code));
            i0 = i + 1;
            if (i < 0 || i >= t1)
              return H.ioore(lengths, i);
            lengths[i] = code;
            i = i0;
            prev = code;
            break;
        }
      }
      return lengths;
    }
  };
  Z.ZLibDecoderBase.prototype = {};
  Z.ZLibDecoder.prototype = {};
  G.ExifData.prototype = {
    ExifData$from$1: function(other) {
      var t1, i, t2;
      if (other != null && other.rawData != null) {
        t1 = new Array(other.rawData.length);
        t1.fixed$length = Array;
        this.set$rawData(H.setRuntimeTypeInfo(t1, type$.JSArray_legacy_Uint8List));
        for (i = 0; t1 = other.rawData, i < t1.length; ++i) {
          t2 = this.rawData;
          t1 = t1[i];
          (t2 && C.JSArray_methods).$indexSet(t2, i, new Uint8Array(t1.subarray(0, H._checkValidRange(0, null, t1.length))));
        }
      }
    },
    set$rawData: function(rawData) {
      this.rawData = type$.legacy_List_legacy_Uint8List._as(rawData);
    }
  };
  L.BitmapCompression.prototype = {
    toString$0: function(_) {
      return this._bmp_info$_name;
    }
  };
  L.BitmapFileHeader.prototype = {
    BitmapFileHeader$1: function(b) {
      var t1, t2, t3;
      if (!L.BitmapFileHeader_isValidFile(b))
        throw H.wrapException(K.ImageException$("Not a bitmap file."));
      t1 = b.offset;
      if (typeof t1 !== "number")
        return t1.$add();
      b.offset = t1 + 2;
      t1 = b.readUint32$0();
      t2 = $.$get$__uint32();
      t2[0] = t1;
      t1 = $.$get$__uint32ToInt32();
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      this.fileLength = t1[0];
      t3 = b.offset;
      if (typeof t3 !== "number")
        return t3.$add();
      b.offset = t3 + 4;
      t2[0] = b.readUint32$0();
      this.offset = t1[0];
    },
    toJson$0: function() {
      return P.LinkedHashMap_LinkedHashMap$_literal(["offset", this.offset, "fileLength", this.fileLength, "fileType", 19778], type$.legacy_String, type$.legacy_int);
    }
  };
  L.BmpInfo.prototype = {
    get$ignoreAlphaChannel: function() {
      var t1 = this.headerSize;
      if (t1 !== 40)
        t1 = t1 === 124 && this.v5alphaMask === 0;
      else
        t1 = true;
      return t1;
    },
    get$height: function(_) {
      return Math.abs(this._height);
    },
    BmpInfo$2$fileHeader: function(p, fileHeader) {
      var _this = this;
      if (C.JSArray_methods.contains$1(H.setRuntimeTypeInfo([1, 4, 8], type$.JSArray_legacy_int), _this.bpp))
        _this.readPalette$1(p);
      if (_this.headerSize === 124) {
        _this.v5redMask = p.readUint32$0();
        _this.v5greenMask = p.readUint32$0();
        _this.v5blueMask = p.readUint32$0();
        _this.v5alphaMask = p.readUint32$0();
      }
      P.print(_this.toString$0(0));
    },
    readPalette$1: function(p) {
      var _this = this,
        colors = _this.totalColors;
      if (colors === 0)
        colors = C.JSInt_methods._shlPositive$1(1, _this.bpp);
      P.print("reading colors: " + colors);
      _this.set$colorPalette(P.Iterable_Iterable$generate(colors, new L.BmpInfo_readPalette_closure(_this, p, _this.headerSize === 12 ? 3 : 4), type$.legacy_int).toList$0(0));
    },
    _readRgba$2$aDefault: function(input, aDefault) {
      var b, g, r, a;
      if (!C.JSInt_methods.get$isNegative(this._height)) {
        b = input.readByte$0();
        g = input.readByte$0();
        r = input.readByte$0();
        a = aDefault == null ? input.readByte$0() : aDefault;
        return K.getColor(r, g, b, this.get$ignoreAlphaChannel() ? 255 : a);
      } else {
        r = input.readByte$0();
        b = input.readByte$0();
        g = input.readByte$0();
        a = aDefault == null ? input.readByte$0() : aDefault;
        return K.getColor(r, b, g, this.get$ignoreAlphaChannel() ? 255 : a);
      }
    },
    _readRgba$1: function(input) {
      return this._readRgba$2$aDefault(input, null);
    },
    decodeRgba$2: function(input, pixel) {
      var b, t1, right, t2, _this = this;
      type$.legacy_void_Function_legacy_int._as(pixel);
      if (_this.colorPalette != null)
        if (_this.bpp === 4) {
          b = input.readByte$0();
          if (typeof b !== "number")
            return b.$shr();
          t1 = C.JSInt_methods._shrOtherPositive$1(b, 4);
          right = b & 15;
          t2 = _this.colorPalette;
          if (t1 >= t2.length)
            return H.ioore(t2, t1);
          pixel.call$1(t2[t1]);
          t1 = _this.colorPalette;
          if (right >= t1.length)
            return H.ioore(t1, right);
          pixel.call$1(t1[right]);
          return;
        }
      t1 = _this.compression;
      if (t1 === C.BitmapCompression_0 && _this.bpp === 32)
        return pixel.call$1(_this._readRgba$1(input));
      else {
        t2 = _this.bpp;
        if (t2 === 32 && t1 === C.BitmapCompression_1)
          return pixel.call$1(_this._readRgba$1(input));
        else if (t2 === 24)
          return pixel.call$1(_this._readRgba$2$aDefault(input, 255));
        else
          throw H.wrapException(K.ImageException$("Unsupported bpp (" + t2 + ") or compression unsupported."));
      }
    },
    _compToString$0: function() {
      var t1 = this.compression;
      switch (t1) {
        case C.BitmapCompression_0:
          return "BI_BITFIELDS";
        case C.BitmapCompression_1:
          return "none";
      }
      return "UNSUPPORTED: " + t1.toString$0(0);
    },
    toString$0: function(_) {
      var _this = this,
        t1 = P.LinkedHashMap_LinkedHashMap$_literal(["headerSize", _this.headerSize, "width", _this.BmpInfo_width, "height", _this.get$height(_this), "planes", _this.planes, "bpp", _this.bpp, "file", _this.file.toJson$0(), "compression", _this._compToString$0(), "imageSize", _this.imageSize, "xppm", _this.xppm, "yppm", _this.yppm, "totalColors", _this.totalColors, "importantColors", _this.importantColors, "readBottomUp", !C.JSInt_methods.get$isNegative(_this._height), "v5redMask", Z.debugBits32(_this.v5redMask), "v5greenMask", Z.debugBits32(_this.v5greenMask), "v5blueMask", Z.debugBits32(_this.v5blueMask), "v5alphaMask", Z.debugBits32(_this.v5alphaMask)], type$.legacy_String, type$.legacy_Object),
        output = new P.StringBuffer(""),
        stringifier = new P._JsonStringStringifierPretty(" ", 0, output, [], P.convert___defaultToEncodable$closure());
      stringifier.writeObject$1(t1);
      t1 = output._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    set$colorPalette: function(colorPalette) {
      this.colorPalette = type$.legacy_List_legacy_int._as(colorPalette);
    }
  };
  L.BmpInfo_readPalette_closure.prototype = {
    call$1: function(i) {
      var t1;
      H._asIntS(i);
      t1 = this.colorBytes === 3 ? 100 : null;
      return this.$this._readRgba$2$aDefault(this.p, t1);
    },
    $signature: 21
  };
  E.BmpDecoder.prototype = {
    startDecode$1: function(bytes) {
      var t1, _null = null;
      type$.legacy_List_legacy_int._as(bytes);
      if (!L.BitmapFileHeader_isValidFile(Z.InputBuffer$(bytes, false, _null, 0)))
        return _null;
      t1 = Z.InputBuffer$(bytes, false, _null, 0);
      this._bmp_decoder$_input = t1;
      return this.info = L.BmpInfo$(t1, _null);
    },
    decodeFrame$1: function(frame) {
      var rowStride, t3, image, y, y0, line, bytes, t4, _box_0, _box_00, _this = this,
        t1 = _this._bmp_decoder$_input,
        t2 = _this.info;
      t1.offset = t2.file.offset;
      t1 = t2.BmpInfo_width;
      rowStride = C.JSInt_methods._shrOtherPositive$1(t1 * t2.bpp, 3);
      t3 = C.JSInt_methods.$mod(rowStride, 4);
      if (t3 !== 0)
        rowStride += 4 - t3;
      image = U.Image$(t1, t2.get$height(t2), C.Channels_1, null, null);
      t1 = image.height;
      if (typeof t1 !== "number")
        return t1.$sub();
      y = t1 - 1;
      t1 = image.width;
      y0 = y;
      for (; y0 >= 0; --y0) {
        t2 = _this.info._height;
        line = !(t2 === 0 ? 1 / t2 < 0 : t2 < 0) ? y0 : y - y0;
        t2 = _this._bmp_decoder$_input;
        bytes = t2.subset$1(rowStride);
        t3 = t2.offset;
        t4 = bytes.offset;
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (typeof t3 !== "number")
          return t3.$add();
        t2.offset = t3 + (bytes.end - t4);
        _box_0 = {};
        _box_0.x = 0;
        if (typeof t1 !== "number")
          return H.iae(t1);
        for (; _box_0.x < t1; _box_00 = {}, _box_00.x = _box_0.x, _box_0 = _box_00)
          _this.info.decodeRgba$2(bytes, new E.BmpDecoder_decodeFrame_closure(_box_0, image, line));
      }
      return image;
    },
    decodeImage$1: function(data) {
      type$.legacy_List_legacy_int._as(data);
      if (!L.BitmapFileHeader_isValidFile(Z.InputBuffer$(data, false, null, 0)))
        return null;
      this.startDecode$1(data);
      return this.decodeFrame$1(0);
    }
  };
  E.BmpDecoder_decodeFrame_closure.prototype = {
    call$1: function(color) {
      return this.image.setPixel$3(this._box_0.x++, this.line, color);
    },
    $signature: 7
  };
  E.DibDecoder.prototype = {};
  A.DecodeInfo.prototype = {};
  B.Decoder.prototype = {};
  E.Encoder.prototype = {};
  U.ExrAttribute.prototype = {};
  D.InternalExrB44Compressor.prototype = {
    numScanLines$0: function() {
      return this._numScanLines;
    },
    uncompress$5: function(inPtr, x, y, width, height) {
      throw H.wrapException(K.ImageException$("B44 compression not yet supported."));
    },
    uncompress$3: function(inPtr, x, y) {
      return this.uncompress$5(inPtr, x, y, null, null);
    }
  };
  D.ExrChannel.prototype = {
    ExrChannel$1: function(input) {
      var _this = this,
        t1 = input.readString$0();
      _this.name = t1;
      if (t1.length === 0) {
        _this.name = null;
        return;
      }
      _this.type = input.readUint32$0();
      input.readByte$0();
      t1 = input.offset;
      if (typeof t1 !== "number")
        return t1.$add();
      input.offset = t1 + 3;
      _this.xSampling = input.readUint32$0();
      _this.ySampling = input.readUint32$0();
      t1 = _this.type;
      switch (t1) {
        case 0:
          _this.size = 4;
          break;
        case 1:
          _this.size = 2;
          break;
        case 2:
          _this.size = 4;
          break;
        default:
          throw H.wrapException(K.ImageException$("EXR Invalid pixel type: " + H.S(t1)));
      }
    }
  };
  B.ExrCompressor.prototype = {
    uncompress$5: function(inPtr, x, y, width, height) {
      throw H.wrapException(K.ImageException$("Unsupported compression type"));
    },
    uncompress$3: function(inPtr, x, y) {
      return this.uncompress$5(inPtr, x, y, null, null);
    }
  };
  B.InternalExrCompressor.prototype = {};
  Y.ExrHufDec.prototype = {
    set$p: function(p) {
      this.p = type$.legacy_List_legacy_int._as(p);
    }
  };
  Y.ExrImage.prototype = {
    ExrImage$1: function(bytes) {
      var t1, part, t2, t3, t4, t5, t6, _i, _this = this,
        input = Z.InputBuffer$(bytes, false, null, 0);
      if (input.readUint32$0() !== 20000630)
        throw H.wrapException(K.ImageException$("File is not an OpenEXR image file."));
      t1 = _this.version = input.readByte$0();
      if (t1 !== 2)
        throw H.wrapException(K.ImageException$("Cannot read version " + H.S(t1) + " image files."));
      t1 = _this.flags = input.readUint24$0();
      if ((t1 & 4294967289) >>> 0 !== 0)
        throw H.wrapException(K.ImageException$("The file format version number's flag field contains unrecognized flags."));
      if ((t1 & 16) === 0) {
        part = S.InternalExrPart$((t1 & 2) !== 0, input);
        if (part.width != null)
          C.JSArray_methods.add$1(_this._parts, part);
      } else
        for (t1 = _this._parts, t2 = type$.legacy_String, t3 = type$.legacy_HdrSlice, t4 = type$.JSArray_legacy_ExrChannel, t5 = type$.legacy_ExrAttribute; true;) {
          t6 = (_this.flags & 2) !== 0;
          part = new S.InternalExrPart(new F.HdrImage(P.LinkedHashMap_LinkedHashMap$_empty(t2, t3)), H.setRuntimeTypeInfo([], t4), P.LinkedHashMap_LinkedHashMap$_empty(t2, t5), t6);
          part.ExrPart$2(t6, input);
          if (part.width == null)
            break;
          C.JSArray_methods.add$1(t1, part);
        }
      t1 = _this._parts;
      t2 = t1.length;
      if (t2 === 0)
        throw H.wrapException(K.ImageException$("Error reading image header"));
      for (_i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
        t1[_i].readOffsets$1(input);
      _this._readImage$1(input);
    },
    _readImage$1: function(input) {
      var t1, pi, part, framebuffer, t2, t3, ci, ch, t4, t5, _this = this;
      for (t1 = _this._parts, pi = 0; pi < t1.length; ++pi) {
        part = t1[pi];
        framebuffer = part.framebuffer;
        for (t2 = part.channels, t3 = framebuffer.slices, ci = 0; ci < t2.length; ++ci) {
          ch = t2[ci];
          if (!t3.containsKey$1(ch.name)) {
            t4 = part.width;
            _this.width = t4;
            t5 = part.height;
            _this.height = t5;
            framebuffer.addSlice$1(K.HdrSlice$(ch.name, t4, t5, ch.type));
          }
        }
        if (part._tiled)
          _this._readTiledPart$2(pi, input);
        else
          _this._readScanlinePart$2(pi, input);
      }
    },
    _readTiledPart$2: function(pi, input) {
      var part, multiPart, compressor, offsets, imgData, t2, ly, l, t3, lx, ty, oi, t4, tx, tileX, tileY, bytes, t5, ty0, t6, uncompressedData, tileWidth, tileHeight, len, numChannels, si, yi, ci, ch, slice, tx0, t7, xx, bi, t8, si0, di, _this = this,
        t1 = _this._parts;
      if (pi >= t1.length)
        return H.ioore(t1, pi);
      part = t1[pi];
      multiPart = (_this.flags & 16) !== 0;
      compressor = part._compressor;
      offsets = part._offsets;
      imgData = Z.InputBuffer$from(input, null, 0);
      t1 = part.channels;
      t2 = part.framebuffer.slices;
      ly = 0;
      l = 0;
      while (true) {
        t3 = part._numYLevels;
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (!(ly < t3))
          break;
        lx = 0;
        while (true) {
          t3 = part._numXLevels;
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (!(lx < t3))
            break;
          t3 = l !== 0;
          ty = 0;
          oi = 0;
          while (true) {
            t4 = part._numYTiles;
            if (ly >= t4.length)
              return H.ioore(t4, ly);
            t4 = t4[ly];
            if (typeof t4 !== "number")
              return H.iae(t4);
            if (!(ty < t4))
              break;
            tx = 0;
            while (true) {
              t4 = part._numXTiles;
              if (lx >= t4.length)
                return H.ioore(t4, lx);
              t4 = t4[lx];
              if (typeof t4 !== "number")
                return H.iae(t4);
              if (!(tx < t4))
                break;
              if (t3)
                break;
              if (l < 0 || l >= offsets.length)
                return H.ioore(offsets, l);
              t4 = offsets[l];
              if (oi < 0 || oi >= t4.length)
                return H.ioore(t4, oi);
              imgData.offset = t4[oi];
              if (multiPart)
                if (imgData.readUint32$0() !== pi)
                  throw H.wrapException(K.ImageException$("Invalid Image Data"));
              tileX = imgData.readUint32$0();
              tileY = imgData.readUint32$0();
              imgData.readUint32$0();
              imgData.readUint32$0();
              bytes = imgData.subset$1(imgData.readUint32$0());
              t4 = imgData.offset;
              t5 = bytes.offset;
              if (typeof t5 !== "number")
                return H.iae(t5);
              if (typeof t4 !== "number")
                return t4.$add();
              imgData.offset = t4 + (bytes.end - t5);
              t5 = part._tileHeight;
              if (typeof t5 !== "number")
                return H.iae(t5);
              ty0 = tileY * t5;
              t4 = part._tileWidth;
              if (typeof t4 !== "number")
                return H.iae(t4);
              compressor.toString;
              t6 = _this.width;
              if (typeof t6 !== "number")
                return H.iae(t6);
              t6 = _this.height;
              if (typeof t6 !== "number")
                return H.iae(t6);
              uncompressedData = compressor.uncompress$5(bytes, tileX * t4, ty0, t4, t5);
              tileWidth = compressor.decodedWidth;
              tileHeight = compressor.decodedHeight;
              len = uncompressedData.length;
              numChannels = t1.length;
              si = 0;
              yi = 0;
              while (true) {
                if (yi < tileHeight) {
                  t4 = _this.height;
                  if (typeof t4 !== "number")
                    return H.iae(t4);
                  t4 = ty0 < t4;
                } else
                  t4 = false;
                if (!t4)
                  break;
                for (ci = 0; ci < numChannels; ++ci) {
                  if (ci >= t1.length)
                    return H.ioore(t1, ci);
                  ch = t1[ci];
                  t4 = t2.$index(0, ch.name).data.buffer;
                  slice = new Uint8Array(t4, 0);
                  if (si >= len)
                    break;
                  t4 = part._tileWidth;
                  if (typeof t4 !== "number")
                    return H.iae(t4);
                  tx0 = tileX * t4;
                  for (t4 = ch.size, t5 = part.width, t6 = part.height, t7 = slice.length, xx = 0; xx < tileWidth; ++xx, ++tx0) {
                    if (typeof t4 !== "number")
                      return H.iae(t4);
                    bi = 0;
                    for (; bi < t4; ++bi, si = si0) {
                      if (typeof t5 !== "number")
                        return H.iae(t5);
                      if (tx0 < t5) {
                        if (typeof t6 !== "number")
                          return H.iae(t6);
                        t8 = ty0 < t6;
                      } else
                        t8 = false;
                      si0 = si + 1;
                      if (t8) {
                        di = (ty0 * t5 + tx0) * t4 + bi;
                        if (si < 0 || si >= len)
                          return H.ioore(uncompressedData, si);
                        t8 = uncompressedData[si];
                        if (di < 0 || di >= t7)
                          return H.ioore(slice, di);
                        slice[di] = t8;
                      }
                    }
                  }
                }
                ++yi;
                ++ty0;
              }
              ++tx;
              ++oi;
            }
            ++ty;
          }
          ++lx;
          ++l;
        }
        ++ly;
      }
    },
    _readScanlinePart$2: function(pi, input) {
      var part, multiPart, compressor, offsets, linesInBuffer, t2, fbi, imgData, t3, t4, t5, yy, _i, t6, t7, bytes, uncompressedData, len, numChannels, yi, si, ci, ch, slice, t8, xx, bi, t9, si0, t10,
        t1 = this._parts;
      if (pi >= t1.length)
        return H.ioore(t1, pi);
      part = t1[pi];
      multiPart = (this.flags & 16) !== 0;
      compressor = part._compressor;
      t1 = part._offsets;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      offsets = t1[0];
      linesInBuffer = part._linesInBuffer;
      t1 = part.channels;
      t2 = t1.length;
      fbi = new Uint32Array(t2);
      imgData = Z.InputBuffer$from(input, null, 0);
      for (t2 = offsets.length, t3 = fbi.length, t4 = part.framebuffer.slices, t5 = compressor != null, yy = 0, _i = 0; _i < t2; ++_i) {
        imgData.offset = offsets[_i];
        if (multiPart)
          if (imgData.readUint32$0() !== pi)
            throw H.wrapException(K.ImageException$("Invalid Image Data"));
        t6 = imgData.readUint32$0();
        t7 = $.$get$__uint32();
        t7[0] = t6;
        t6 = $.$get$__uint32ToInt32();
        if (0 >= t6.length)
          return H.ioore(t6, 0);
        t6[0];
        t7[0] = imgData.readUint32$0();
        bytes = imgData.subset$1(t6[0]);
        t6 = imgData.offset;
        t7 = bytes.offset;
        if (typeof t7 !== "number")
          return H.iae(t7);
        if (typeof t6 !== "number")
          return t6.$add();
        imgData.offset = t6 + (bytes.end - t7);
        uncompressedData = t5 ? compressor.uncompress$3(bytes, 0, yy) : bytes.toUint8List$0();
        len = uncompressedData.length;
        numChannels = t1.length;
        if (typeof linesInBuffer !== "number")
          return H.iae(linesInBuffer);
        yi = 0;
        while (true) {
          if (yi < linesInBuffer) {
            t6 = this.height;
            if (typeof t6 !== "number")
              return H.iae(t6);
            t6 = yy < t6;
          } else
            t6 = false;
          if (!t6)
            break;
          t6 = part._offsetInLineBuffer;
          if (yy < 0 || yy >= t6.length)
            return H.ioore(t6, yy);
          si = t6[yy];
          if (si >= len)
            break;
          for (ci = 0; ci < numChannels; ++ci) {
            if (ci >= t1.length)
              return H.ioore(t1, ci);
            ch = t1[ci];
            t6 = t4.$index(0, ch.name).data.buffer;
            slice = new Uint8Array(t6, 0);
            if (si >= len)
              break;
            t6 = part.width;
            if (typeof t6 !== "number")
              return H.iae(t6);
            t7 = ch.size;
            t8 = slice.length;
            xx = 0;
            for (; xx < t6; ++xx) {
              if (typeof t7 !== "number")
                return H.iae(t7);
              bi = 0;
              for (; bi < t7; ++bi, si = si0) {
                if (ci >= t3)
                  return H.ioore(fbi, ci);
                t9 = fbi[ci];
                fbi[ci] = t9 + 1;
                si0 = si + 1;
                if (si < 0 || si >= len)
                  return H.ioore(uncompressedData, si);
                t10 = uncompressedData[si];
                if (t9 >= t8)
                  return H.ioore(slice, t9);
                slice[t9] = t10;
              }
            }
          }
          ++yi;
          ++yy;
        }
      }
    }
  };
  S.ExrPart.prototype = {
    ExrPart$2: function(_tiled, input) {
      var t1, t2, t3, $name, bytes, t4, t5, channel, t6, t7, t8, s, minX, maxX, minY, maxY, num, ly, l, lx, _i, ch, t9, nBytes, y, maxBytesPerLine, offset, i, _this = this,
        _s25_ = "Unknown LevelMode format.";
      for (t1 = _this.attributes, t2 = type$.JSArray_legacy_int, t3 = _this.channels; true;) {
        $name = input.readString$0();
        if ($name.length === 0)
          break;
        input.readString$0();
        bytes = input.subset$1(input.readUint32$0());
        t4 = input.offset;
        t5 = bytes.offset;
        if (typeof t5 !== "number")
          return H.iae(t5);
        if (typeof t4 !== "number")
          return t4.$add();
        input.offset = t4 + (bytes.end - t5);
        t1.$indexSet(0, $name, new U.ExrAttribute());
        switch ($name) {
          case "channels":
            for (; true;) {
              channel = new D.ExrChannel();
              channel.ExrChannel$1(bytes);
              if (channel.name == null)
                break;
              C.JSArray_methods.add$1(t3, channel);
            }
            break;
          case "chromaticities":
            t4 = new Float32Array(8);
            _this.chromaticities = t4;
            t5 = bytes.readUint32$0();
            t6 = $.$get$__uint32();
            t6[0] = t5;
            t5 = $.$get$__uint32ToFloat32();
            if (0 >= t5.length)
              return H.ioore(t5, 0);
            t4[0] = t5[0];
            t4 = _this.chromaticities;
            t6[0] = bytes.readUint32$0();
            t4[1] = t5[0];
            t4 = _this.chromaticities;
            t6[0] = bytes.readUint32$0();
            t4[2] = t5[0];
            t4 = _this.chromaticities;
            t6[0] = bytes.readUint32$0();
            t4[3] = t5[0];
            t4 = _this.chromaticities;
            t6[0] = bytes.readUint32$0();
            t4[4] = t5[0];
            t4 = _this.chromaticities;
            t6[0] = bytes.readUint32$0();
            t4[5] = t5[0];
            t4 = _this.chromaticities;
            t6[0] = bytes.readUint32$0();
            t4[6] = t5[0];
            t4 = _this.chromaticities;
            t6[0] = bytes.readUint32$0();
            t4[7] = t5[0];
            break;
          case "compression":
            t4 = bytes.buffer;
            t5 = bytes.offset;
            if (typeof t5 !== "number")
              return t5.$add();
            bytes.offset = t5 + 1;
            t5 = J.$index$asx(t4, t5);
            _this._compressionType = t5;
            if (typeof t5 !== "number")
              return t5.$gt();
            if (t5 > 7)
              throw H.wrapException(K.ImageException$("EXR Invalid compression type"));
            break;
          case "dataWindow":
            t4 = bytes.readUint32$0();
            t5 = $.$get$__uint32();
            t5[0] = t4;
            t4 = $.$get$__uint32ToInt32();
            if (0 >= t4.length)
              return H.ioore(t4, 0);
            t6 = t4[0];
            t5[0] = bytes.readUint32$0();
            t7 = t4[0];
            t5[0] = bytes.readUint32$0();
            t8 = t4[0];
            t5[0] = bytes.readUint32$0();
            _this.set$dataWindow(H.setRuntimeTypeInfo([t6, t7, t8, t4[0]], t2));
            t4 = _this.dataWindow;
            _this.width = t4[2] - t4[0] + 1;
            _this.height = t4[3] - t4[1] + 1;
            break;
          case "displayWindow":
            t4 = bytes.readUint32$0();
            t5 = $.$get$__uint32();
            t5[0] = t4;
            t4 = $.$get$__uint32ToInt32();
            if (0 >= t4.length)
              return H.ioore(t4, 0);
            t6 = t4[0];
            t5[0] = bytes.readUint32$0();
            t7 = t4[0];
            t5[0] = bytes.readUint32$0();
            t8 = t4[0];
            t5[0] = bytes.readUint32$0();
            _this.set$displayWindow(H.setRuntimeTypeInfo([t6, t7, t8, t4[0]], t2));
            break;
          case "lineOrder":
            break;
          case "pixelAspectRatio":
            t4 = bytes.readUint32$0();
            $.$get$__uint32()[0] = t4;
            t4 = $.$get$__uint32ToFloat32();
            if (0 >= t4.length)
              return H.ioore(t4, 0);
            t4[0];
            break;
          case "screenWindowCenter":
            t4 = bytes.readUint32$0();
            t5 = $.$get$__uint32();
            t5[0] = t4;
            t4 = $.$get$__uint32ToFloat32();
            if (0 >= t4.length)
              return H.ioore(t4, 0);
            t4[0];
            t5[0] = bytes.readUint32$0();
            t4[0];
            break;
          case "screenWindowWidth":
            t4 = bytes.readUint32$0();
            $.$get$__uint32()[0] = t4;
            t4 = $.$get$__uint32ToFloat32();
            if (0 >= t4.length)
              return H.ioore(t4, 0);
            t4[0];
            break;
          case "tiles":
            _this._tileWidth = bytes.readUint32$0();
            _this._tileHeight = bytes.readUint32$0();
            t4 = bytes.buffer;
            t5 = bytes.offset;
            if (typeof t5 !== "number")
              return t5.$add();
            bytes.offset = t5 + 1;
            t5 = J.$index$asx(t4, t5);
            if (typeof t5 !== "number")
              return t5.$and();
            _this._tileLevelMode = t5 & 15;
            _this._tileRoundingMode = C.JSInt_methods._shrOtherPositive$1(t5, 4) & 15;
            break;
          case "type":
            s = bytes.readString$0();
            if (s !== "deepscanline")
              if (s !== "deeptile")
                throw H.wrapException(K.ImageException$("EXR Invalid type: " + s));
            break;
          default:
            break;
        }
      }
      if (_this._tiled) {
        t1 = _this.dataWindow;
        minX = t1[0];
        maxX = t1[2];
        minY = t1[1];
        maxY = t1[3];
        switch (_this._tileLevelMode) {
          case 0:
            num = 1;
            break;
          case 1:
            num = _this._roundLog2$2(Math.max(maxX - minX + 1, maxY - minY + 1), _this._tileRoundingMode) + 1;
            break;
          case 2:
            num = _this._roundLog2$2(maxX - minX + 1, _this._tileRoundingMode) + 1;
            break;
          default:
            H.throwExpression(K.ImageException$(_s25_));
            num = 0;
        }
        _this._numXLevels = num;
        t1 = _this.dataWindow;
        minX = t1[0];
        maxX = t1[2];
        minY = t1[1];
        maxY = t1[3];
        switch (_this._tileLevelMode) {
          case 0:
            num = 1;
            break;
          case 1:
            num = _this._roundLog2$2(Math.max(maxX - minX + 1, maxY - minY + 1), _this._tileRoundingMode) + 1;
            break;
          case 2:
            num = _this._roundLog2$2(maxY - minY + 1, _this._tileRoundingMode) + 1;
            break;
          default:
            H.throwExpression(K.ImageException$(_s25_));
            num = 0;
        }
        _this._numYLevels = num;
        if (_this._tileLevelMode !== 2)
          _this._numYLevels = 1;
        t1 = _this._numXLevels;
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = new Array(t1);
        t1.fixed$length = Array;
        _this.set$_numXTiles(H.setRuntimeTypeInfo(t1, t2));
        t1 = _this._numYLevels;
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = new Array(t1);
        t1.fixed$length = Array;
        _this.set$_numYTiles(H.setRuntimeTypeInfo(t1, t2));
        t2 = _this._numXTiles;
        t1 = _this._numXLevels;
        t3 = _this.dataWindow;
        _this._calculateNumTiles$6(t2, t1, t3[0], t3[2], _this._tileWidth, _this._tileRoundingMode);
        t3 = _this._numYTiles;
        t1 = _this._numYLevels;
        t2 = _this.dataWindow;
        _this._calculateNumTiles$6(t3, t1, t2[1], t2[3], _this._tileHeight, _this._tileRoundingMode);
        t2 = _this._calculateBytesPerPixel$0();
        _this._bytesPerPixel = t2;
        t1 = _this._tileWidth;
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = t2 * t1;
        _this._maxBytesPerTileLine = t1;
        _this._compressor = B.ExrCompressor_ExrCompressor(_this._compressionType, _this, t1, _this._tileHeight);
        t1 = _this._numXLevels;
        t2 = _this._numYLevels;
        if (typeof t1 !== "number")
          return t1.$mul();
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = new Array(t1 * t2);
        t2.fixed$length = Array;
        _this.set$_offsets(H.setRuntimeTypeInfo(t2, type$.JSArray_legacy_Uint32List));
        ly = 0;
        l = 0;
        while (true) {
          t1 = _this._numYLevels;
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(ly < t1))
            break;
          lx = 0;
          while (true) {
            t1 = _this._numXLevels;
            if (typeof t1 !== "number")
              return H.iae(t1);
            if (!(lx < t1))
              break;
            t1 = _this._offsets;
            t2 = _this._numXTiles;
            if (lx >= t2.length)
              return H.ioore(t2, lx);
            t2 = t2[lx];
            t3 = _this._numYTiles;
            if (ly >= t3.length)
              return H.ioore(t3, ly);
            t3 = t3[ly];
            if (typeof t2 !== "number")
              return t2.$mul();
            if (typeof t3 !== "number")
              return H.iae(t3);
            (t1 && C.JSArray_methods).$indexSet(t1, l, new Uint32Array(t2 * t3));
            ++lx;
            ++l;
          }
          ++ly;
        }
      } else {
        t1 = _this.height;
        if (typeof t1 !== "number")
          return t1.$add();
        t1 = _this._bytesPerLine = new Uint32Array(t1 + 1);
        for (t2 = t3.length, t4 = _this.height, t5 = _this.dataWindow, t6 = _this.width, t7 = t1.length, _i = 0; _i < t2; ++_i) {
          ch = t3[_i];
          t8 = ch.size;
          if (typeof t8 !== "number")
            return t8.$mul();
          if (typeof t6 !== "number")
            return H.iae(t6);
          t9 = ch.xSampling;
          if (typeof t9 !== "number")
            return H.iae(t9);
          nBytes = C.JSInt_methods.$tdiv(t8 * t6, t9);
          if (typeof t4 !== "number")
            return H.iae(t4);
          t8 = ch.ySampling;
          y = 0;
          for (; y < t4; ++y) {
            t9 = t5[1];
            if (typeof t8 !== "number")
              return H.iae(t8);
            if (C.JSInt_methods.$mod(y + t9, t8) === 0) {
              if (y >= t7)
                return H.ioore(t1, y);
              t1[y] = t1[y] + nBytes;
            }
          }
        }
        if (typeof t4 !== "number")
          return H.iae(t4);
        maxBytesPerLine = 0;
        y = 0;
        for (; y < t4; ++y) {
          if (y >= t7)
            return H.ioore(t1, y);
          maxBytesPerLine = Math.max(maxBytesPerLine, t1[y]);
        }
        t1 = B.ExrCompressor_ExrCompressor(_this._compressionType, _this, maxBytesPerLine, null);
        _this._compressor = t1;
        _this._linesInBuffer = t1.numScanLines$0();
        t1 = _this._bytesPerLine.length;
        t1 = _this._offsetInLineBuffer = new Uint32Array(t1);
        for (t2 = _this._bytesPerLine, t3 = t2.length - 1, t4 = _this._linesInBuffer, t5 = t1.length, offset = 0, i = 0; i <= t3; ++i) {
          if (typeof t4 !== "number")
            return H.iae(t4);
          if (C.JSInt_methods.$mod(i, t4) === 0)
            offset = 0;
          if (i >= t5)
            return H.ioore(t1, i);
          t1[i] = offset;
          offset += t2[i];
        }
        t1 = _this.height;
        if (typeof t1 !== "number")
          return t1.$add();
        if (typeof t4 !== "number")
          return H.iae(t4);
        t4 = C.JSInt_methods.$tdiv(t1 + t4, t4);
        _this.set$_offsets(H.setRuntimeTypeInfo([new Uint32Array(t4 - 1)], type$.JSArray_legacy_Uint32List));
      }
    },
    _roundLog2$2: function(x, rmode) {
      return rmode === 0 ? this._floorLog2$1(x) : this._ceilLog2$1(x);
    },
    _floorLog2$1: function(x) {
      var y;
      for (y = 0; x > 1;) {
        ++y;
        x = C.JSInt_methods._shrOtherPositive$1(x, 1);
      }
      return y;
    },
    _ceilLog2$1: function(x) {
      var y, r;
      for (y = 0, r = 0; x > 1;) {
        if ((x & 1) !== 0)
          r = 1;
        ++y;
        x = C.JSInt_methods._shrOtherPositive$1(x, 1);
      }
      return y + r;
    },
    _calculateBytesPerPixel$0: function() {
      var t1, t2, bytesPerPixel, _i, t3;
      for (t1 = this.channels, t2 = t1.length, bytesPerPixel = 0, _i = 0; _i < t2; ++_i) {
        t3 = t1[_i].size;
        if (typeof t3 !== "number")
          return H.iae(t3);
        bytesPerPixel += t3;
      }
      return bytesPerPixel;
    },
    _calculateNumTiles$6: function(numTiles, numLevels, min, max, size, rmode) {
      var t1, t2, a, i, b, size0, t3;
      type$.legacy_List_legacy_int._as(numTiles);
      if (typeof numLevels !== "number")
        return H.iae(numLevels);
      t1 = numTiles && C.JSArray_methods;
      t2 = rmode === 1;
      a = max - min + 1;
      i = 0;
      for (; i < numLevels; ++i) {
        b = C.JSInt_methods._shlPositive$1(1, i);
        size0 = C.JSInt_methods.$tdiv(a, b);
        if (t2 && size0 * b < a)
          ++size0;
        t3 = Math.max(size0, 1);
        if (typeof size !== "number")
          return H.iae(size);
        t1.$indexSet(numTiles, i, C.JSInt_methods.$tdiv(t3 + size - 1, size));
      }
    },
    set$displayWindow: function(displayWindow) {
      type$.legacy_List_legacy_int._as(displayWindow);
    },
    set$dataWindow: function(dataWindow) {
      this.dataWindow = type$.legacy_List_legacy_int._as(dataWindow);
    },
    set$_offsets: function(_offsets) {
      this._offsets = type$.legacy_List_legacy_Uint32List._as(_offsets);
    },
    set$_numXTiles: function(_numXTiles) {
      this._numXTiles = type$.legacy_List_legacy_int._as(_numXTiles);
    },
    set$_numYTiles: function(_numYTiles) {
      this._numYTiles = type$.legacy_List_legacy_int._as(_numYTiles);
    }
  };
  S.InternalExrPart.prototype = {
    readOffsets$1: function(input) {
      var i, j, t1, numOffsets, t2, _this = this;
      if (_this._tiled)
        for (i = 0; i < _this._offsets.length; ++i) {
          j = 0;
          while (true) {
            t1 = _this._offsets;
            if (i >= t1.length)
              return H.ioore(t1, i);
            t1 = t1[i];
            if (!(j < t1.length))
              break;
            t1[j] = input.readUint64$0();
            ++j;
          }
        }
      else {
        t1 = _this._offsets;
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        numOffsets = t1[0].length;
        for (i = 0; i < numOffsets; ++i) {
          t1 = _this._offsets;
          if (0 >= t1.length)
            return H.ioore(t1, 0);
          t1 = t1[0];
          t2 = input.readUint64$0();
          if (i >= t1.length)
            return H.ioore(t1, i);
          t1[i] = t2;
        }
      }
    }
  };
  G.InternalExrPizCompressor.prototype = {
    InternalExrPizCompressor$3: function(header, _maxScanLineSize, _numScanLines) {
      var i, tmpBufferSize, _this = this,
        t1 = new Array(header.channels.length);
      t1.fixed$length = Array;
      _this.set$_channelData(H.setRuntimeTypeInfo(t1, type$.JSArray_legacy__PizChannelData));
      for (i = 0; t1 = _this._channelData, i < t1.length; ++i)
        (t1 && C.JSArray_methods).$indexSet(t1, i, new G._PizChannelData());
      t1 = _this._exr_piz_compressor$_maxScanLineSize;
      if (typeof t1 !== "number")
        return t1.$mul();
      tmpBufferSize = C.JSInt_methods._tdivFast$1(t1 * _this._exr_piz_compressor$_numScanLines, 2);
      _this._tmpBuffer = new Uint16Array(tmpBufferSize);
    },
    numScanLines$0: function() {
      return this._exr_piz_compressor$_numScanLines;
    },
    uncompress$5: function(inPtr, x, y, width, height) {
      var maxX, maxY, t1, t2, channels, numChannels, tmpBufferEnd, i, ch, cd, a1, b1, t3, minNonZero, maxNonZero, bitmap, b, len, j, j0, lut, maxValue, t4, t5, _this = this;
      if (width == null)
        width = _this._header.width;
      if (height == null)
        height = _this._header._linesInBuffer;
      if (typeof width !== "number")
        return H.iae(width);
      maxX = x + width - 1;
      if (typeof height !== "number")
        return H.iae(height);
      maxY = y + height - 1;
      t1 = _this._header;
      t2 = t1.width;
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (maxX > t2)
        maxX = t2 - 1;
      t2 = t1.height;
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (maxY > t2)
        maxY = t2 - 1;
      _this.decodedWidth = maxX - x + 1;
      _this.decodedHeight = maxY - y + 1;
      channels = t1.channels;
      numChannels = channels.length;
      for (tmpBufferEnd = 0, i = 0; i < numChannels; ++i) {
        ch = channels[i];
        t1 = _this._channelData;
        if (i >= t1.length)
          return H.ioore(t1, i);
        cd = t1[i];
        cd.end = cd.start = tmpBufferEnd;
        t1 = ch.xSampling;
        if (typeof t1 !== "number")
          return H.iae(t1);
        a1 = C.JSInt_methods.$tdiv(x, t1);
        b1 = C.JSInt_methods.$tdiv(maxX, t1);
        t1 = a1 * t1 < x ? 0 : 1;
        t1 = b1 - a1 + t1;
        cd.nx = t1;
        t2 = ch.ySampling;
        if (typeof t2 !== "number")
          return H.iae(t2);
        a1 = C.JSInt_methods.$tdiv(y, t2);
        b1 = C.JSInt_methods.$tdiv(maxY, t2);
        t3 = a1 * t2 < y ? 0 : 1;
        t3 = b1 - a1 + t3;
        cd.ny = t3;
        cd.ys = t2;
        t2 = ch.size;
        if (typeof t2 !== "number")
          return t2.$tdiv();
        t2 = t2 / 2 | 0;
        cd.size = t2;
        tmpBufferEnd += t1 * t3 * t2;
      }
      minNonZero = inPtr.readUint16$0();
      maxNonZero = inPtr.readUint16$0();
      if (maxNonZero >= 8192)
        throw H.wrapException(K.ImageException$("Error in header for PIZ-compressed data (invalid bitmap size)."));
      bitmap = new Uint8Array(8192);
      if (minNonZero <= maxNonZero) {
        b = inPtr.readBytes$1(maxNonZero - minNonZero + 1);
        t1 = b.offset;
        if (typeof t1 !== "number")
          return H.iae(t1);
        len = b.end - t1;
        j = minNonZero;
        i = 0;
        for (; i < len; ++i, j = j0) {
          j0 = j + 1;
          t1 = b.buffer;
          t2 = b.offset;
          if (typeof t2 !== "number")
            return t2.$add();
          C.NativeUint8List_methods.$indexSet(bitmap, j, J.$index$asx(t1, t2 + i));
        }
      }
      lut = new Uint16Array(65536);
      maxValue = _this._reverseLutFromBitmap$2(bitmap, lut);
      Y.ExrHuffman_uncompress(inPtr, inPtr.readUint32$0(), _this._tmpBuffer, tmpBufferEnd);
      for (i = 0; i < numChannels; ++i) {
        t1 = _this._channelData;
        if (i >= t1.length)
          return H.ioore(t1, i);
        cd = t1[i];
        j = 0;
        while (true) {
          t1 = cd.size;
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(j < t1))
            break;
          t2 = _this._tmpBuffer;
          t3 = cd.start;
          if (typeof t3 !== "number")
            return t3.$add();
          t4 = cd.nx;
          t5 = cd.ny;
          if (typeof t4 !== "number")
            return t4.$mul();
          Q.ExrWavelet_decode(t2, t3 + j, t4, t1, t5, t4 * t1, maxValue);
          ++j;
        }
      }
      _this._applyLut$3(lut, _this._tmpBuffer, tmpBufferEnd);
      t1 = _this._exr_piz_compressor$_output;
      if (t1 == null) {
        t1 = _this._exr_piz_compressor$_maxScanLineSize;
        if (typeof t1 !== "number")
          return t1.$mul();
        t1 = _this._exr_piz_compressor$_output = G.OutputBuffer$(false, t1 * _this._exr_piz_compressor$_numScanLines + 73728);
      }
      t1.length = 0;
      for (; y <= maxY; ++y)
        for (i = 0; i < numChannels; ++i) {
          t1 = _this._channelData;
          if (i >= t1.length)
            return H.ioore(t1, i);
          cd = t1[i];
          t1 = cd.ys;
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (C.JSInt_methods.$mod(y, t1) !== 0)
            continue;
          t1 = cd.nx;
          t2 = cd.size;
          if (typeof t1 !== "number")
            return t1.$mul();
          if (typeof t2 !== "number")
            return H.iae(t2);
          x = t1 * t2;
          for (; x > 0; --x) {
            t1 = _this._exr_piz_compressor$_output;
            t2 = _this._tmpBuffer;
            t3 = cd.end;
            if (typeof t3 !== "number")
              return t3.$add();
            cd.end = t3 + 1;
            if (t3 < 0 || t3 >= t2.length)
              return H.ioore(t2, t3);
            t1.writeUint16$1(t2[t3]);
          }
        }
      t1 = _this._exr_piz_compressor$_output;
      return H.NativeUint8List_NativeUint8List$view(t1._buffer.buffer, 0, t1.length);
    },
    uncompress$3: function(inPtr, x, y) {
      return this.uncompress$5(inPtr, x, y, null, null);
    },
    _applyLut$3: function(lut, data, nData) {
      var i, t2,
        t1 = type$.legacy_List_legacy_int;
      t1._as(lut);
      t1._as(data);
      for (t1 = data.length, i = 0; i < nData; ++i) {
        if (i >= t1)
          return H.ioore(data, i);
        t2 = data[i];
        if (t2 < 0 || t2 >= 65536)
          return H.ioore(lut, t2);
        data[i] = lut[t2];
      }
    },
    _reverseLutFromBitmap$2: function(bitmap, lut) {
      var k, i, t1, k0, k1;
      for (k = 0, i = 0; i < 65536; ++i) {
        if (i !== 0) {
          t1 = i >>> 3;
          if (t1 >= 8192)
            return H.ioore(bitmap, t1);
          t1 = (bitmap[t1] & 1 << (i & 7)) >>> 0 !== 0;
        } else
          t1 = true;
        if (t1) {
          k0 = k + 1;
          if (k >= 65536)
            return H.ioore(lut, k);
          lut[k] = i;
          k = k0;
        }
      }
      for (k0 = k; k0 < 65536; k0 = k1) {
        k1 = k0 + 1;
        if (k0 >= 65536)
          return H.ioore(lut, k0);
        lut[k0] = 0;
      }
      return k - 1;
    },
    set$_channelData: function(_channelData) {
      this._channelData = type$.legacy_List_legacy__PizChannelData._as(_channelData);
    }
  };
  G._PizChannelData.prototype = {};
  O.InternalExrPxr24Compressor.prototype = {
    numScanLines$0: function() {
      return this._exr_pxr24_compressor$_numScanLines;
    },
    uncompress$5: function(inPtr, x, y, width, height) {
      var ptr, pixel, pixelBytes, maxX, maxY, t2, numChannels, t3, t4, yi, tmpEnd, ci, ch, t5, a1, b1, n, j, t6, t7, k, _this = this,
        data = new G._ZLibDecoder().decodeBuffer$2$verify(T.InputStream$(type$.legacy_List_legacy_int._as(inPtr.toUint8List$0()), 1, null, 0), false),
        t1 = _this._output;
      if (t1 == null) {
        t1 = _this._maxScanLineSize;
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = _this._output = G.OutputBuffer$(false, _this._exr_pxr24_compressor$_numScanLines * t1);
      }
      t1.length = 0;
      ptr = H.setRuntimeTypeInfo([0, 0, 0, 0], type$.JSArray_legacy_int);
      pixel = new Uint32Array(1);
      pixelBytes = H.NativeUint8List_NativeUint8List$view(pixel.buffer, 0, null);
      if (width == null)
        width = _this._header.width;
      if (height == null)
        height = _this._header._linesInBuffer;
      if (typeof width !== "number")
        return H.iae(width);
      maxX = x + width - 1;
      if (typeof height !== "number")
        return H.iae(height);
      maxY = y + height - 1;
      t1 = _this._header;
      t2 = t1.width;
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (maxX > t2)
        maxX = t2 - 1;
      t2 = t1.height;
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (maxY > t2)
        maxY = t2 - 1;
      _this.decodedWidth = maxX - x + 1;
      _this.decodedHeight = maxY - y + 1;
      t1 = t1.channels;
      numChannels = t1.length;
      for (t2 = pixel.length, t3 = pixelBytes.length, t4 = data.length, yi = y, tmpEnd = 0; yi <= maxY; ++yi)
        for (ci = 0; ci < numChannels; ++ci) {
          if (ci >= t1.length)
            return H.ioore(t1, ci);
          ch = t1[ci];
          t5 = ch.ySampling;
          if (typeof t5 !== "number")
            return H.iae(t5);
          if (C.JSInt_methods.$mod(y, t5) !== 0)
            continue;
          t5 = ch.xSampling;
          if (typeof t5 !== "number")
            return H.iae(t5);
          a1 = C.JSInt_methods.$tdiv(x, t5);
          b1 = C.JSInt_methods.$tdiv(maxX, t5);
          t5 = a1 * t5 < x ? 0 : 1;
          n = b1 - a1 + t5;
          if (0 >= t2)
            return H.ioore(pixel, 0);
          pixel[0] = 0;
          switch (ch.type) {
            case 0:
              C.JSArray_methods.$indexSet(ptr, 0, tmpEnd);
              C.JSArray_methods.$indexSet(ptr, 1, ptr[0] + n);
              C.JSArray_methods.$indexSet(ptr, 2, ptr[1] + n);
              tmpEnd = ptr[2] + n;
              for (j = 0; j < n; ++j) {
                t5 = ptr[0];
                C.JSArray_methods.$indexSet(ptr, 0, t5 + 1);
                if (t5 < 0 || t5 >= t4)
                  return H.ioore(data, t5);
                t5 = data[t5];
                t6 = ptr[1];
                C.JSArray_methods.$indexSet(ptr, 1, t6 + 1);
                if (t6 < 0 || t6 >= t4)
                  return H.ioore(data, t6);
                t6 = data[t6];
                t7 = ptr[2];
                C.JSArray_methods.$indexSet(ptr, 2, t7 + 1);
                if (t7 < 0 || t7 >= t4)
                  return H.ioore(data, t7);
                t7 = data[t7];
                pixel[0] = pixel[0] + ((t5 << 24 | t6 << 16 | t7 << 8) >>> 0);
                for (k = 0; k < 4; ++k) {
                  t5 = _this._output;
                  if (k >= t3)
                    return H.ioore(pixelBytes, k);
                  t5.writeByte$1(pixelBytes[k]);
                }
              }
              break;
            case 1:
              C.JSArray_methods.$indexSet(ptr, 0, tmpEnd);
              C.JSArray_methods.$indexSet(ptr, 1, ptr[0] + n);
              tmpEnd = ptr[1] + n;
              for (j = 0; j < n; ++j) {
                t5 = ptr[0];
                C.JSArray_methods.$indexSet(ptr, 0, t5 + 1);
                if (t5 < 0 || t5 >= t4)
                  return H.ioore(data, t5);
                t5 = data[t5];
                t6 = ptr[1];
                C.JSArray_methods.$indexSet(ptr, 1, t6 + 1);
                if (t6 < 0 || t6 >= t4)
                  return H.ioore(data, t6);
                t6 = data[t6];
                pixel[0] = pixel[0] + ((t5 << 8 | t6) >>> 0);
                for (k = 0; k < 2; ++k) {
                  t5 = _this._output;
                  if (k >= t3)
                    return H.ioore(pixelBytes, k);
                  t5.writeByte$1(pixelBytes[k]);
                }
              }
              break;
            case 2:
              C.JSArray_methods.$indexSet(ptr, 0, tmpEnd);
              C.JSArray_methods.$indexSet(ptr, 1, ptr[0] + n);
              C.JSArray_methods.$indexSet(ptr, 2, ptr[1] + n);
              tmpEnd = ptr[2] + n;
              for (j = 0; j < n; ++j) {
                t5 = ptr[0];
                C.JSArray_methods.$indexSet(ptr, 0, t5 + 1);
                if (t5 < 0 || t5 >= t4)
                  return H.ioore(data, t5);
                t5 = data[t5];
                t6 = ptr[1];
                C.JSArray_methods.$indexSet(ptr, 1, t6 + 1);
                if (t6 < 0 || t6 >= t4)
                  return H.ioore(data, t6);
                t6 = data[t6];
                t7 = ptr[2];
                C.JSArray_methods.$indexSet(ptr, 2, t7 + 1);
                if (t7 < 0 || t7 >= t4)
                  return H.ioore(data, t7);
                t7 = data[t7];
                pixel[0] = pixel[0] + ((t5 << 24 | t6 << 16 | t7 << 8) >>> 0);
                for (k = 0; k < 4; ++k) {
                  t5 = _this._output;
                  if (k >= t3)
                    return H.ioore(pixelBytes, k);
                  t5.writeByte$1(pixelBytes[k]);
                }
              }
              break;
          }
        }
      t1 = _this._output;
      return H.NativeUint8List_NativeUint8List$view(t1._buffer.buffer, 0, t1.length);
    },
    uncompress$3: function(inPtr, x, y) {
      return this.uncompress$5(inPtr, x, y, null, null);
    }
  };
  Y.InternalExrRleCompressor.prototype = {
    numScanLines$0: function() {
      return 1;
    },
    uncompress$5: function(inPtr, x, y, width, height) {
      var out, maxX, maxY, t3, n, count, count0, data, len, i, t10, si, si0, t11, t4, t20, _this = this,
        t1 = inPtr.end,
        t2 = inPtr.offset;
      if (typeof t2 !== "number")
        return H.iae(t2);
      out = G.OutputBuffer$(false, (t1 - t2) * 2);
      if (width == null)
        width = _this._header.width;
      if (height == null)
        height = _this._header._linesInBuffer;
      if (typeof width !== "number")
        return H.iae(width);
      maxX = x + width - 1;
      if (typeof height !== "number")
        return H.iae(height);
      maxY = y + height - 1;
      t2 = _this._header;
      t3 = t2.width;
      if (typeof t3 !== "number")
        return H.iae(t3);
      if (maxX > t3)
        maxX = t3 - 1;
      t2 = t2.height;
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (maxY > t2)
        maxY = t2 - 1;
      _this.decodedWidth = maxX - x + 1;
      _this.decodedHeight = maxY - y + 1;
      while (true) {
        t2 = inPtr.offset;
        if (typeof t2 !== "number")
          return t2.$ge();
        if (!(t2 < t1))
          break;
        t3 = inPtr.buffer;
        inPtr.offset = t2 + 1;
        t2 = J.$index$asx(t3, t2);
        t3 = $.$get$__uint8();
        (t3 && C.NativeUint8List_methods).$indexSet(t3, 0, t2);
        t2 = $.$get$__uint8ToInt8();
        if (0 >= t2.length)
          return H.ioore(t2, 0);
        n = t2[0];
        if (n < 0) {
          count = -n;
          for (; count0 = count - 1, count > 0; count = count0) {
            t2 = inPtr.buffer;
            t3 = inPtr.offset;
            if (typeof t3 !== "number")
              return t3.$add();
            inPtr.offset = t3 + 1;
            out.writeByte$1(J.$index$asx(t2, t3));
          }
        } else
          for (count = n; count0 = count - 1, count >= 0; count = count0) {
            t2 = inPtr.buffer;
            t3 = inPtr.offset;
            if (typeof t3 !== "number")
              return t3.$add();
            inPtr.offset = t3 + 1;
            out.writeByte$1(J.$index$asx(t2, t3));
          }
      }
      data = H.NativeUint8List_NativeUint8List$view(out._buffer.buffer, 0, out.length);
      for (len = data.length, i = 1; i < len; ++i)
        data[i] = data[i - 1] + data[i] - 128;
      t1 = _this._exr_rle_compressor$_outCache;
      if (t1 == null || t1.length !== len)
        t1 = _this._exr_rle_compressor$_outCache = new Uint8Array(len);
      t2 = C.JSInt_methods._tdivFast$1(len + 1, 2);
      for (t10 = 0, si = 0; true; t2 = t20, t10 = t11) {
        if (si < len) {
          si0 = si + 1;
          t11 = t10 + 1;
          if (t10 >= len)
            return H.ioore(data, t10);
          t3 = data[t10];
          t4 = t1.length;
          if (si >= t4)
            return H.ioore(t1, si);
          t1[si] = t3;
        } else
          break;
        if (si0 < len) {
          si = si0 + 1;
          t20 = t2 + 1;
          if (t2 >= len)
            return H.ioore(data, t2);
          t2 = data[t2];
          if (si0 >= t4)
            return H.ioore(t1, si0);
          t1[si0] = t2;
        } else
          break;
      }
      return t1;
    },
    uncompress$3: function(inPtr, x, y) {
      return this.uncompress$5(inPtr, x, y, null, null);
    }
  };
  R.InternalExrZipCompressor.prototype = {
    numScanLines$0: function() {
      return this._exr_zip_compressor$_numScanLines;
    },
    uncompress$5: function(input, x, y, width, height) {
      var maxX, maxY, t1, t2, len, i, t10, si, si0, t11, t3, t4, t20, _this = this,
        data = new G._ZLibDecoder().decodeBuffer$2$verify(T.InputStream$(type$.legacy_List_legacy_int._as(input.toUint8List$0()), 1, null, 0), false);
      if (width == null)
        width = _this._header.width;
      if (height == null)
        height = _this._header._linesInBuffer;
      if (typeof width !== "number")
        return H.iae(width);
      maxX = x + width - 1;
      if (typeof height !== "number")
        return H.iae(height);
      maxY = y + height - 1;
      t1 = _this._header;
      t2 = t1.width;
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (maxX > t2)
        maxX = t2 - 1;
      t1 = t1.height;
      if (typeof t1 !== "number")
        return H.iae(t1);
      if (maxY > t1)
        maxY = t1 - 1;
      _this.decodedWidth = maxX - x + 1;
      _this.decodedHeight = maxY - y + 1;
      for (len = data.length, i = 1; i < len; ++i)
        data[i] = data[i - 1] + data[i] - 128;
      t1 = _this._outCache;
      if (t1 == null || t1.length !== len)
        t1 = _this._outCache = new Uint8Array(len);
      t2 = C.JSInt_methods._tdivFast$1(len + 1, 2);
      for (t10 = 0, si = 0; true; t2 = t20, t10 = t11) {
        if (si < len) {
          si0 = si + 1;
          t11 = t10 + 1;
          if (t10 >= len)
            return H.ioore(data, t10);
          t3 = data[t10];
          t4 = t1.length;
          if (si >= t4)
            return H.ioore(t1, si);
          t1[si] = t3;
        } else
          break;
        if (si0 < len) {
          si = si0 + 1;
          t20 = t2 + 1;
          if (t2 >= len)
            return H.ioore(data, t2);
          t2 = data[t2];
          if (si0 >= t4)
            return H.ioore(t1, si0);
          t1[si0] = t2;
        } else
          break;
      }
      return t1;
    },
    uncompress$3: function(input, x, y) {
      return this.uncompress$5(input, x, y, null, null);
    }
  };
  U.ExrDecoder.prototype = {
    decodeFrame$1: function(frame) {
      var t1 = this.exrImage;
      if (t1 == null)
        return null;
      t1 = t1._parts;
      if (frame >= t1.length)
        return H.ioore(t1, frame);
      return A.hdrToImage(t1[frame].framebuffer, 1);
    },
    decodeImage$1: function(bytes) {
      var t1;
      type$.legacy_List_legacy_int._as(bytes);
      t1 = new Y.ExrImage(H.setRuntimeTypeInfo([], type$.JSArray_legacy_InternalExrPart));
      t1.ExrImage$1(bytes);
      this.exrImage = t1;
      return this.decodeFrame$1(0);
    }
  };
  M.GifColorMap.prototype = {
    $index: function(_, index) {
      return C.NativeUint8List_methods.$index(this.colors, index);
    },
    setColor$4: function(index, r, g, b) {
      var ci = index * 3,
        t1 = this.colors;
      C.NativeUint8List_methods.$indexSet(t1, ci, r);
      C.NativeUint8List_methods.$indexSet(t1, ci + 1, g);
      C.NativeUint8List_methods.$indexSet(t1, ci + 2, b);
    },
    _bitSize$1: function(n) {
      var i;
      for (i = 1; i <= 8; ++i)
        if (C.JSInt_methods._shlPositive$1(1, i) >= n)
          return i;
      return 0;
    }
  };
  A.GifImageDesc.prototype = {
    GifImageDesc$1: function(input) {
      var b, i, t1, t2, t3, t4, t5, _this = this;
      _this.x = input.readUint16$0();
      _this.y = input.readUint16$0();
      _this.width = input.readUint16$0();
      _this.height = input.readUint16$0();
      b = input.readByte$0();
      if (typeof b !== "number")
        return b.$and();
      _this.interlaced = (b & 64) !== 0;
      if ((b & 128) !== 0) {
        _this.colorMap = M.GifColorMap$(C.JSInt_methods._shlPositive$1(1, (b & 7) + 1));
        for (i = 0; t1 = _this.colorMap, i < t1.numColors; ++i) {
          t2 = input.buffer;
          t3 = input.offset;
          if (typeof t3 !== "number")
            return t3.$add();
          input.offset = t3 + 1;
          t3 = J.$index$asx(t2, t3);
          t2 = input.buffer;
          t4 = input.offset;
          if (typeof t4 !== "number")
            return t4.$add();
          input.offset = t4 + 1;
          t4 = J.$index$asx(t2, t4);
          t2 = input.buffer;
          t5 = input.offset;
          if (typeof t5 !== "number")
            return t5.$add();
          input.offset = t5 + 1;
          t1.setColor$4(i, t3, t4, J.$index$asx(t2, t5));
        }
      }
      t1 = input.offset;
      t2 = input.start;
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      _this._inputPosition = t1 - t2;
    }
  };
  A.InternalGifImageDesc.prototype = {};
  K.GifInfo.prototype = {};
  F.GifDecoder.prototype = {
    startDecode$1: function(bytes) {
      var recordType, gifImage, extCode, error, t1, t2, t3, t4, exception, _this = this;
      _this._input = Z.InputBuffer$(type$.legacy_List_legacy_int._as(bytes), false, null, 0);
      _this.info = new K.GifInfo(H.setRuntimeTypeInfo([], type$.JSArray_legacy_GifImageDesc));
      if (!_this._getInfo$0())
        return null;
      try {
        while (true) {
          t1 = _this._input;
          t2 = t1.offset;
          t3 = t1.end;
          if (typeof t2 !== "number")
            return t2.$ge();
          if (!(t2 < t3))
            break;
          t3 = t1.buffer;
          t1.offset = t2 + 1;
          recordType = J.$index$asx(t3, t2);
          switch (recordType) {
            case 44:
              gifImage = _this._skipImage$0();
              if (gifImage == null) {
                t1 = _this.info;
                return t1;
              }
              C.JSArray_methods.add$1(_this.info.frames, gifImage);
              break;
            case 33:
              t1 = _this._input;
              t2 = t1.buffer;
              t3 = t1.offset;
              if (typeof t3 !== "number")
                return t3.$add();
              t1.offset = t3 + 1;
              extCode = J.$index$asx(t2, t3);
              if (J.$eq$(extCode, 255)) {
                t1 = _this._input;
                t2 = t1.buffer;
                t3 = t1.offset;
                if (typeof t3 !== "number")
                  return t3.$add();
                t1.offset = t3 + 1;
                if (t1.readString$1(J.$index$asx(t2, t3)) === "NETSCAPE2.0") {
                  t2 = t1.buffer;
                  t3 = t1.offset;
                  if (typeof t3 !== "number")
                    return t3.$add();
                  t1.offset = t3 + 1;
                  t3 = J.$index$asx(t2, t3);
                  t2 = t1.buffer;
                  t4 = t1.offset;
                  if (typeof t4 !== "number")
                    return t4.$add();
                  t1.offset = t4 + 1;
                  t4 = J.$index$asx(t2, t4);
                  if (t3 === 3 && t4 === 1)
                    t1.readUint16$0();
                } else
                  _this._skipRemainder$0();
              } else if (J.$eq$(extCode, 249))
                _this._readGraphicsControlExt$1(_this._input);
              else
                _this._skipRemainder$0();
              break;
            case 59:
              t1 = _this.info;
              return t1;
            default:
              break;
          }
        }
      } catch (exception) {
        error = H.unwrapException(exception);
        P.print(error);
      }
      return _this.info;
    },
    _readGraphicsControlExt$1: function(_input) {
      var b, transparent, t1, t2, gifImage;
      _input.readByte$0();
      b = _input.readByte$0();
      _input.readUint16$0();
      transparent = _input.readByte$0();
      _input.readByte$0();
      if (typeof b !== "number")
        return b.$shr();
      C.JSInt_methods._shrOtherPositive$1(b, 2);
      t1 = _input.subset$2$offset(1, 0);
      t2 = t1.buffer;
      t1 = t1.offset;
      if (typeof t1 !== "number")
        return t1.$add();
      if (J.$index$asx(t2, t1) === 44) {
        t1 = _input.offset;
        if (typeof t1 !== "number")
          return t1.$add();
        _input.offset = t1 + 1;
        gifImage = this._skipImage$0();
        if (gifImage == null)
          return;
        if ((b & 1) !== 0) {
          t1 = gifImage.colorMap;
          if (t1 != null)
            t1.transparent = transparent;
          else {
            t1 = this.info.globalColorMap;
            if (t1 != null)
              t1.transparent = transparent;
          }
        }
        C.JSArray_methods.add$1(this.info.frames, gifImage);
      }
    },
    decodeFrame$1: function(frame) {
      var t2, t3, gifImage, _this = this,
        t1 = _this._input;
      if (t1 == null || _this.info == null)
        return null;
      t2 = _this.info.frames;
      t3 = t2.length;
      if (frame >= t3 || false)
        return null;
      if (frame >= t3)
        return H.ioore(t2, frame);
      gifImage = t2[frame];
      t1.offset = gifImage._inputPosition;
      return _this._decodeImage$1(gifImage);
    },
    decodeImage$1: function(bytes) {
      if (this.startDecode$1(type$.legacy_List_legacy_int._as(bytes)) == null)
        return null;
      return this.decodeFrame$1(0);
    },
    _skipImage$0: function() {
      var gifImage,
        t1 = this._input,
        t2 = t1.offset,
        t3 = t1.end;
      if (typeof t2 !== "number")
        return t2.$ge();
      if (t2 >= t3)
        return null;
      gifImage = new A.InternalGifImageDesc();
      gifImage.GifImageDesc$1(t1);
      t1 = this._input;
      t2 = t1.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      t1.offset = t2 + 1;
      this._skipRemainder$0();
      return gifImage;
    },
    _decodeImage$1: function(gifImage) {
      var t1, t2, width, height, t3, colorMap, image, line, row, i, j, y, _this = this;
      if (_this._gif_decoder$_buffer == null) {
        _this._gif_decoder$_buffer = new Uint8Array(256);
        _this._stack = new Uint8Array(4095);
        _this._suffix = new Uint8Array(4096);
        _this._gif_decoder$_prefix = new Uint32Array(4096);
      }
      t1 = _this._input.readByte$0();
      _this._bitsPerPixel = t1;
      if (typeof t1 !== "number")
        return H.iae(t1);
      t2 = C.JSInt_methods.$shl(1, t1);
      _this._clearCode = t2;
      ++t2;
      _this._eofCode = t2;
      _this._runningCode = t2 + 1;
      ++t1;
      _this._runningBits = t1;
      _this._maxCode1 = C.JSInt_methods.$shl(1, t1);
      _this._stackPtr = 0;
      _this._lastCode = 4098;
      _this._currentShiftDWord = _this._currentShiftState = 0;
      _this._gif_decoder$_buffer[0] = 0;
      t1 = _this._gif_decoder$_prefix;
      (t1 && C.NativeUint32List_methods).fillRange$3(t1, 0, 4096, 4098);
      width = gifImage.width;
      height = gifImage.height;
      t1 = gifImage.x;
      t2 = _this.info;
      t3 = t2.width;
      if (typeof t3 !== "number")
        return H.iae(t3);
      if (t1 + width <= t3) {
        t1 = gifImage.y;
        t3 = t2.height;
        if (typeof t3 !== "number")
          return H.iae(t3);
        t3 = t1 + height > t3;
        t1 = t3;
      } else
        t1 = true;
      if (t1)
        return null;
      colorMap = gifImage.colorMap;
      colorMap = colorMap != null ? colorMap : t2.globalColorMap;
      _this._pixelCount = width * height;
      image = U.Image$(width, height, C.Channels_1, null, null);
      line = new Uint8Array(width);
      if (gifImage.interlaced) {
        row = gifImage.y;
        for (t1 = row + height, i = 0, j = 0; i < 4; ++i)
          for (y = row + C.List_0_4_2_1[i]; y < t1; y += C.List_8_8_4_2[i], ++j) {
            if (!_this._getLine$1(line))
              return image;
            _this._updateImage$4(image, y, colorMap, line);
          }
      } else
        for (y = 0; y < height; ++y) {
          if (!_this._getLine$1(line))
            return image;
          _this._updateImage$4(image, y, colorMap, line);
        }
      return image;
    },
    _updateImage$4: function(image, y, colorMap, line) {
      var width, t1, t2, t3, t4, t5, x, t6, ci, a, t7, t8, t9, t10;
      if (colorMap != null)
        for (width = line.length, t1 = colorMap.colors, t2 = t1.length, t3 = image.data, t4 = image.width, t5 = t3.length, x = 0; x < width; ++x) {
          t6 = line[x];
          ci = t6 * 3;
          a = t6 === colorMap.transparent ? 0 : 255;
          if (ci >= t2)
            return H.ioore(t1, ci);
          t6 = t1[ci];
          t7 = ci + 1;
          if (t7 >= t2)
            return H.ioore(t1, t7);
          t7 = t1[t7];
          t8 = ci + 2;
          if (t8 >= t2)
            return H.ioore(t1, t8);
          t8 = t1[t8];
          t9 = C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(a, 0, 255));
          t8 = C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(t8, 0, 255));
          t7 = C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(t7, 0, 255));
          t6 = C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(t6, 0, 255));
          if (typeof t4 !== "number")
            return H.iae(t4);
          t10 = y * t4 + x;
          if (t10 < 0 || t10 >= t5)
            return H.ioore(t3, t10);
          t3[t10] = (t9 << 24 | t8 << 16 | t7 << 8 | t6) >>> 0;
        }
    },
    _getInfo$0: function() {
      var b, t1, t2, i, t3, t4, t5, _this = this,
        tag = _this._input.readString$1(6);
      if (tag !== "GIF87a" && tag !== "GIF89a")
        return false;
      _this.info.width = _this._input.readUint16$0();
      _this.info.height = _this._input.readUint16$0();
      b = _this._input.readByte$0();
      if (typeof b !== "number")
        return b.$and();
      _this._input.readByte$0();
      t1 = _this._input;
      t2 = t1.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      t1.offset = t2 + 1;
      if ((b & 128) !== 0) {
        _this.info.globalColorMap = M.GifColorMap$(C.JSInt_methods._shlPositive$1(1, (b & 7) + 1));
        for (i = 0; i < _this.info.globalColorMap.numColors; ++i) {
          t1 = _this._input;
          t2 = t1.buffer;
          t3 = t1.offset;
          if (typeof t3 !== "number")
            return t3.$add();
          t1.offset = t3 + 1;
          t3 = J.$index$asx(t2, t3);
          t2 = _this._input;
          t1 = t2.buffer;
          t4 = t2.offset;
          if (typeof t4 !== "number")
            return t4.$add();
          t2.offset = t4 + 1;
          t4 = J.$index$asx(t1, t4);
          t1 = _this._input;
          t2 = t1.buffer;
          t5 = t1.offset;
          if (typeof t5 !== "number")
            return t5.$add();
          t1.offset = t5 + 1;
          t5 = J.$index$asx(t2, t5);
          _this.info.globalColorMap.setColor$4(i, t3, t4, t5);
        }
      }
      return true;
    },
    _getLine$1: function(line) {
      var _this = this,
        t1 = _this._pixelCount;
      if (typeof t1 !== "number")
        return t1.$sub();
      _this._pixelCount = t1 - line.length;
      if (!_this._decompressLine$1(line))
        return false;
      if (_this._pixelCount === 0)
        _this._skipRemainder$0();
      return true;
    },
    _skipRemainder$0: function() {
      var b,
        t1 = this._input,
        t2 = t1.offset,
        t3 = t1.end;
      if (typeof t2 !== "number")
        return t2.$ge();
      if (t2 >= t3)
        return true;
      b = t1.readByte$0();
      while (true) {
        if (b !== 0) {
          t1 = this._input;
          t2 = t1.offset;
          t1 = t1.end;
          if (typeof t2 !== "number")
            return t2.$ge();
          t1 = t2 < t1;
        } else
          t1 = false;
        if (!t1)
          break;
        t1 = this._input;
        t2 = t1.offset;
        if (typeof t2 !== "number")
          return t2.$add();
        if (typeof b !== "number")
          return H.iae(b);
        t2 = t1.offset = t2 + b;
        if (t2 >= t1.end)
          return true;
        t3 = t1.buffer;
        t1.offset = t2 + 1;
        b = J.$index$asx(t3, t2);
      }
      return true;
    },
    _decompressLine$1: function(line) {
      var lineLen, i, i0, t2, currentPrefix, t3, j, t4, t5, j0, t6, _this = this,
        t1 = _this._stackPtr;
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > 4095)
        return false;
      lineLen = line.length;
      if (t1 !== 0) {
        i = 0;
        while (true) {
          if (!(t1 !== 0 && i < lineLen))
            break;
          i0 = i + 1;
          t2 = _this._stack;
          t1 = _this._stackPtr = t1 - 1;
          t2.length;
          if (t1 < 0)
            return H.ioore(t2, t1);
          t2 = t2[t1];
          if (i >= lineLen)
            return H.ioore(line, i);
          line[i] = t2;
          i = i0;
        }
      } else
        i = 0;
      for (currentPrefix = null; i < lineLen;) {
        t1 = _this._currentCode = _this._decompressInput$0();
        if (t1 == null)
          return false;
        t2 = _this._eofCode;
        if (t1 === t2)
          return false;
        t3 = _this._clearCode;
        if (t1 === t3) {
          for (t1 = _this._gif_decoder$_prefix, j = 0; j <= 4095; ++j)
            t1[j] = 4098;
          if (typeof t2 !== "number")
            return t2.$add();
          _this._runningCode = t2 + 1;
          t1 = _this._bitsPerPixel;
          if (typeof t1 !== "number")
            return t1.$add();
          ++t1;
          _this._runningBits = t1;
          _this._maxCode1 = C.JSInt_methods.$shl(1, t1);
          _this._lastCode = 4098;
        } else {
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (t1 < t3) {
            i0 = i + 1;
            if (i < 0)
              return H.ioore(line, i);
            line[i] = t1;
            i = i0;
          } else {
            t2 = _this._gif_decoder$_prefix;
            t2.length;
            if (t1 !== (t1 | 0) || t1 >= 4096)
              return H.ioore(t2, t1);
            if (t2[t1] === 4098) {
              t1 = _this._currentCode;
              t2 = _this._runningCode;
              if (typeof t2 !== "number")
                return t2.$sub();
              t2 -= 2;
              if (t1 === t2) {
                currentPrefix = _this._lastCode;
                t1 = _this._suffix;
                t3 = _this._stack;
                t4 = _this._stackPtr;
                if (typeof t4 !== "number")
                  return t4.$add();
                _this._stackPtr = t4 + 1;
                t5 = _this._getPrefixChar$3(_this._gif_decoder$_prefix, currentPrefix, _this._clearCode);
                (t3 && C.NativeUint8List_methods).$indexSet(t3, t4, t5);
                (t1 && C.NativeUint8List_methods).$indexSet(t1, t2, t5);
              } else
                return false;
            } else
              currentPrefix = _this._currentCode;
            j = 0;
            while (true) {
              j0 = j + 1;
              if (j <= 4095) {
                t1 = _this._clearCode;
                if (typeof currentPrefix !== "number")
                  return currentPrefix.$gt();
                if (typeof t1 !== "number")
                  return H.iae(t1);
                t1 = currentPrefix > t1 && currentPrefix <= 4095;
              } else
                t1 = false;
              if (!t1)
                break;
              t1 = _this._stack;
              t2 = _this._stackPtr;
              if (typeof t2 !== "number")
                return t2.$add();
              _this._stackPtr = t2 + 1;
              t3 = _this._suffix;
              (t1 && C.NativeUint8List_methods).$indexSet(t1, t2, (t3 && C.NativeUint8List_methods).$index(t3, currentPrefix));
              t3 = _this._gif_decoder$_prefix;
              currentPrefix = (t3 && C.NativeUint32List_methods).$index(t3, currentPrefix);
              j = j0;
            }
            if (j0 < 4095) {
              if (typeof currentPrefix !== "number")
                return currentPrefix.$gt();
              t1 = currentPrefix > 4095;
            } else
              t1 = true;
            if (t1)
              return false;
            t1 = _this._stack;
            t2 = _this._stackPtr;
            if (typeof t2 !== "number")
              return t2.$add();
            _this._stackPtr = t2 + 1;
            (t1 && C.NativeUint8List_methods).$indexSet(t1, t2, currentPrefix);
            while (true) {
              t1 = _this._stackPtr;
              if (!(t1 !== 0 && i < lineLen))
                break;
              i0 = i + 1;
              t2 = _this._stack;
              if (typeof t1 !== "number")
                return t1.$sub();
              t1 = _this._stackPtr = t1 - 1;
              t2.length;
              if (t1 < 0 || t1 >= 4095)
                return H.ioore(t2, t1);
              t1 = t2[t1];
              if (i < 0 || i >= lineLen)
                return H.ioore(line, i);
              line[i] = t1;
              i = i0;
            }
          }
          t1 = _this._lastCode;
          if (t1 !== 4098) {
            t2 = _this._gif_decoder$_prefix;
            t3 = _this._runningCode;
            if (typeof t3 !== "number")
              return t3.$sub();
            t3 -= 2;
            t2.length;
            if (t3 < 0 || t3 >= 4096)
              return H.ioore(t2, t3);
            t3 = t2[t3] === 4098;
            t2 = t3;
          } else
            t2 = false;
          if (t2) {
            t2 = _this._gif_decoder$_prefix;
            t3 = _this._runningCode;
            if (typeof t3 !== "number")
              return t3.$sub();
            (t2 && C.NativeUint32List_methods).$indexSet(t2, t3 - 2, t1);
            t1 = _this._currentCode;
            t2 = _this._runningCode;
            if (typeof t2 !== "number")
              return t2.$sub();
            t2 -= 2;
            t3 = _this._suffix;
            t4 = _this._gif_decoder$_prefix;
            t5 = _this._clearCode;
            t6 = t3 && C.NativeUint8List_methods;
            if (t1 === t2)
              t6.$indexSet(t3, t2, _this._getPrefixChar$3(t4, _this._lastCode, t5));
            else
              t6.$indexSet(t3, t2, _this._getPrefixChar$3(t4, t1, t5));
          }
          _this._lastCode = _this._currentCode;
        }
      }
      return true;
    },
    _decompressInput$0: function() {
      var t2, nextByte, t3, t4, t5, _this = this,
        t1 = _this._runningBits;
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > 12)
        return null;
      while (true) {
        t1 = _this._currentShiftState;
        t2 = _this._runningBits;
        if (typeof t1 !== "number")
          return t1.$lt();
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(t1 < t2))
          break;
        nextByte = _this._bufferedInput$0();
        t1 = _this._currentShiftDWord;
        t2 = _this._currentShiftState;
        if (typeof nextByte !== "number")
          return nextByte.$shl();
        if (typeof t2 !== "number")
          return H.iae(t2);
        t3 = C.JSInt_methods.$shl(nextByte, t2);
        if (typeof t1 !== "number")
          return t1.$or();
        _this._currentShiftDWord = (t1 | t3) >>> 0;
        _this._currentShiftState = t2 + 8;
      }
      t1 = _this._currentShiftDWord;
      if (t2 < 0 || t2 >= 13)
        return H.ioore(C.List_Qw3, t2);
      t3 = C.List_Qw3[t2];
      if (typeof t1 !== "number")
        return t1.$and();
      _this._currentShiftDWord = C.JSInt_methods._shrReceiverPositive$1(t1, t2);
      t4 = _this._currentShiftState;
      if (typeof t4 !== "number")
        return t4.$sub();
      _this._currentShiftState = t4 - t2;
      t4 = _this._runningCode;
      if (typeof t4 !== "number")
        return t4.$lt();
      if (t4 < 4097) {
        ++t4;
        _this._runningCode = t4;
        t5 = _this._maxCode1;
        if (typeof t5 !== "number")
          return H.iae(t5);
        t4 = t4 > t5 && t2 < 12;
      } else
        t4 = false;
      if (t4) {
        t4 = _this._maxCode1;
        if (typeof t4 !== "number")
          return t4.$shl();
        _this._maxCode1 = t4 << 1 >>> 0;
        _this._runningBits = t2 + 1;
      }
      return t1 & t3;
    },
    _getPrefixChar$3: function(prefix, code, clearCode) {
      var i0, t1, i = 0;
      while (true) {
        if (typeof code !== "number")
          return code.$gt();
        if (typeof clearCode !== "number")
          return H.iae(clearCode);
        if (code > clearCode) {
          i0 = i + 1;
          t1 = i <= 4095;
          i = i0;
        } else
          t1 = false;
        if (!t1)
          break;
        if (code > 4095)
          return 4098;
        code = prefix[code];
      }
      return code;
    },
    _bufferedInput$0: function() {
      var nextByte, t3, _this = this,
        t1 = _this._gif_decoder$_buffer,
        t2 = t1[0];
      if (t2 === 0) {
        (t1 && C.NativeUint8List_methods).$indexSet(t1, 0, _this._input.readByte$0());
        t1 = _this._gif_decoder$_buffer;
        t2 = t1[0];
        if (t2 === 0)
          return null;
        (t1 && C.NativeUint8List_methods).setRange$3(t1, 1, 1 + t2, _this._input.readBytes$1(t2).toUint8List$0());
        t1 = _this._gif_decoder$_buffer;
        nextByte = t1[1];
        t1[1] = 2;
        t1[0] = t1[0] - 1;
      } else {
        t3 = t1[1];
        t1[1] = t3 + 1;
        if (t3 >= 256)
          return H.ioore(t1, t3);
        nextByte = t1[t3];
        t1[0] = t2 - 1;
      }
      return nextByte;
    }
  };
  X.IcoDecoder.prototype = {
    decodeFrame$1: function(frame) {
      var t2, imageInfo, t3, imageBuffer, png, dummyBmpHeader, t4, t5, t6, t7, t8, t9, t10, compression, t11, bmpInfo, offset, inp, bmp, image, padding, rowLength, y, line, bytes, x, j, t12, t13, t14, _null = null,
        t1 = this._ico_decoder$_input;
      if (t1 != null) {
        t2 = this._icoInfo;
        t2 = t2 == null || frame >= t2.numFrames;
      } else
        t2 = true;
      if (t2)
        return _null;
      t2 = this._icoInfo.images;
      if (frame >= t2.length)
        return H.ioore(t2, frame);
      imageInfo = t2[frame];
      t2 = t1.buffer;
      t1 = t1.start;
      t3 = imageInfo.bytesOffset;
      if (typeof t1 !== "number")
        return t1.$add();
      t3 = t1 + t3;
      t1 = imageInfo.bytesSize;
      imageBuffer = J.sublist$2$ax(t2, t3, t3 + t1);
      png = new G.PngDecoder();
      if (png.isValidFile$1(imageBuffer))
        return png.decodeImage$1(imageBuffer);
      dummyBmpHeader = G.OutputBuffer$(false, 14);
      dummyBmpHeader.writeUint16$1(19778);
      dummyBmpHeader.writeUint32$1(t1);
      dummyBmpHeader.writeUint32$1(0);
      dummyBmpHeader.writeUint32$1(0);
      t1 = Z.InputBuffer$(imageBuffer, false, _null, 0);
      t2 = new L.BitmapFileHeader();
      t2.BitmapFileHeader$1(Z.InputBuffer$(H.NativeUint8List_NativeUint8List$view(dummyBmpHeader._buffer.buffer, 0, dummyBmpHeader.length), false, _null, 0));
      t3 = t1.readUint32$0();
      t4 = t1.readUint32$0();
      t5 = $.$get$__uint32();
      t5[0] = t4;
      t4 = $.$get$__uint32ToInt32();
      if (0 >= t4.length)
        return H.ioore(t4, 0);
      t6 = t4[0];
      t5[0] = t1.readUint32$0();
      t7 = t4[0];
      t8 = t1.readUint16$0();
      t9 = t1.readUint16$0();
      t10 = t1.readUint32$0();
      compression = P.LinkedHashMap_LinkedHashMap$_literal([0, C.BitmapCompression_1, 3, C.BitmapCompression_0], type$.legacy_int, type$.legacy_BitmapCompression).$index(0, t10);
      if (compression == null)
        H.throwExpression(K.ImageException$("Bitmap compression " + t10 + " is not supported yet."));
      t10 = t1.readUint32$0();
      t5[0] = t1.readUint32$0();
      t11 = t4[0];
      t5[0] = t1.readUint32$0();
      t4 = t4[0];
      t5 = t1.readUint32$0();
      bmpInfo = new X.IcoBmpInfo(t2, t7, t6, t3, t8, t9, compression, t10, t11, t4, t5, t1.readUint32$0());
      bmpInfo.BmpInfo$2$fileHeader(t1, t2);
      if (t3 !== 40 && t8 !== 1)
        return _null;
      offset = t5 === 0 && t9 <= 8 ? 40 + 4 * C.JSInt_methods._shlPositive$1(1, t9) : 40 + 4 * t5;
      t2.offset = offset;
      dummyBmpHeader.length -= 4;
      dummyBmpHeader.writeUint32$1(offset);
      inp = Z.InputBuffer$(imageBuffer, false, _null, 0);
      bmp = new E.DibDecoder();
      bmp._bmp_decoder$_input = inp;
      bmp.info = bmpInfo;
      image = bmp.decodeFrame$1(0);
      if (t9 >= 32)
        return image;
      padding = 32 - C.JSInt_methods.$mod(t6, 32);
      rowLength = C.JSInt_methods._tdivFast$1(padding === 32 ? t6 : t6 + padding, 8);
      for (t1 = image.data, t2 = image.width, t3 = t1.length, t4 = image.height, t5 = 1 / t7 < 0, t8 = t7 < 0, t7 = t7 === 0, y = 0; y < C.JSInt_methods._tdivFast$1(L.BmpInfo.prototype.get$height.call(bmpInfo, bmpInfo), 2); ++y) {
        if (!(t7 ? t5 : t8))
          line = y;
        else {
          if (typeof t4 !== "number")
            return t4.$sub();
          line = t4 - 1 - y;
        }
        bytes = inp.subset$1(rowLength);
        t9 = inp.offset;
        t10 = bytes.offset;
        if (typeof t10 !== "number")
          return H.iae(t10);
        if (typeof t9 !== "number")
          return t9.$add();
        inp.offset = t9 + (bytes.end - t10);
        for (x = 0; x < t6;) {
          t9 = bytes.buffer;
          t10 = bytes.offset;
          if (typeof t10 !== "number")
            return t10.$add();
          bytes.offset = t10 + 1;
          t10 = J.$index$asx(t9, t10);
          j = 7;
          while (true) {
            if (!(j > -1 && x < t6))
              break;
            t9 = C.JSInt_methods.$shl(1, j);
            if (typeof t10 !== "number")
              return t10.$and();
            if ((t10 & t9) >>> 0 !== 0) {
              if (typeof t2 !== "number")
                return H.iae(t2);
              t9 = line * t2 + x;
              t11 = C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(0, 0, 255));
              t12 = C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(0, 0, 255));
              t13 = C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(0, 0, 255));
              t14 = C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(0, 0, 255));
              if (t9 < 0 || t9 >= t3)
                return H.ioore(t1, t9);
              t1[t9] = (t11 << 24 | t12 << 16 | t13 << 8 | t14) >>> 0;
            }
            ++x;
            --j;
          }
        }
      }
      return image;
    },
    decodeImage$1: function(bytes) {
      var t1 = Z.InputBuffer$(type$.legacy_List_legacy_int._as(bytes), false, null, 0);
      this._ico_decoder$_input = t1;
      t1 = X.IcoInfo__read(t1);
      this._icoInfo = t1;
      if (t1 == null)
        return null;
      return this.decodeFrame$1(0);
    }
  };
  X.IcoInfo.prototype = {};
  X.IcoInfo__read_closure.prototype = {
    call$1: function(e) {
      var t1, t2;
      H._asIntS(e);
      t1 = this.input;
      t1.readByte$0();
      t1.readByte$0();
      t1.readByte$0();
      t2 = t1.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      t1.offset = t2 + 1;
      t1.readUint16$0();
      t1.readUint16$0();
      return new X.IcoInfoImage(t1.readUint32$0(), t1.readUint32$0());
    },
    $signature: 22
  };
  X.IcoInfoImage.prototype = {};
  X.IcoBmpInfo.prototype = {
    get$height: function(_) {
      return C.JSInt_methods._tdivFast$1(L.BmpInfo.prototype.get$height.call(this, this), 2);
    },
    get$ignoreAlphaChannel: function() {
      return this.headerSize === 40 && this.bpp === 32 ? false : L.BmpInfo.prototype.get$ignoreAlphaChannel.call(this);
    }
  };
  U.ComponentData.prototype = {};
  D.JpegAdobe.prototype = {};
  R.JpegComponent.prototype = {};
  Y.JpegData.prototype = {
    validate$1: function(bytes) {
      var marker, hasSOF, hasSOS, t1, t2, sectionByteSize, _this = this;
      _this.input = Z.InputBuffer$(type$.legacy_List_legacy_int._as(bytes), true, null, 0);
      if (_this._nextMarker$0() !== 216)
        return false;
      marker = _this._nextMarker$0();
      hasSOF = false;
      hasSOS = false;
      while (true) {
        if (marker !== 217) {
          t1 = _this.input;
          t2 = t1.offset;
          t1 = t1.end;
          if (typeof t2 !== "number")
            return t2.$ge();
          t1 = t2 < t1;
        } else
          t1 = false;
        if (!t1)
          break;
        sectionByteSize = _this.input.readUint16$0();
        if (sectionByteSize < 2)
          break;
        t1 = _this.input;
        t2 = t1.offset;
        if (typeof t2 !== "number")
          return t2.$add();
        t1.offset = t2 + (sectionByteSize - 2);
        switch (marker) {
          case 192:
          case 193:
          case 194:
            hasSOF = true;
            break;
          case 218:
            hasSOS = true;
            break;
        }
        marker = _this._nextMarker$0();
      }
      return hasSOF && hasSOS;
    },
    read$1: function(bytes) {
      var i, t1, t2, t3, component, t4, t5, t6, _this = this;
      _this.input = Z.InputBuffer$(type$.legacy_List_legacy_int._as(bytes), true, null, 0);
      _this._read$0();
      if (_this.frames.length !== 1)
        throw H.wrapException(K.ImageException$("Only single frame JPEGs supported"));
      for (i = 0; t1 = _this.frame, t2 = t1.componentsOrder, i < t2.length; ++i)
        t1.components.$index(0, t2[i]);
      for (t1 = _this.components, i = 0; t2 = _this.frame, t3 = t2.componentsOrder, i < t3.length; ++i) {
        component = t2.components.$index(0, t3[i]);
        t2 = component.hSamples;
        t3 = _this.frame;
        t4 = t3.maxHSamples;
        t5 = component.vSamples;
        t6 = t3.maxVSamples;
        t3 = _this._buildComponentData$2(t3, component);
        t2 = t2 === 1 && t4 === 2 ? 1 : 0;
        C.JSArray_methods.add$1(t1, new U.ComponentData(t3, t2, t5 === 1 && t6 === 2 ? 1 : 0));
      }
    },
    _read$0: function() {
      var marker, t1, t2, $length, bytes, t3, _this = this;
      if (_this._nextMarker$0() !== 216)
        throw H.wrapException(K.ImageException$("Start Of Image marker not found."));
      marker = _this._nextMarker$0();
      while (true) {
        if (marker !== 217) {
          t1 = _this.input;
          t2 = t1.offset;
          t1 = t1.end;
          if (typeof t2 !== "number")
            return t2.$ge();
          t1 = t2 < t1;
        } else
          t1 = false;
        if (!t1)
          break;
        $length = _this.input.readUint16$0();
        if ($length < 2)
          H.throwExpression(K.ImageException$("Invalid Block"));
        t1 = _this.input;
        bytes = t1.subset$1($length - 2);
        t2 = t1.offset;
        t3 = bytes.offset;
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (typeof t2 !== "number")
          return t2.$add();
        t1.offset = t2 + (bytes.end - t3);
        switch (marker) {
          case 224:
          case 225:
          case 226:
          case 227:
          case 228:
          case 229:
          case 230:
          case 231:
          case 232:
          case 233:
          case 234:
          case 235:
          case 236:
          case 237:
          case 238:
          case 239:
          case 254:
            if (marker === 224) {
              t1 = bytes.buffer;
              t2 = bytes.offset;
              if (typeof t2 !== "number")
                return t2.$add();
              if (J.$index$asx(t1, t2) === 74) {
                t1 = bytes.buffer;
                t2 = bytes.offset;
                if (typeof t2 !== "number")
                  return t2.$add();
                if (J.$index$asx(t1, t2 + 1) === 70) {
                  t1 = bytes.buffer;
                  t2 = bytes.offset;
                  if (typeof t2 !== "number")
                    return t2.$add();
                  if (J.$index$asx(t1, t2 + 2) === 73) {
                    t1 = bytes.buffer;
                    t2 = bytes.offset;
                    if (typeof t2 !== "number")
                      return t2.$add();
                    if (J.$index$asx(t1, t2 + 3) === 70) {
                      t1 = bytes.buffer;
                      t2 = bytes.offset;
                      if (typeof t2 !== "number")
                        return t2.$add();
                      t2 = J.$index$asx(t1, t2 + 4) === 0;
                      t1 = t2;
                    } else
                      t1 = false;
                  } else
                    t1 = false;
                } else
                  t1 = false;
              } else
                t1 = false;
              if (t1) {
                _this.jfif = new S.JpegJfif();
                t1 = bytes.buffer;
                t2 = bytes.offset;
                if (typeof t2 !== "number")
                  return t2.$add();
                J.$index$asx(t1, t2 + 5);
                t2 = bytes.buffer;
                t1 = bytes.offset;
                if (typeof t1 !== "number")
                  return t1.$add();
                J.$index$asx(t2, t1 + 6);
                t1 = bytes.buffer;
                t2 = bytes.offset;
                if (typeof t2 !== "number")
                  return t2.$add();
                J.$index$asx(t1, t2 + 7);
                t2 = bytes.buffer;
                t1 = bytes.offset;
                if (typeof t1 !== "number")
                  return t1.$add();
                t1 = J.$index$asx(t2, t1 + 8);
                if (typeof t1 !== "number")
                  return t1.$shl();
                t1 = bytes.buffer;
                t2 = bytes.offset;
                if (typeof t2 !== "number")
                  return t2.$add();
                t2 = J.$index$asx(t1, t2 + 9);
                if (typeof t2 !== "number")
                  return H.iae(t2);
                t2 = bytes.buffer;
                t1 = bytes.offset;
                if (typeof t1 !== "number")
                  return t1.$add();
                t1 = J.$index$asx(t2, t1 + 10);
                if (typeof t1 !== "number")
                  return t1.$shl();
                t1 = bytes.buffer;
                t2 = bytes.offset;
                if (typeof t2 !== "number")
                  return t2.$add();
                t2 = J.$index$asx(t1, t2 + 11);
                if (typeof t2 !== "number")
                  return H.iae(t2);
                t2 = _this.jfif;
                t1 = bytes.buffer;
                t3 = bytes.offset;
                if (typeof t3 !== "number")
                  return t3.$add();
                t2.thumbWidth = J.$index$asx(t1, t3 + 12);
                t3 = _this.jfif;
                t1 = bytes.buffer;
                t2 = bytes.offset;
                if (typeof t2 !== "number")
                  return t2.$add();
                t3.thumbHeight = J.$index$asx(t1, t2 + 13);
                t2 = _this.jfif;
                t1 = t2.thumbWidth;
                if (typeof t1 !== "number")
                  return H.iae(t1);
                t2 = t2.thumbHeight;
                if (typeof t2 !== "number")
                  return H.iae(t2);
                bytes.subset$2$offset(14 + 3 * t1 * t2, 14);
              }
            } else if (marker === 225)
              _this._readExifData$1(bytes);
            else if (marker === 238) {
              t1 = bytes.buffer;
              t2 = bytes.offset;
              if (typeof t2 !== "number")
                return t2.$add();
              if (J.$index$asx(t1, t2) === 65) {
                t1 = bytes.buffer;
                t2 = bytes.offset;
                if (typeof t2 !== "number")
                  return t2.$add();
                if (J.$index$asx(t1, t2 + 1) === 100) {
                  t1 = bytes.buffer;
                  t2 = bytes.offset;
                  if (typeof t2 !== "number")
                    return t2.$add();
                  if (J.$index$asx(t1, t2 + 2) === 111) {
                    t1 = bytes.buffer;
                    t2 = bytes.offset;
                    if (typeof t2 !== "number")
                      return t2.$add();
                    if (J.$index$asx(t1, t2 + 3) === 98) {
                      t1 = bytes.buffer;
                      t2 = bytes.offset;
                      if (typeof t2 !== "number")
                        return t2.$add();
                      if (J.$index$asx(t1, t2 + 4) === 101) {
                        t1 = bytes.buffer;
                        t2 = bytes.offset;
                        if (typeof t2 !== "number")
                          return t2.$add();
                        t2 = J.$index$asx(t1, t2 + 5) === 0;
                        t1 = t2;
                      } else
                        t1 = false;
                    } else
                      t1 = false;
                  } else
                    t1 = false;
                } else
                  t1 = false;
              } else
                t1 = false;
              if (t1) {
                _this.adobe = new D.JpegAdobe();
                t1 = bytes.buffer;
                t2 = bytes.offset;
                if (typeof t2 !== "number")
                  return t2.$add();
                J.$index$asx(t1, t2 + 6);
                t2 = bytes.buffer;
                t1 = bytes.offset;
                if (typeof t1 !== "number")
                  return t1.$add();
                t1 = J.$index$asx(t2, t1 + 7);
                if (typeof t1 !== "number")
                  return t1.$shl();
                t1 = bytes.buffer;
                t2 = bytes.offset;
                if (typeof t2 !== "number")
                  return t2.$add();
                t2 = J.$index$asx(t1, t2 + 8);
                if (typeof t2 !== "number")
                  return H.iae(t2);
                t2 = bytes.buffer;
                t1 = bytes.offset;
                if (typeof t1 !== "number")
                  return t1.$add();
                t1 = J.$index$asx(t2, t1 + 9);
                if (typeof t1 !== "number")
                  return t1.$shl();
                t1 = bytes.buffer;
                t2 = bytes.offset;
                if (typeof t2 !== "number")
                  return t2.$add();
                t2 = J.$index$asx(t1, t2 + 10);
                if (typeof t2 !== "number")
                  return H.iae(t2);
                t2 = _this.adobe;
                t1 = bytes.buffer;
                t3 = bytes.offset;
                if (typeof t3 !== "number")
                  return t3.$add();
                t2.transformCode = J.$index$asx(t1, t3 + 11);
              }
            }
            break;
          case 219:
            _this._readDQT$1(bytes);
            break;
          case 192:
          case 193:
          case 194:
            _this._readFrame$2(marker, bytes);
            break;
          case 195:
          case 197:
          case 198:
          case 199:
          case 200:
          case 201:
          case 202:
          case 203:
          case 205:
          case 206:
          case 207:
            throw H.wrapException(K.ImageException$("Unhandled frame type " + J.toRadixString$1$n(marker, 16)));
          case 196:
            _this._readDHT$1(bytes);
            break;
          case 221:
            _this.resetInterval = bytes.readUint16$0();
            break;
          case 218:
            _this._readSOS$1(bytes);
            break;
          case 255:
            t1 = _this.input;
            t2 = t1.buffer;
            t1 = t1.offset;
            if (typeof t1 !== "number")
              return t1.$add();
            if (J.$index$asx(t2, t1) !== 255) {
              t1 = _this.input;
              t2 = t1.offset;
              if (typeof t2 !== "number")
                return t2.$sub();
              t1.offset = t2 - 1;
            }
            break;
          default:
            t1 = _this.input;
            t2 = t1.buffer;
            t1 = t1.offset;
            if (typeof t1 !== "number")
              return t1.$add();
            if (J.$index$asx(t2, t1 + -3) === 255) {
              t1 = _this.input;
              t2 = t1.buffer;
              t1 = t1.offset;
              if (typeof t1 !== "number")
                return t1.$add();
              t1 = J.$index$asx(t2, t1 + -2);
              if (typeof t1 !== "number")
                return t1.$ge();
              if (t1 >= 192) {
                t1 = _this.input;
                t2 = t1.buffer;
                t1 = t1.offset;
                if (typeof t1 !== "number")
                  return t1.$add();
                t1 = J.$index$asx(t2, t1 + -2);
                if (typeof t1 !== "number")
                  return t1.$le();
                t1 = t1 <= 254;
              } else
                t1 = false;
            } else
              t1 = false;
            if (t1) {
              t1 = _this.input;
              t2 = t1.offset;
              if (typeof t2 !== "number")
                return t2.$sub();
              t1.offset = t2 - 3;
              break;
            }
            if (marker !== 0)
              throw H.wrapException(K.ImageException$("Unknown JPEG marker " + J.toRadixString$1$n(marker, 16)));
            break;
        }
        marker = _this._nextMarker$0();
      }
    },
    _nextMarker$0: function() {
      var c, _this = this,
        t1 = _this.input,
        t2 = t1.offset;
      t1 = t1.end;
      if (typeof t2 !== "number")
        return t2.$ge();
      if (t2 >= t1)
        return 0;
      do {
        do {
          c = _this.input.readByte$0();
          if (c !== 255) {
            t1 = _this.input;
            t2 = t1.offset;
            t1 = t1.end;
            if (typeof t2 !== "number")
              return t2.$ge();
            t1 = t2 < t1;
          } else
            t1 = false;
        } while (t1);
        t1 = _this.input;
        t2 = t1.offset;
        t1 = t1.end;
        if (typeof t2 !== "number")
          return t2.$ge();
        if (t2 >= t1)
          return c;
        do {
          c = _this.input.readByte$0();
          if (c === 255) {
            t1 = _this.input;
            t2 = t1.offset;
            t1 = t1.end;
            if (typeof t2 !== "number")
              return t2.$ge();
            t1 = t2 < t1;
          } else
            t1 = false;
        } while (t1);
        if (c === 0) {
          t1 = _this.input;
          t2 = t1.offset;
          t1 = t1.end;
          if (typeof t2 !== "number")
            return t2.$ge();
          t1 = t2 < t1;
        } else
          t1 = false;
      } while (t1);
      return c;
    },
    _readExifValue$3: function(block, format, offset) {
      var initialBlockLength, buffer, num, den, bytesRead, t3,
        t1 = block.end,
        t2 = block.offset;
      if (typeof t2 !== "number")
        return H.iae(t2);
      initialBlockLength = t1 - t2;
      try {
        switch (format) {
          case 6:
            t2 = block.readByte$0();
            t3 = $.$get$__uint8();
            (t3 && C.NativeUint8List_methods).$indexSet(t3, 0, t2);
            t2 = $.$get$__uint8ToInt8();
            if (0 >= t2.length)
              return H.ioore(t2, 0);
            t2 = t2[0];
            return t2;
          case 1:
          case 7:
            t2 = block.readByte$0();
            return t2;
          case 2:
            t2 = block.readString$1(1);
            return t2;
          case 3:
            t2 = block.readUint16$0();
            return t2;
          case 4:
            t2 = block.readUint32$0();
            return t2;
          case 5:
          case 10:
            buffer = block.subset$2$offset(8, offset);
            t2 = buffer.readUint32$0();
            t3 = $.$get$__uint32();
            t3[0] = t2;
            t2 = $.$get$__uint32ToInt32();
            if (0 >= t2.length)
              return H.ioore(t2, 0);
            num = t2[0];
            t3[0] = buffer.readUint32$0();
            den = t2[0];
            if (J.$eq$(den, 0))
              return 0;
            t2 = num;
            t3 = den;
            if (typeof t2 !== "number")
              return t2.$div();
            if (typeof t3 !== "number")
              return H.iae(t3);
            return t2 / t3;
          case 8:
            t2 = block.readUint16$0();
            $.$get$__uint16()[0] = t2;
            t2 = $.$get$__uint16ToInt16();
            if (0 >= t2.length)
              return H.ioore(t2, 0);
            t2 = t2[0];
            return t2;
          case 9:
            t2 = block.readUint32$0();
            $.$get$__uint32()[0] = t2;
            t2 = $.$get$__uint32ToInt32();
            if (0 >= t2.length)
              return H.ioore(t2, 0);
            t2 = t2[0];
            return t2;
          case 11:
            t2 = block.readUint32$0();
            $.$get$__uint32()[0] = t2;
            t2 = $.$get$__uint32ToFloat32();
            if (0 >= t2.length)
              return H.ioore(t2, 0);
            t2 = t2[0];
            return t2;
          case 12:
            t2 = block.subset$2$offset(8, offset).readFloat64$0();
            return t2;
          default:
            return 0;
        }
      } finally {
        t2 = initialBlockLength;
        t3 = block.offset;
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (typeof t2 !== "number")
          return t2.$sub();
        bytesRead = t2 - (t1 - t3);
        t1 = bytesRead;
        if (typeof t1 !== "number")
          return t1.$lt();
        if (t1 < 4) {
          t1 = bytesRead;
          if (typeof t1 !== "number")
            return H.iae(t1);
          block.offset = t3 + H._asIntS(4 - t1);
        }
      }
    },
    _readExifDir$1: function(block) {
      var t1, t2, di, tag, format, components, byteCount, offset, t3,
        numDirEntries = block.readUint16$0();
      for (t1 = this.exif.data, t2 = block.end, di = 0; di < numDirEntries; ++di) {
        tag = block.readUint16$0();
        format = block.readUint16$0();
        components = block.readUint32$0();
        if (format - 1 >= 12)
          continue;
        if (components > 65536)
          continue;
        if (format >= 13)
          return H.ioore(C.List_mC8, format);
        byteCount = C.List_mC8[format];
        if (byteCount > 4) {
          offset = block.readUint32$0();
          t3 = block.offset;
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (offset + byteCount > t2 - t3)
            continue;
        } else
          offset = 0;
        t1.$indexSet(0, tag, this._readExifValue$3(block, format, offset));
      }
    },
    _readExifData$1: function(block) {
      var rawData, saveEndian, alignment, offset,
        t1 = this.exif;
      if (t1.rawData == null)
        t1.set$rawData(H.setRuntimeTypeInfo([], type$.JSArray_legacy_Uint8List));
      rawData = C.NativeUint8List_methods.sublist$1(block.toUint8List$0(), 0);
      t1 = t1.rawData;
      (t1 && C.JSArray_methods).add$1(t1, rawData);
      if (block.readUint32$0() !== 1165519206)
        return;
      if (block.readUint16$0() !== 0)
        return;
      saveEndian = block.bigEndian;
      alignment = block.readString$1(2);
      if (alignment === "II")
        block.bigEndian = false;
      else if (alignment === "MM")
        block.bigEndian = true;
      else
        return;
      t1 = block.offset;
      if (typeof t1 !== "number")
        return t1.$add();
      block.offset = t1 + 2;
      offset = block.readUint32$0();
      if (offset < 8 || offset > 16) {
        t1 = block.offset;
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (offset > block.end - t1 - 16) {
          block.bigEndian = saveEndian;
          return;
        }
      }
      if (offset > 8) {
        t1 = block.offset;
        if (typeof t1 !== "number")
          return t1.$add();
        block.offset = t1 + (offset - 8);
      }
      this._readExifDir$1(block);
      block.bigEndian = saveEndian;
    },
    _readDQT$1: function(block) {
      var t3, t4, n, tableData, i, tmp, t5, t6,
        t1 = block.end,
        t2 = this.quantizationTables;
      while (true) {
        t3 = block.offset;
        if (typeof t3 !== "number")
          return t3.$ge();
        t4 = t3 < t1;
        if (!t4)
          break;
        t4 = block.buffer;
        block.offset = t3 + 1;
        t3 = J.$index$asx(t4, t3);
        if (typeof t3 !== "number")
          return t3.$shr();
        t4 = C.JSInt_methods._shrOtherPositive$1(t3, 4);
        n = t3 & 15;
        if (n >= 4)
          throw H.wrapException(K.ImageException$("Invalid number of quantization tables"));
        if (t2[n] == null)
          C.JSArray_methods.$indexSet(t2, n, new Int16Array(64));
        tableData = t2[n];
        for (t3 = tableData && C.NativeInt16List_methods, t4 = t4 !== 0, i = 0; i < 64; ++i) {
          if (t4)
            tmp = block.readUint16$0();
          else {
            t5 = block.buffer;
            t6 = block.offset;
            if (typeof t6 !== "number")
              return t6.$add();
            block.offset = t6 + 1;
            tmp = J.$index$asx(t5, t6);
          }
          t3.$indexSet(tableData, C.List_AZw[i], tmp);
        }
      }
      if (t4)
        throw H.wrapException(K.ImageException$("Bad length for DQT block"));
    },
    _readFrame$2: function(marker, block) {
      var t1, numComponents, i, t2, t3, t4, t5, t6, _this = this;
      if (_this.frame != null)
        throw H.wrapException(K.ImageException$("Duplicate JPG frame data found."));
      t1 = _this.frame = new L.JpegFrame(P.LinkedHashMap_LinkedHashMap$_empty(type$.legacy_int, type$.legacy_JpegComponent), H.setRuntimeTypeInfo([], type$.JSArray_legacy_int));
      t1.progressive = marker === 194;
      t1.precision = block.readByte$0();
      _this.frame.scanLines = block.readUint16$0();
      _this.frame.samplesPerLine = block.readUint16$0();
      numComponents = block.readByte$0();
      if (typeof numComponents !== "number")
        return H.iae(numComponents);
      t1 = _this.quantizationTables;
      i = 0;
      for (; i < numComponents; ++i) {
        t2 = block.buffer;
        t3 = block.offset;
        if (typeof t3 !== "number")
          return t3.$add();
        block.offset = t3 + 1;
        t3 = J.$index$asx(t2, t3);
        t2 = block.buffer;
        t4 = block.offset;
        if (typeof t4 !== "number")
          return t4.$add();
        block.offset = t4 + 1;
        t4 = J.$index$asx(t2, t4);
        if (typeof t4 !== "number")
          return t4.$shr();
        t2 = C.JSInt_methods._shrOtherPositive$1(t4, 4);
        t5 = block.buffer;
        t6 = block.offset;
        if (typeof t6 !== "number")
          return t6.$add();
        block.offset = t6 + 1;
        t6 = J.$index$asx(t5, t6);
        C.JSArray_methods.add$1(_this.frame.componentsOrder, t3);
        _this.frame.components.$indexSet(0, t3, new R.JpegComponent(t2 & 15, t4 & 15, t1, t6));
      }
      _this.frame.prepare$0();
      C.JSArray_methods.add$1(_this.frames, _this.frame);
    },
    _readDHT$1: function(block) {
      var t2, t3, bits, count, j, t4, t5, huffmanValues, index, ht1,
        t1 = block.end,
        ht = this.huffmanTablesDC,
        ht0 = this.huffmanTablesAC;
      while (true) {
        t2 = block.offset;
        if (typeof t2 !== "number")
          return t2.$ge();
        if (!(t2 < t1))
          break;
        t3 = block.buffer;
        block.offset = t2 + 1;
        t2 = J.$index$asx(t3, t2);
        bits = new Uint8Array(16);
        for (t3 = bits.length, count = 0, j = 0; j < 16; ++j) {
          t4 = block.buffer;
          t5 = block.offset;
          if (typeof t5 !== "number")
            return t5.$add();
          block.offset = t5 + 1;
          C.NativeUint8List_methods.$indexSet(bits, j, J.$index$asx(t4, t5));
          if (j >= t3)
            return H.ioore(bits, j);
          count += bits[j];
        }
        huffmanValues = new Uint8Array(count);
        for (j = 0; j < count; ++j) {
          t3 = block.buffer;
          t4 = block.offset;
          if (typeof t4 !== "number")
            return t4.$add();
          block.offset = t4 + 1;
          C.NativeUint8List_methods.$indexSet(huffmanValues, j, J.$index$asx(t3, t4));
        }
        if (typeof t2 !== "number")
          return t2.$and();
        if ((t2 & 16) !== 0) {
          index = t2 - 16;
          ht1 = ht0;
        } else {
          ht1 = ht;
          index = t2;
        }
        if (ht1.length <= index)
          C.JSArray_methods.set$length(ht1, index + 1);
        C.JSArray_methods.$indexSet(ht1, index, this._buildHuffmanTable$2(bits, huffmanValues));
      }
    },
    _readSOS$1: function(block) {
      var components, t1, t2, i, t3, t4, t5, component, dc_tbl_no, ac_tbl_no, spectralStart, spectralEnd, successiveApproximation, _this = this,
        n = block.readByte$0();
      if (typeof n !== "number")
        return n.$lt();
      if (n < 1 || n > 4)
        throw H.wrapException(K.ImageException$("Invalid SOS block"));
      components = new Array(n);
      components.fixed$length = Array;
      for (t1 = _this.huffmanTablesAC, t2 = _this.huffmanTablesDC, i = 0; i < n; ++i) {
        t3 = block.buffer;
        t4 = block.offset;
        if (typeof t4 !== "number")
          return t4.$add();
        block.offset = t4 + 1;
        t4 = J.$index$asx(t3, t4);
        t3 = block.buffer;
        t5 = block.offset;
        if (typeof t5 !== "number")
          return t5.$add();
        block.offset = t5 + 1;
        t5 = J.$index$asx(t3, t5);
        if (!_this.frame.components.containsKey$1(t4))
          throw H.wrapException(K.ImageException$("Invalid Component in SOS block"));
        component = _this.frame.components.$index(0, t4);
        C.JSArray_methods.$indexSet(components, i, component);
        if (typeof t5 !== "number")
          return t5.$shr();
        dc_tbl_no = C.JSInt_methods._shrOtherPositive$1(t5, 4) & 15;
        ac_tbl_no = t5 & 15;
        t3 = t2.length;
        if (dc_tbl_no < t3) {
          if (dc_tbl_no >= t3)
            return H.ioore(t2, dc_tbl_no);
          component.huffmanTableDC = t2[dc_tbl_no];
        }
        t3 = t1.length;
        if (ac_tbl_no < t3) {
          if (ac_tbl_no >= t3)
            return H.ioore(t1, ac_tbl_no);
          component.huffmanTableAC = t1[ac_tbl_no];
        }
      }
      spectralStart = block.readByte$0();
      spectralEnd = block.readByte$0();
      successiveApproximation = block.readByte$0();
      if (typeof successiveApproximation !== "number")
        return successiveApproximation.$shr();
      t1 = C.JSInt_methods._shrOtherPositive$1(successiveApproximation, 4);
      t2 = _this.input;
      t3 = _this.frame;
      t1 = new R.JpegScan(t2, t3, components, _this.resetInterval, spectralStart, spectralEnd, t1 & 15, successiveApproximation & 15);
      t1.mcusPerLine = t3.mcusPerLine;
      t1.progressive = t3.progressive;
      t1.decode$0();
    },
    _buildHuffmanTable$2: function(codeLengths, values) {
      var p, t1, k, q, i, j, t2, t3, t4, t5, code = [], $length = 16;
      while (true) {
        if (!($length > 0 && codeLengths[$length - 1] === 0))
          break;
        --$length;
      }
      code.push(new Y._JpegHuffman([]));
      if (0 >= code.length)
        return H.ioore(code, 0);
      p = code[0];
      for (t1 = values.length, k = 0, q = null, i = 0; i < $length;) {
        for (j = 0; j < codeLengths[i]; ++j) {
          if (0 >= code.length)
            return H.ioore(code, -1);
          p = code.pop();
          t2 = p.children;
          t3 = t2.length;
          t4 = p.index;
          if (t3 <= t4)
            C.JSArray_methods.set$length(t2, t4 + 1);
          t3 = p.index;
          if (k < 0 || k >= t1)
            return H.ioore(values, k);
          C.JSArray_methods.$indexSet(t2, t3, values[k]);
          for (; t2 = p.index, t2 > 0;) {
            if (0 >= code.length)
              return H.ioore(code, -1);
            p = code.pop();
          }
          p.index = t2 + 1;
          code.push(p);
          for (; code.length <= i; p = q) {
            t2 = [];
            q = new Y._JpegHuffman(t2);
            code.push(q);
            t3 = p.children;
            t4 = t3.length;
            t5 = p.index;
            if (t4 <= t5)
              C.JSArray_methods.set$length(t3, t5 + 1);
            C.JSArray_methods.$indexSet(t3, p.index, t2);
          }
          ++k;
        }
        ++i;
        if (i < $length) {
          t2 = [];
          q = new Y._JpegHuffman(t2);
          code.push(q);
          t3 = p.children;
          t4 = t3.length;
          t5 = p.index;
          if (t4 <= t5)
            C.JSArray_methods.set$length(t3, t5 + 1);
          C.JSArray_methods.$indexSet(t3, p.index, t2);
          p = q;
        }
      }
      if (0 >= code.length)
        return H.ioore(code, 0);
      return code[0].children;
    },
    _buildComponentData$2: function(frame, component) {
      var samplesPerLine, $R, r, t1, t2, lines, t3, t4, l, blockRow, scanLine, i, l0, blockCol, t5, t6, sample, offset, j, line, offset0,
        blocksPerLine = component.blocksPerLine,
        blocksPerColumn = component.blocksPerColumn;
      if (typeof blocksPerLine !== "number")
        return blocksPerLine.$shl();
      samplesPerLine = blocksPerLine << 3 >>> 0;
      $R = new Int32Array(64);
      r = new Uint8Array(64);
      if (typeof blocksPerColumn !== "number")
        return blocksPerColumn.$mul();
      t1 = blocksPerColumn * 8;
      t2 = new Array(t1);
      t2.fixed$length = Array;
      lines = H.setRuntimeTypeInfo(t2, type$.JSArray_legacy_Uint8List);
      for (t2 = r.length, t3 = component.quantizationTableList, t4 = component.quantizationIndex, l = 0, blockRow = 0; blockRow < blocksPerColumn; ++blockRow) {
        scanLine = blockRow << 3 >>> 0;
        for (i = 0; i < 8; ++i, l = l0) {
          l0 = l + 1;
          C.JSArray_methods.$indexSet(lines, l, new Uint8Array(samplesPerLine));
        }
        for (blockCol = 0; blockCol < blocksPerLine; ++blockCol) {
          t5 = C.JSArray_methods.$index(t3, t4);
          t6 = component.blocks;
          if (blockRow >= t6.length)
            return H.ioore(t6, blockRow);
          t6 = t6[blockRow];
          if (blockCol >= t6.length)
            return H.ioore(t6, blockCol);
          L.quantizeAndInverse(t5, t6[blockCol], r, $R);
          sample = blockCol << 3 >>> 0;
          for (offset = 0, j = 0; j < 8; ++j) {
            t5 = scanLine + j;
            if (t5 >= t1)
              return H.ioore(lines, t5);
            line = lines[t5];
            for (i = 0; i < 8; ++i, offset = offset0) {
              t5 = sample + i;
              offset0 = offset + 1;
              if (offset < 0 || offset >= t2)
                return H.ioore(r, offset);
              t6 = r[offset];
              if (t5 >= line.length)
                return H.ioore(line, t5);
              line[t5] = t6;
            }
          }
        }
      }
      return lines;
    }
  };
  Y._JpegHuffman.prototype = {};
  L.JpegFrame.prototype = {
    prepare$0: function() {
      var t1, t2, component, t3, t4, blocksPerLine, t5, blocksPerColumn, blocksPerLineForMcu, blocksPerColumnForMcu, blocks, i, row, j, _this = this;
      for (t1 = _this.components, t2 = t1.get$keys(), t2 = t2.get$iterator(t2); t2.moveNext$0();) {
        component = t1.$index(0, t2.get$current());
        _this.set$maxHSamples(Math.max(_this.maxHSamples, component.hSamples));
        _this.set$maxVSamples(Math.max(_this.maxVSamples, component.vSamples));
      }
      t2 = _this.samplesPerLine;
      if (typeof t2 !== "number")
        return t2.$div();
      _this.mcusPerLine = C.JSDouble_methods.ceil$0(t2 / 8 / _this.maxHSamples);
      t2 = _this.scanLines;
      if (typeof t2 !== "number")
        return t2.$div();
      _this.mcusPerColumn = C.JSDouble_methods.ceil$0(t2 / 8 / _this.maxVSamples);
      for (t2 = t1.get$keys(), t2 = t2.get$iterator(t2); t2.moveNext$0();) {
        component = t1.$index(0, t2.get$current());
        t3 = _this.samplesPerLine;
        if (typeof t3 !== "number")
          return t3.$div();
        t3 = C.JSDouble_methods.ceil$0(t3 / 8);
        t4 = component.hSamples;
        blocksPerLine = C.JSDouble_methods.ceil$0(t3 * t4 / _this.maxHSamples);
        t3 = _this.scanLines;
        if (typeof t3 !== "number")
          return t3.$div();
        t3 = C.JSDouble_methods.ceil$0(t3 / 8);
        t5 = component.vSamples;
        blocksPerColumn = C.JSDouble_methods.ceil$0(t3 * t5 / _this.maxVSamples);
        t3 = _this.mcusPerLine;
        if (typeof t3 !== "number")
          return t3.$mul();
        blocksPerLineForMcu = t3 * t4;
        t4 = _this.mcusPerColumn;
        if (typeof t4 !== "number")
          return t4.$mul();
        blocksPerColumnForMcu = t4 * t5;
        blocks = new Array(blocksPerColumnForMcu);
        blocks.fixed$length = Array;
        for (i = 0; i < blocksPerColumnForMcu; ++i) {
          row = new Array(blocksPerLineForMcu);
          row.fixed$length = Array;
          for (j = 0; j < blocksPerLineForMcu; ++j)
            C.JSArray_methods.$indexSet(row, j, new Int32Array(64));
          C.JSArray_methods.$indexSet(blocks, i, row);
        }
        component.blocksPerLine = blocksPerLine;
        component.blocksPerColumn = blocksPerColumn;
        component.blocks = blocks;
      }
    },
    set$maxHSamples: function(maxHSamples) {
      this.maxHSamples = H._asIntS(maxHSamples);
    },
    set$maxVSamples: function(maxVSamples) {
      this.maxVSamples = H._asIntS(maxVSamples);
    }
  };
  S.JpegJfif.prototype = {};
  R.JpegScan.prototype = {
    decode$0: function() {
      var decodeFn, t2, t3, t4, mcuExpected, component, mcu, h, v, i, n, blockRow, blockCol, j, k, t5, t6, _this = this,
        t1 = _this.components,
        componentsLength = t1.length;
      if (H.boolConversionCheck(_this.progressive))
        if (_this.spectralStart === 0)
          decodeFn = _this.successivePrev === 0 ? _this.get$_decodeDCFirst() : _this.get$_decodeDCSuccessive();
        else
          decodeFn = _this.successivePrev === 0 ? _this.get$_decodeACFirst() : _this.get$_decodeACSuccessive();
      else
        decodeFn = _this.get$_decodeBaseline();
      t2 = componentsLength === 1;
      if (t2) {
        if (0 >= componentsLength)
          return H.ioore(t1, 0);
        t3 = t1[0];
        t4 = t3.blocksPerLine;
        t3 = t3.blocksPerColumn;
        if (typeof t4 !== "number")
          return t4.$mul();
        if (typeof t3 !== "number")
          return H.iae(t3);
        mcuExpected = t4 * t3;
      } else {
        t3 = _this.mcusPerLine;
        t4 = _this.frame.mcusPerColumn;
        if (typeof t3 !== "number")
          return t3.$mul();
        if (typeof t4 !== "number")
          return H.iae(t4);
        mcuExpected = t3 * t4;
      }
      t3 = _this.resetInterval;
      if (t3 == null || t3 === 0)
        _this.resetInterval = mcuExpected;
      for (t3 = _this.input, component = null, mcu = 0, h = null, v = null; mcu < mcuExpected;) {
        for (i = 0; i < componentsLength; ++i)
          t1[i].pred = 0;
        _this.eobrun = 0;
        if (t2) {
          if (0 >= componentsLength)
            return H.ioore(t1, 0);
          component = t1[0];
          n = 0;
          while (true) {
            t4 = _this.resetInterval;
            if (typeof t4 !== "number")
              return H.iae(t4);
            if (!(n < t4))
              break;
            t4 = component.blocksPerLine;
            if (typeof t4 !== "number")
              return H.iae(t4);
            blockRow = C.JSInt_methods.$tdiv(mcu, t4);
            blockCol = C.JSInt_methods.$mod(mcu, t4);
            t4 = component.blocks;
            if (blockRow < 0 || blockRow >= t4.length)
              return H.ioore(t4, blockRow);
            t4 = t4[blockRow];
            if (blockCol < 0 || blockCol >= t4.length)
              return H.ioore(t4, blockCol);
            decodeFn.call$2(component, t4[blockCol]);
            ++mcu;
            ++n;
          }
        } else {
          n = 0;
          while (true) {
            t4 = _this.resetInterval;
            if (typeof t4 !== "number")
              return H.iae(t4);
            if (!(n < t4))
              break;
            for (i = 0; i < componentsLength; ++i) {
              component = t1[i];
              h = component.hSamples;
              v = component.vSamples;
              for (j = 0; j < v; ++j)
                for (k = 0; k < h; ++k)
                  _this._decodeMcu$5(component, decodeFn, mcu, j, k);
            }
            ++mcu;
            ++n;
          }
        }
        _this.bitsCount = 0;
        t4 = t3.buffer;
        t5 = t3.offset;
        if (typeof t5 !== "number")
          return t5.$add();
        t5 = J.$index$asx(t4, t5);
        t4 = t3.buffer;
        t6 = t3.offset;
        if (typeof t6 !== "number")
          return t6.$add();
        t6 = J.$index$asx(t4, t6 + 1);
        if (t5 === 255) {
          if (typeof t6 !== "number")
            return t6.$ge();
          if (t6 >= 208 && t6 <= 215) {
            t4 = t3.offset;
            if (typeof t4 !== "number")
              return t4.$add();
            t3.offset = t4 + 2;
          } else
            break;
        }
      }
    },
    _readBit$0: function() {
      var t2, t3, nextByte, _this = this,
        t1 = _this.bitsCount;
      if (t1 > 0) {
        --t1;
        _this.bitsCount = t1;
        t2 = _this.bitsData;
        if (typeof t2 !== "number")
          return t2.$shr();
        return C.JSInt_methods.$shr(t2, t1) & 1;
      }
      t1 = _this.input;
      t2 = t1.offset;
      t3 = t1.end;
      if (typeof t2 !== "number")
        return t2.$ge();
      if (t2 >= t3)
        return null;
      t2 = t1.readByte$0();
      _this.bitsData = t2;
      if (t2 === 255) {
        nextByte = t1.readByte$0();
        if (nextByte !== 0) {
          t1 = _this.bitsData;
          if (typeof t1 !== "number")
            return t1.$shl();
          if (typeof nextByte !== "number")
            return H.iae(nextByte);
          throw H.wrapException(K.ImageException$("unexpected marker: " + C.JSInt_methods.toRadixString$1((t1 << 8 | nextByte) >>> 0, 16)));
        }
      }
      _this.bitsCount = 7;
      t1 = _this.bitsData;
      if (typeof t1 !== "number")
        return t1.$shr();
      return C.JSInt_methods._shrOtherPositive$1(t1, 7) & 1;
    },
    _jpeg_scan$_decodeHuffman$1: function(tree) {
      var node, bit;
      for (node = tree; bit = this._readBit$0(), bit != null;) {
        node = J.$index$asx(node, bit);
        if (typeof node == "number")
          return C.JSNumber_methods.toInt$0(node);
      }
      return null;
    },
    _receive$1: function($length) {
      var bit, n = 0;
      while (true) {
        if (typeof $length !== "number")
          return $length.$gt();
        if (!($length > 0))
          break;
        bit = this._readBit$0();
        if (bit == null)
          return null;
        n = (n << 1 | bit) >>> 0;
        --$length;
      }
      return n;
    },
    _receiveAndExtend$1: function($length) {
      var n, t1;
      if ($length === 1)
        return this._readBit$0() === 1 ? 1 : -1;
      n = this._receive$1($length);
      if (typeof $length !== "number")
        return $length.$sub();
      t1 = C.JSInt_methods.$shl(1, $length - 1);
      if (typeof n !== "number")
        return n.$ge();
      if (n >= t1)
        return n;
      return n + C.JSInt_methods.$shl(-1, $length) + 1;
    },
    _decodeBaseline$2: function(component, zz) {
      var k, rs, s, r, z, _this = this,
        t = _this._jpeg_scan$_decodeHuffman$1(component.huffmanTableDC),
        diff = t === 0 ? 0 : _this._receiveAndExtend$1(t),
        t1 = component.pred;
      if (typeof t1 !== "number")
        return t1.$add();
      t1 += diff;
      component.pred = t1;
      zz.length;
      if (0 < 0 || 0 >= 64)
        return H.ioore(zz, 0);
      zz[0] = t1;
      for (k = 1; k < 64;) {
        rs = _this._jpeg_scan$_decodeHuffman$1(component.huffmanTableAC);
        if (typeof rs !== "number")
          return rs.$and();
        s = rs & 15;
        r = C.JSInt_methods._shrOtherPositive$1(rs, 4);
        if (s === 0) {
          if (r < 15)
            break;
          k += 16;
          continue;
        }
        k += r;
        s = _this._receiveAndExtend$1(s);
        if (k < 0 || k >= 80)
          return H.ioore(C.List_AZw, k);
        z = C.List_AZw[k];
        if (z >= 64)
          return H.ioore(zz, z);
        zz[z] = s;
        ++k;
      }
    },
    _decodeDCFirst$2: function(component, zz) {
      var t = this._jpeg_scan$_decodeHuffman$1(component.huffmanTableDC),
        diff = t === 0 ? 0 : C.JSInt_methods._shlPositive$1(this._receiveAndExtend$1(t), this.successive),
        t1 = component.pred;
      if (typeof t1 !== "number")
        return t1.$add();
      t1 += diff;
      component.pred = t1;
      zz.length;
      if (0 < 0 || 0 >= 64)
        return H.ioore(zz, 0);
      zz[0] = t1;
    },
    _decodeDCSuccessive$2: function(component, zz) {
      var t1 = zz[0],
        t2 = this._readBit$0();
      if (typeof t2 !== "number")
        return t2.$shl();
      zz[0] = (t1 | C.JSInt_methods._shlPositive$1(t2, this.successive)) >>> 0;
    },
    _decodeACFirst$2: function(component, zz) {
      var k, e, rs, s, r, t2, z, t3, _this = this,
        t1 = _this.eobrun;
      if (t1 > 0) {
        _this.eobrun = t1 - 1;
        return;
      }
      k = _this.spectralStart;
      e = _this.spectralEnd;
      t1 = _this.successive;
      while (true) {
        if (typeof k !== "number")
          return k.$le();
        if (typeof e !== "number")
          return H.iae(e);
        if (!(k <= e))
          break;
        c$0: {
          rs = _this._jpeg_scan$_decodeHuffman$1(component.huffmanTableAC);
          if (typeof rs !== "number")
            return rs.$and();
          s = rs & 15;
          r = C.JSInt_methods._shrOtherPositive$1(rs, 4);
          if (s === 0) {
            if (r < 15) {
              t1 = _this._receive$1(r);
              t2 = C.JSInt_methods._shlPositive$1(1, r);
              if (typeof t1 !== "number")
                return t1.$add();
              _this.eobrun = t1 + t2 - 1;
              break;
            }
            k += 16;
            break c$0;
          }
          k += r;
          if (k < 0 || k >= 80)
            return H.ioore(C.List_AZw, k);
          z = C.List_AZw[k];
          t2 = _this._receiveAndExtend$1(s);
          t3 = C.JSInt_methods._shlPositive$1(1, t1);
          zz.length;
          if (z >= 64)
            return H.ioore(zz, z);
          zz[z] = t2 * t3;
          ++k;
        }
      }
    },
    _decodeACSuccessive$2: function(component, zz) {
      var z, t2, rs, t3, _this = this,
        k = _this.spectralStart,
        e = _this.spectralEnd,
        t1 = _this.successive,
        s = 0, r = 0;
      while (true) {
        if (typeof k !== "number")
          return k.$le();
        if (typeof e !== "number")
          return H.iae(e);
        if (!(k <= e))
          break;
        c$1: {
          if (k < 0 || k >= 80)
            return H.ioore(C.List_AZw, k);
          z = C.List_AZw[k];
          t2 = _this.successiveACState;
          switch (t2) {
            case 0:
              rs = _this._jpeg_scan$_decodeHuffman$1(component.huffmanTableAC);
              if (rs == null)
                break c$1;
              s = rs & 15;
              r = C.JSInt_methods._shrOtherPositive$1(rs, 4);
              if (s === 0)
                if (r < 15) {
                  t2 = _this._receive$1(r);
                  t3 = C.JSInt_methods._shlPositive$1(1, r);
                  if (typeof t2 !== "number")
                    return t2.$add();
                  _this.eobrun = t2 + t3;
                  _this.successiveACState = 4;
                } else {
                  _this.successiveACState = 1;
                  r = 16;
                }
              else {
                if (s !== 1)
                  throw H.wrapException(K.ImageException$("invalid ACn encoding"));
                _this.successiveACNextValue = _this._receiveAndExtend$1(s);
                _this.successiveACState = r !== 0 ? 2 : 3;
              }
              break c$1;
            case 1:
            case 2:
              zz.length;
              if (z >= 64)
                return H.ioore(zz, z);
              t3 = zz[z];
              if (t3 !== 0) {
                t2 = _this._readBit$0();
                if (typeof t2 !== "number")
                  return t2.$shl();
                t2 = C.JSInt_methods._shlPositive$1(t2, t1);
                if (z >= 64)
                  return H.ioore(zz, z);
                zz[z] = t3 + t2;
              } else {
                --r;
                if (r === 0)
                  _this.successiveACState = t2 === 2 ? 3 : 0;
              }
              break;
            case 3:
              zz.length;
              if (z >= 64)
                return H.ioore(zz, z);
              t2 = zz[z];
              if (t2 !== 0) {
                t3 = _this._readBit$0();
                if (typeof t3 !== "number")
                  return t3.$shl();
                t3 = C.JSInt_methods._shlPositive$1(t3, t1);
                if (z >= 64)
                  return H.ioore(zz, z);
                zz[z] = t2 + t3;
              } else {
                t2 = _this.successiveACNextValue;
                if (typeof t2 !== "number")
                  return t2.$shl();
                t2 = C.JSInt_methods._shlPositive$1(t2, t1);
                if (z >= 64)
                  return H.ioore(zz, z);
                zz[z] = t2;
                _this.successiveACState = 0;
              }
              break;
            case 4:
              zz.length;
              if (z >= 64)
                return H.ioore(zz, z);
              t2 = zz[z];
              if (t2 !== 0) {
                t3 = _this._readBit$0();
                if (typeof t3 !== "number")
                  return t3.$shl();
                t3 = C.JSInt_methods._shlPositive$1(t3, t1);
                if (z >= 64)
                  return H.ioore(zz, z);
                zz[z] = t2 + t3;
              }
              break;
          }
          ++k;
        }
      }
      if (_this.successiveACState === 4)
        if (--_this.eobrun === 0)
          _this.successiveACState = 0;
    },
    _decodeMcu$5: function(component, decodeFn, mcu, row, col) {
      var blockRow, blockCol, t2, numCols,
        t1 = this.mcusPerLine;
      if (typeof t1 !== "number")
        return H.iae(t1);
      blockRow = C.JSInt_methods.$tdiv(mcu, t1) * component.vSamples + row;
      blockCol = C.JSInt_methods.$mod(mcu, t1) * component.hSamples + col;
      t1 = component.blocks;
      t2 = t1.length;
      if (blockRow >= t2)
        return;
      if (blockRow < 0)
        return H.ioore(t1, blockRow);
      t1 = t1[blockRow];
      numCols = t1.length;
      if (blockCol >= numCols)
        return;
      if (blockCol < 0)
        return H.ioore(t1, blockCol);
      decodeFn.call$2(component, t1[blockCol]);
    }
  };
  Z.JpegDecoder.prototype = {
    decodeImage$1: function(data) {
      var jpeg;
      type$.legacy_List_legacy_int._as(data);
      jpeg = Y.JpegData$();
      jpeg.read$1(data);
      if (jpeg.frames.length !== 1)
        throw H.wrapException(K.ImageException$("only single frame JPEGs supported"));
      return L.getImageFromJpeg(jpeg);
    }
  };
  Z.JpegEncoder.prototype = {
    setQuality$1: function(quality) {
      quality = C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(quality, 0, 100));
      if (this.currentQuality === quality)
        return;
      this._initQuantTables$1(quality < 50 ? C.JSDouble_methods.floor$0(5000 / quality) : C.JSInt_methods.floor$0(200 - quality * 2));
      this.currentQuality = quality;
    },
    encodeImage$1: function(image) {
      var t1, t2, imageData, quadWidth, t3, t4, t5, t6, t7, t8, DCY, DCU, DCV, y, t9, t10, x, start, pos, row, col, p, t11, p0, r, g, b, t12, t13, _this = this,
        fp = G.OutputBuffer$(true, 8192);
      fp.writeByte$1(255);
      fp.writeByte$1(216);
      fp.writeByte$1(255);
      fp.writeByte$1(224);
      fp.writeUint16$1(16);
      fp.writeByte$1(74);
      fp.writeByte$1(70);
      fp.writeByte$1(73);
      fp.writeByte$1(70);
      fp.writeByte$1(0);
      fp.writeByte$1(1);
      fp.writeByte$1(1);
      fp.writeByte$1(0);
      fp.writeUint16$1(1);
      fp.writeUint16$1(1);
      fp.writeByte$1(0);
      fp.writeByte$1(0);
      _this._writeAPP1$2(fp, image.exif);
      _this._writeDQT$1(fp);
      t1 = image.width;
      t2 = image.height;
      fp.writeByte$1(255);
      fp.writeByte$1(192);
      fp.writeUint16$1(17);
      fp.writeByte$1(8);
      fp.writeUint16$1(t2);
      fp.writeUint16$1(t1);
      fp.writeByte$1(3);
      fp.writeByte$1(1);
      fp.writeByte$1(17);
      fp.writeByte$1(0);
      fp.writeByte$1(2);
      fp.writeByte$1(17);
      fp.writeByte$1(1);
      fp.writeByte$1(3);
      fp.writeByte$1(17);
      fp.writeByte$1(1);
      _this._writeDHT$1(fp);
      fp.writeByte$1(255);
      fp.writeByte$1(218);
      fp.writeUint16$1(12);
      fp.writeByte$1(3);
      fp.writeByte$1(1);
      fp.writeByte$1(0);
      fp.writeByte$1(2);
      fp.writeByte$1(17);
      fp.writeByte$1(3);
      fp.writeByte$1(17);
      fp.writeByte$1(0);
      fp.writeByte$1(63);
      fp.writeByte$1(0);
      _this._bytenew = 0;
      _this._bytepos = 7;
      imageData = image.getBytes$0();
      if (typeof t1 !== "number")
        return t1.$mul();
      quadWidth = t1 * 4;
      if (typeof t2 !== "number")
        return H.iae(t2);
      t1 = _this.YDU;
      t3 = _this.fdtbl_Y;
      t4 = _this.UDU;
      t5 = _this.fdtbl_UV;
      t6 = _this.VDU;
      t7 = imageData.length;
      t8 = _this.RGB_YUV_TABLE;
      DCY = 0;
      DCU = 0;
      DCV = 0;
      y = 0;
      for (; y < t2;) {
        for (t9 = y + 1, t10 = quadWidth * y, x = 0; x < quadWidth;) {
          start = t10 + x;
          for (pos = 0; pos < 64; ++pos) {
            row = pos >>> 3;
            col = (pos & 7) * 4;
            p = start + row * quadWidth + col;
            if (y + row >= t2)
              p -= quadWidth * (t9 + row - t2);
            t11 = x + col;
            if (t11 >= quadWidth)
              p -= t11 - quadWidth + 4;
            p0 = p + 1;
            if (p < 0 || p >= t7)
              return H.ioore(imageData, p);
            r = imageData[p];
            p = p0 + 1;
            if (p0 < 0 || p0 >= t7)
              return H.ioore(imageData, p0);
            g = imageData[p0];
            if (p < 0 || p >= t7)
              return H.ioore(imageData, p);
            b = imageData[p];
            if (r >= 2048)
              return H.ioore(t8, r);
            t11 = t8[r];
            t12 = g + 256;
            if (t12 >= 2048)
              return H.ioore(t8, t12);
            t12 = t8[t12];
            t13 = b + 512;
            if (t13 >= 2048)
              return H.ioore(t8, t13);
            t1[pos] = C.JSInt_methods._shrOtherPositive$1(t11 + t12 + t8[t13], 16) - 128;
            t13 = r + 768;
            if (t13 >= 2048)
              return H.ioore(t8, t13);
            t13 = t8[t13];
            t12 = g + 1024;
            if (t12 >= 2048)
              return H.ioore(t8, t12);
            t12 = t8[t12];
            t11 = b + 1280;
            if (t11 >= 2048)
              return H.ioore(t8, t11);
            t4[pos] = C.JSInt_methods._shrOtherPositive$1(t13 + t12 + t8[t11], 16) - 128;
            t11 = r + 1280;
            if (t11 >= 2048)
              return H.ioore(t8, t11);
            t11 = t8[t11];
            t12 = g + 1536;
            if (t12 >= 2048)
              return H.ioore(t8, t12);
            t12 = t8[t12];
            t13 = b + 1792;
            if (t13 >= 2048)
              return H.ioore(t8, t13);
            t6[pos] = C.JSInt_methods._shrOtherPositive$1(t11 + t12 + t8[t13], 16) - 128;
          }
          DCY = _this._processDU$6(fp, t1, t3, DCY, _this.YDC_HT, _this.YAC_HT);
          DCU = _this._processDU$6(fp, t4, t5, DCU, _this.UVDC_HT, _this.UVAC_HT);
          DCV = _this._processDU$6(fp, t6, t5, DCV, _this.UVDC_HT, _this.UVAC_HT);
          x += 32;
        }
        y += 8;
      }
      t1 = _this._bytepos;
      if (t1 >= 0) {
        ++t1;
        _this._writeBits$2(fp, H.setRuntimeTypeInfo([C.JSInt_methods.$shl(1, t1) - 1, t1], type$.JSArray_legacy_int));
      }
      fp.writeByte$1(255);
      fp.writeByte$1(217);
      return H.NativeUint8List_NativeUint8List$view(fp._buffer.buffer, 0, fp.length);
    },
    _initQuantTables$1: function(sf) {
      var t1, i, t, t2, j, u, t3, t4, k, row, col, t5, t6, t7, t8, _this = this;
      for (t1 = _this.YTable, i = 0; i < 64; ++i) {
        t = C.JSDouble_methods.floor$0((C.List_kcl0[i] * sf + 50) / 100);
        if (t < 1)
          t = 1;
        else if (t > 255)
          t = 255;
        t2 = C.List_kcl[i];
        if (t2 >= 64)
          return H.ioore(t1, t2);
        t1[t2] = t;
      }
      for (t2 = _this.UVTable, j = 0; j < 64; ++j) {
        u = C.JSDouble_methods.floor$0((C.List_kcl1[j] * sf + 50) / 100);
        if (u < 1)
          u = 1;
        else if (u > 255)
          u = 255;
        t3 = C.List_kcl[j];
        if (t3 >= 64)
          return H.ioore(t2, t3);
        t2[t3] = u;
      }
      for (t3 = _this.fdtbl_Y, t4 = _this.fdtbl_UV, k = 0, row = 0; row < 8; ++row)
        for (col = 0; col < 8; ++col) {
          if (k < 0 || k >= 64)
            return H.ioore(C.List_kcl, k);
          t5 = C.List_kcl[k];
          if (t5 >= 64)
            return H.ioore(t1, t5);
          t6 = t1[t5];
          t7 = C.List_K2a[row];
          t8 = C.List_K2a[col];
          t3[k] = 1 / (t6 * t7 * t8 * 8);
          t4[k] = 1 / (t2[t5] * t7 * t8 * 8);
          ++k;
        }
    },
    _computeHuffmanTbl$2: function(nrcodes, std_table) {
      var HT, t2, codevalue, pos_in_table, k, j, index,
        t1 = type$.legacy_List_legacy_int;
      t1._as(nrcodes);
      t1._as(std_table);
      t1 = type$.JSArray_legacy_int;
      HT = H.setRuntimeTypeInfo([H.setRuntimeTypeInfo([], t1)], type$.JSArray_legacy_List_legacy_int);
      for (t2 = std_table.length, codevalue = 0, pos_in_table = 0, k = 1; k <= 16; ++k) {
        for (j = 1; j <= nrcodes[k]; ++j) {
          if (pos_in_table < 0 || pos_in_table >= t2)
            return H.ioore(std_table, pos_in_table);
          index = std_table[pos_in_table];
          if (HT.length <= index)
            C.JSArray_methods.set$length(HT, index + 1);
          C.JSArray_methods.$indexSet(HT, index, H.setRuntimeTypeInfo([codevalue, k], t1));
          ++pos_in_table;
          ++codevalue;
        }
        codevalue *= 2;
      }
      return HT;
    },
    _initCategoryNumber$0: function() {
      var t1, t2, t3, nrlower, nrupper, cat, nr, t4, nrneg, t5, t6;
      for (t1 = this.category, t2 = this.bitcode, t3 = type$.JSArray_legacy_int, nrlower = 1, nrupper = 2, cat = 1; cat <= 15; ++cat) {
        for (nr = nrlower; nr < nrupper; ++nr) {
          t4 = 32767 + nr;
          C.JSArray_methods.$indexSet(t1, t4, cat);
          C.JSArray_methods.$indexSet(t2, t4, H.setRuntimeTypeInfo([nr, cat], t3));
        }
        for (t4 = nrupper - 1, nrneg = -t4, t5 = -nrlower; nrneg <= t5; ++nrneg) {
          t6 = 32767 + nrneg;
          C.JSArray_methods.$indexSet(t1, t6, cat);
          C.JSArray_methods.$indexSet(t2, t6, H.setRuntimeTypeInfo([t4 + nrneg, cat], t3));
        }
        nrlower = nrlower << 1 >>> 0;
        nrupper = nrupper << 1 >>> 0;
      }
    },
    _initRGBYUVTable$0: function() {
      var t1, i;
      for (t1 = this.RGB_YUV_TABLE, i = 0; i < 256; ++i) {
        t1[i] = 19595 * i;
        t1[i + 256] = 38470 * i;
        t1[i + 512] = 7471 * i + 32768;
        t1[i + 768] = -11059 * i;
        t1[i + 1024] = -21709 * i;
        t1[i + 1280] = 32768 * i + 8421375;
        t1[i + 1536] = -27439 * i;
        t1[i + 1792] = -5329 * i;
      }
    },
    _fDCTQuant$2: function(data, fdtbl) {
      var dataOff, i, d0, d1, t2, d2, t3, d3, t4, d4, t5, d5, t6, d6, t7, d7, tmp0, tmp7, tmp1, tmp6, tmp2, tmp5, tmp3, tmp10, tmp13, tmp11, z1, tmp12, z5, z2, z4, z3, z11, z13, tmp0p2, tmp7p2, tmp1p2, tmp6p2, tmp2p2, tmp5p2, tmp3p2, tmp10p2, tmp13p2, tmp11p2, z1p2, tmp12p2, z5p2, z2p2, z4p2, z3p2, z11p2, z13p2, fDCTQuant,
        t1 = type$.legacy_List_legacy_double;
      t1._as(data);
      t1._as(fdtbl);
      for (dataOff = 0, i = 0; i < 8; ++i) {
        if (dataOff >= 64)
          return H.ioore(data, dataOff);
        d0 = data[dataOff];
        t1 = dataOff + 1;
        if (t1 >= 64)
          return H.ioore(data, t1);
        d1 = data[t1];
        t2 = dataOff + 2;
        if (t2 >= 64)
          return H.ioore(data, t2);
        d2 = data[t2];
        t3 = dataOff + 3;
        if (t3 >= 64)
          return H.ioore(data, t3);
        d3 = data[t3];
        t4 = dataOff + 4;
        if (t4 >= 64)
          return H.ioore(data, t4);
        d4 = data[t4];
        t5 = dataOff + 5;
        if (t5 >= 64)
          return H.ioore(data, t5);
        d5 = data[t5];
        t6 = dataOff + 6;
        if (t6 >= 64)
          return H.ioore(data, t6);
        d6 = data[t6];
        t7 = dataOff + 7;
        if (t7 >= 64)
          return H.ioore(data, t7);
        d7 = data[t7];
        tmp0 = d0 + d7;
        tmp7 = d0 - d7;
        tmp1 = d1 + d6;
        tmp6 = d1 - d6;
        tmp2 = d2 + d5;
        tmp5 = d2 - d5;
        tmp3 = d3 + d4;
        tmp10 = tmp0 + tmp3;
        tmp13 = tmp0 - tmp3;
        tmp11 = tmp1 + tmp2;
        if (dataOff >= 64)
          return H.ioore(data, dataOff);
        data[dataOff] = tmp10 + tmp11;
        if (t4 >= 64)
          return H.ioore(data, t4);
        data[t4] = tmp10 - tmp11;
        z1 = (tmp1 - tmp2 + tmp13) * 0.707106781;
        if (t2 >= 64)
          return H.ioore(data, t2);
        data[t2] = tmp13 + z1;
        if (t6 >= 64)
          return H.ioore(data, t6);
        data[t6] = tmp13 - z1;
        tmp10 = d3 - d4 + tmp5;
        tmp12 = tmp6 + tmp7;
        z5 = (tmp10 - tmp12) * 0.382683433;
        z2 = 0.5411961 * tmp10 + z5;
        z4 = 1.306562965 * tmp12 + z5;
        z3 = (tmp5 + tmp6) * 0.707106781;
        z11 = tmp7 + z3;
        z13 = tmp7 - z3;
        if (t5 >= 64)
          return H.ioore(data, t5);
        data[t5] = z13 + z2;
        if (t3 >= 64)
          return H.ioore(data, t3);
        data[t3] = z13 - z2;
        if (t1 >= 64)
          return H.ioore(data, t1);
        data[t1] = z11 + z4;
        if (t7 >= 64)
          return H.ioore(data, t7);
        data[t7] = z11 - z4;
        dataOff += 8;
      }
      for (dataOff = 0, i = 0; i < 8; ++i) {
        if (dataOff >= 64)
          return H.ioore(data, dataOff);
        d0 = data[dataOff];
        t1 = dataOff + 8;
        if (t1 >= 64)
          return H.ioore(data, t1);
        d1 = data[t1];
        t2 = dataOff + 16;
        if (t2 >= 64)
          return H.ioore(data, t2);
        d2 = data[t2];
        t3 = dataOff + 24;
        if (t3 >= 64)
          return H.ioore(data, t3);
        d3 = data[t3];
        t4 = dataOff + 32;
        if (t4 >= 64)
          return H.ioore(data, t4);
        d4 = data[t4];
        t5 = dataOff + 40;
        if (t5 >= 64)
          return H.ioore(data, t5);
        d5 = data[t5];
        t6 = dataOff + 48;
        if (t6 >= 64)
          return H.ioore(data, t6);
        d6 = data[t6];
        t7 = dataOff + 56;
        if (t7 >= 64)
          return H.ioore(data, t7);
        d7 = data[t7];
        tmp0p2 = d0 + d7;
        tmp7p2 = d0 - d7;
        tmp1p2 = d1 + d6;
        tmp6p2 = d1 - d6;
        tmp2p2 = d2 + d5;
        tmp5p2 = d2 - d5;
        tmp3p2 = d3 + d4;
        tmp10p2 = tmp0p2 + tmp3p2;
        tmp13p2 = tmp0p2 - tmp3p2;
        tmp11p2 = tmp1p2 + tmp2p2;
        if (dataOff >= 64)
          return H.ioore(data, dataOff);
        data[dataOff] = tmp10p2 + tmp11p2;
        if (t4 >= 64)
          return H.ioore(data, t4);
        data[t4] = tmp10p2 - tmp11p2;
        z1p2 = (tmp1p2 - tmp2p2 + tmp13p2) * 0.707106781;
        if (t2 >= 64)
          return H.ioore(data, t2);
        data[t2] = tmp13p2 + z1p2;
        if (t6 >= 64)
          return H.ioore(data, t6);
        data[t6] = tmp13p2 - z1p2;
        tmp10p2 = d3 - d4 + tmp5p2;
        tmp12p2 = tmp6p2 + tmp7p2;
        z5p2 = (tmp10p2 - tmp12p2) * 0.382683433;
        z2p2 = 0.5411961 * tmp10p2 + z5p2;
        z4p2 = 1.306562965 * tmp12p2 + z5p2;
        z3p2 = (tmp5p2 + tmp6p2) * 0.707106781;
        z11p2 = tmp7p2 + z3p2;
        z13p2 = tmp7p2 - z3p2;
        if (t5 >= 64)
          return H.ioore(data, t5);
        data[t5] = z13p2 + z2p2;
        if (t3 >= 64)
          return H.ioore(data, t3);
        data[t3] = z13p2 - z2p2;
        if (t1 >= 64)
          return H.ioore(data, t1);
        data[t1] = z11p2 + z4p2;
        if (t7 >= 64)
          return H.ioore(data, t7);
        data[t7] = z11p2 - z4p2;
        ++dataOff;
      }
      for (t1 = this.outputfDCTQuant, i = 0; i < 64; ++i) {
        fDCTQuant = data[i] * fdtbl[i];
        C.JSArray_methods.$indexSet(t1, i, fDCTQuant > 0 ? C.JSNumber_methods.toInt$0(fDCTQuant + 0.5) : C.JSNumber_methods.toInt$0(fDCTQuant - 0.5));
      }
      return t1;
    },
    _writeAPP1$2: function(out, exif) {
      var t2, _i, rawData,
        t1 = exif.rawData;
      if (t1 == null)
        return;
      for (t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        rawData = t1[_i];
        out.writeByte$1(255);
        out.writeByte$1(225);
        out.writeUint16$1(rawData.length + 2);
        out.writeBytes$1(rawData);
      }
    },
    _writeDQT$1: function(out) {
      var t1, i, j;
      out.writeByte$1(255);
      out.writeByte$1(219);
      out.writeUint16$1(132);
      out.writeByte$1(0);
      for (t1 = this.YTable, i = 0; i < 64; ++i)
        out.writeByte$1(t1[i]);
      out.writeByte$1(1);
      for (t1 = this.UVTable, j = 0; j < 64; ++j)
        out.writeByte$1(t1[j]);
    },
    _writeDHT$1: function(out) {
      var i, j, k, l, m, n, o, p;
      out.writeByte$1(255);
      out.writeByte$1(196);
      out.writeUint16$1(418);
      out.writeByte$1(0);
      for (i = 0; i < 16;) {
        ++i;
        out.writeByte$1(C.List_F1L[i]);
      }
      for (j = 0; j <= 11; ++j)
        out.writeByte$1(C.List_UiL[j]);
      out.writeByte$1(16);
      for (k = 0; k < 16;) {
        ++k;
        out.writeByte$1(C.List_F1L1[k]);
      }
      for (l = 0; l <= 161; ++l)
        out.writeByte$1(C.List_G61[l]);
      out.writeByte$1(1);
      for (m = 0; m < 16;) {
        ++m;
        out.writeByte$1(C.List_F1L0[m]);
      }
      for (n = 0; n <= 11; ++n)
        out.writeByte$1(C.List_UiL[n]);
      out.writeByte$1(17);
      for (o = 0; o < 16;) {
        ++o;
        out.writeByte$1(C.List_F1L2[o]);
      }
      for (p = 0; p <= 161; ++p)
        out.writeByte$1(C.List_AKW[p]);
    },
    _processDU$6: function(out, CDU, fdtbl, DC, HTDC, HTAC) {
      var EOB, M16zeroes, DU_DCT, j, t2, Diff, pos, t3, end0pos, t4, i, lng, i0, nrzeroes, nrmarker, t5, _this = this,
        t1 = type$.legacy_List_legacy_double;
      t1._as(CDU);
      t1._as(fdtbl);
      t1 = type$.legacy_List_legacy_List_legacy_int;
      t1._as(HTDC);
      t1._as(HTAC);
      t1 = HTAC.length;
      if (0 >= t1)
        return H.ioore(HTAC, 0);
      EOB = HTAC[0];
      if (240 >= t1)
        return H.ioore(HTAC, 240);
      M16zeroes = HTAC[240];
      DU_DCT = _this._fDCTQuant$2(CDU, fdtbl);
      for (t1 = _this.DU, j = 0; j < 64; ++j)
        C.JSArray_methods.$indexSet(t1, C.List_kcl[j], DU_DCT[j]);
      t2 = t1[0];
      if (typeof t2 !== "number")
        return t2.$sub();
      if (typeof DC !== "number")
        return H.iae(DC);
      Diff = t2 - DC;
      if (Diff === 0) {
        if (0 >= HTDC.length)
          return H.ioore(HTDC, 0);
        _this._writeBits$2(out, HTDC[0]);
      } else {
        pos = 32767 + Diff;
        t3 = _this.category;
        if (pos < 0 || pos >= 65535)
          return H.ioore(t3, pos);
        _this._writeBits$2(out, (HTDC && C.JSArray_methods).$index(HTDC, t3[pos]));
        _this._writeBits$2(out, _this.bitcode[pos]);
      }
      end0pos = 63;
      while (true) {
        if (!(end0pos > 0 && t1[end0pos] === 0))
          break;
        --end0pos;
      }
      if (end0pos === 0) {
        _this._writeBits$2(out, EOB);
        return t2;
      }
      for (t3 = _this.category, t4 = _this.bitcode, i = 1, lng = null; i <= end0pos;) {
        i0 = i;
        while (true) {
          if (i0 < 0 || i0 >= 64)
            return H.ioore(t1, i0);
          if (!(t1[i0] === 0 && i0 <= end0pos))
            break;
          ++i0;
        }
        nrzeroes = i0 - i;
        if (nrzeroes >= 16) {
          lng = C.JSInt_methods._shrOtherPositive$1(nrzeroes, 4);
          for (nrmarker = 1; nrmarker <= lng; ++nrmarker)
            _this._writeBits$2(out, M16zeroes);
          nrzeroes &= 15;
        }
        t5 = t1[i0];
        if (typeof t5 !== "number")
          return H.iae(t5);
        pos = 32767 + t5;
        if (pos < 0 || pos >= 65535)
          return H.ioore(t3, pos);
        t5 = t3[pos];
        if (typeof t5 !== "number")
          return H.iae(t5);
        t5 = (nrzeroes << 4 >>> 0) + t5;
        if (t5 >= HTAC.length)
          return H.ioore(HTAC, t5);
        _this._writeBits$2(out, HTAC[t5]);
        _this._writeBits$2(out, t4[pos]);
        i = i0 + 1;
      }
      if (end0pos !== 63)
        _this._writeBits$2(out, EOB);
      return t2;
    },
    _writeBits$2: function(out, bits) {
      var t1, value, posval, _this = this;
      type$.legacy_List_legacy_int._as(bits);
      t1 = bits.length;
      if (0 >= t1)
        return H.ioore(bits, 0);
      value = bits[0];
      if (1 >= t1)
        return H.ioore(bits, 1);
      posval = bits[1] - 1;
      for (; posval >= 0;) {
        if ((value & C.JSInt_methods.$shl(1, posval)) >>> 0 !== 0)
          _this._bytenew = (_this._bytenew | C.JSInt_methods.$shl(1, _this._bytepos)) >>> 0;
        --posval;
        if (--_this._bytepos < 0) {
          t1 = _this._bytenew;
          if (t1 === 255) {
            out.writeByte$1(255);
            out.writeByte$1(0);
          } else
            out.writeByte$1(t1);
          _this._bytepos = 7;
          _this._bytenew = 0;
        }
      }
    },
    set$YDC_HT: function(YDC_HT) {
      this.YDC_HT = type$.legacy_List_legacy_List_legacy_int._as(YDC_HT);
    },
    set$UVDC_HT: function(UVDC_HT) {
      this.UVDC_HT = type$.legacy_List_legacy_List_legacy_int._as(UVDC_HT);
    },
    set$YAC_HT: function(YAC_HT) {
      this.YAC_HT = type$.legacy_List_legacy_List_legacy_int._as(YAC_HT);
    },
    set$UVAC_HT: function(UVAC_HT) {
      this.UVAC_HT = type$.legacy_List_legacy_List_legacy_int._as(UVAC_HT);
    }
  };
  D.PngFrame.prototype = {};
  D.InternalPngFrame.prototype = {};
  Q.PngInfo.prototype = {
    set$palette: function(palette) {
      this.palette = type$.legacy_List_legacy_int._as(palette);
    },
    set$transparency: function(transparency) {
      this.transparency = type$.legacy_List_legacy_int._as(transparency);
    },
    set$colorLut: function(colorLut) {
      this.colorLut = type$.legacy_List_legacy_int._as(colorLut);
    }
  };
  Q.InternalPngInfo.prototype = {};
  G.PngDecoder.prototype = {
    isValidFile$1: function(data) {
      var i, t1, t2,
        pngHeader = Z.InputBuffer$(type$.legacy_List_legacy_int._as(data), true, null, 0).readBytes$1(8);
      for (i = 0; i < 8; ++i) {
        t1 = pngHeader.buffer;
        t2 = pngHeader.offset;
        if (typeof t2 !== "number")
          return t2.$add();
        if (J.$index$asx(t1, t2 + i) !== C.List_2Vk[i])
          return false;
      }
      return true;
    },
    startDecode$1: function(data) {
      var pngHeader, i, t3, t4, t5, t6, inputPos, chunkSize, chunkType, bytes, hdr, hdrBytes, t7, gammaInt, frame, p3, r, g, b, _this = this, _null = null,
        t1 = type$.legacy_List_legacy_int,
        t2 = Z.InputBuffer$(t1._as(data), true, _null, 0);
      _this._png_decoder$_input = t2;
      pngHeader = t2.readBytes$1(8);
      for (i = 0; i < 8; ++i) {
        t2 = pngHeader.buffer;
        t3 = pngHeader.offset;
        if (typeof t3 !== "number")
          return t3.$add();
        if (J.$index$asx(t2, t3 + i) !== C.List_2Vk[i])
          return _null;
      }
      for (t2 = type$.JSArray_legacy_int, t3 = type$.JSArray_legacy_PngFrame; true;) {
        t4 = _this._png_decoder$_input;
        t5 = t4.offset;
        t6 = t4.start;
        if (typeof t5 !== "number")
          return t5.$sub();
        if (typeof t6 !== "number")
          return H.iae(t6);
        inputPos = t5 - t6;
        chunkSize = t4.readUint32$0();
        chunkType = _this._png_decoder$_input.readString$1(4);
        switch (chunkType) {
          case "IHDR":
            t4 = _this._png_decoder$_input;
            bytes = t4.subset$1(chunkSize);
            t5 = t4.offset;
            t6 = bytes.offset;
            if (typeof t6 !== "number")
              return H.iae(t6);
            if (typeof t5 !== "number")
              return t5.$add();
            t4.offset = t5 + (bytes.end - t6);
            hdr = Z.InputBuffer$from(bytes, _null, 0);
            hdrBytes = hdr.toUint8List$0();
            t6 = new Q.InternalPngInfo(H.setRuntimeTypeInfo([], t3), H.setRuntimeTypeInfo([], t2));
            _this._png_decoder$_info = t6;
            t6.width = hdr.readUint32$0();
            _this._png_decoder$_info.height = hdr.readUint32$0();
            t6 = _this._png_decoder$_info;
            t5 = hdr.buffer;
            t4 = hdr.offset;
            if (typeof t4 !== "number")
              return t4.$add();
            hdr.offset = t4 + 1;
            t6.bits = J.$index$asx(t5, t4);
            t4 = _this._png_decoder$_info;
            t5 = hdr.buffer;
            t6 = hdr.offset;
            if (typeof t6 !== "number")
              return t6.$add();
            hdr.offset = t6 + 1;
            t4.colorType = J.$index$asx(t5, t6);
            t6 = hdr.buffer;
            t5 = hdr.offset;
            if (typeof t5 !== "number")
              return t5.$add();
            hdr.offset = t5 + 1;
            J.$index$asx(t6, t5);
            t5 = _this._png_decoder$_info;
            t6 = hdr.buffer;
            t4 = hdr.offset;
            if (typeof t4 !== "number")
              return t4.$add();
            hdr.offset = t4 + 1;
            t5.filterMethod = J.$index$asx(t6, t4);
            t4 = _this._png_decoder$_info;
            t6 = hdr.buffer;
            t5 = hdr.offset;
            if (typeof t5 !== "number")
              return t5.$add();
            hdr.offset = t5 + 1;
            t4.interlaceMethod = J.$index$asx(t6, t5);
            if (!C.JSArray_methods.contains$1(H.setRuntimeTypeInfo([0, 2, 3, 4, 6], t2), _this._png_decoder$_info.colorType))
              return _null;
            t4 = _this._png_decoder$_info;
            if (t4.filterMethod !== 0)
              return _null;
            switch (t4.colorType) {
              case 0:
                if (!C.JSArray_methods.contains$1(H.setRuntimeTypeInfo([1, 2, 4, 8, 16], t2), _this._png_decoder$_info.bits))
                  return _null;
                break;
              case 2:
                if (!C.JSArray_methods.contains$1(H.setRuntimeTypeInfo([8, 16], t2), _this._png_decoder$_info.bits))
                  return _null;
                break;
              case 3:
                if (!C.JSArray_methods.contains$1(H.setRuntimeTypeInfo([1, 2, 4, 8], t2), _this._png_decoder$_info.bits))
                  return _null;
                break;
              case 4:
                if (!C.JSArray_methods.contains$1(H.setRuntimeTypeInfo([8, 16], t2), _this._png_decoder$_info.bits))
                  return _null;
                break;
              case 6:
                if (!C.JSArray_methods.contains$1(H.setRuntimeTypeInfo([8, 16], t2), _this._png_decoder$_info.bits))
                  return _null;
                break;
            }
            if (_this._png_decoder$_input.readUint32$0() !== X.getCrc32(t1._as(hdrBytes), X.getCrc32(new H.CodeUnits(chunkType), 0)))
              throw H.wrapException(K.ImageException$("Invalid " + chunkType + " checksum"));
            break;
          case "PLTE":
            t4 = _this._png_decoder$_info;
            t5 = _this._png_decoder$_input;
            bytes = t5.subset$1(chunkSize);
            t6 = t5.offset;
            t7 = bytes.offset;
            if (typeof t7 !== "number")
              return H.iae(t7);
            if (typeof t6 !== "number")
              return t6.$add();
            t5.offset = t6 + (bytes.end - t7);
            t4.set$palette(bytes.toUint8List$0());
            if (_this._png_decoder$_input.readUint32$0() !== X.getCrc32(t1._as(_this._png_decoder$_info.palette), X.getCrc32(new H.CodeUnits(chunkType), 0)))
              throw H.wrapException(K.ImageException$("Invalid " + chunkType + " checksum"));
            break;
          case "tRNS":
            t4 = _this._png_decoder$_info;
            t5 = _this._png_decoder$_input;
            bytes = t5.subset$1(chunkSize);
            t6 = t5.offset;
            t7 = bytes.offset;
            if (typeof t7 !== "number")
              return H.iae(t7);
            if (typeof t6 !== "number")
              return t6.$add();
            t5.offset = t6 + (bytes.end - t7);
            t4.set$transparency(bytes.toUint8List$0());
            if (_this._png_decoder$_input.readUint32$0() !== X.getCrc32(t1._as(_this._png_decoder$_info.transparency), X.getCrc32(new H.CodeUnits(chunkType), 0)))
              throw H.wrapException(K.ImageException$("Invalid " + chunkType + " checksum"));
            break;
          case "IEND":
            t4 = _this._png_decoder$_input;
            t5 = t4.offset;
            if (typeof t5 !== "number")
              return t5.$add();
            t4.offset = t5 + 4;
            break;
          case "gAMA":
            if (chunkSize !== 4)
              throw H.wrapException(K.ImageException$("Invalid gAMA chunk"));
            gammaInt = _this._png_decoder$_input.readUint32$0();
            t4 = _this._png_decoder$_input;
            t5 = t4.offset;
            if (typeof t5 !== "number")
              return t5.$add();
            t4.offset = t5 + 4;
            if (gammaInt !== 100000)
              _this._png_decoder$_info.gamma = gammaInt / 100000;
            break;
          case "IDAT":
            C.JSArray_methods.add$1(_this._png_decoder$_info._idat, inputPos);
            t4 = _this._png_decoder$_input;
            t5 = t4.offset;
            if (typeof t5 !== "number")
              return t5.$add();
            t5 += chunkSize;
            t4.offset = t5;
            t4.offset = t5 + 4;
            break;
          case "acTL":
            _this._png_decoder$_input.readUint32$0();
            _this._png_decoder$_input.readUint32$0();
            t4 = _this._png_decoder$_input;
            t5 = t4.offset;
            if (typeof t5 !== "number")
              return t5.$add();
            t4.offset = t5 + 4;
            break;
          case "fcTL":
            frame = new D.InternalPngFrame(H.setRuntimeTypeInfo([], t2));
            C.JSArray_methods.add$1(_this._png_decoder$_info.frames, frame);
            _this._png_decoder$_input.readUint32$0();
            frame.width = _this._png_decoder$_input.readUint32$0();
            frame.height = _this._png_decoder$_input.readUint32$0();
            _this._png_decoder$_input.readUint32$0();
            _this._png_decoder$_input.readUint32$0();
            _this._png_decoder$_input.readUint16$0();
            _this._png_decoder$_input.readUint16$0();
            t4 = _this._png_decoder$_input;
            t5 = t4.buffer;
            t6 = t4.offset;
            if (typeof t6 !== "number")
              return t6.$add();
            t4.offset = t6 + 1;
            J.$index$asx(t5, t6);
            t6 = _this._png_decoder$_input;
            t5 = t6.buffer;
            t4 = t6.offset;
            if (typeof t4 !== "number")
              return t4.$add();
            t6.offset = t4 + 1;
            J.$index$asx(t5, t4);
            t4 = _this._png_decoder$_input;
            t5 = t4.offset;
            if (typeof t5 !== "number")
              return t5.$add();
            t4.offset = t5 + 4;
            break;
          case "fdAT":
            _this._png_decoder$_input.readUint32$0();
            C.JSArray_methods.add$1(C.JSArray_methods.get$last(_this._png_decoder$_info.frames)._fdat, inputPos);
            t4 = _this._png_decoder$_input;
            t5 = t4.offset;
            if (typeof t5 !== "number")
              return t5.$add();
            t5 += chunkSize - 4;
            t4.offset = t5;
            t4.offset = t5 + 4;
            break;
          case "bKGD":
            t4 = _this._png_decoder$_info.colorType;
            if (t4 === 3) {
              t4 = _this._png_decoder$_input;
              t5 = t4.buffer;
              t6 = t4.offset;
              if (typeof t6 !== "number")
                return t6.$add();
              t4.offset = t6 + 1;
              t6 = J.$index$asx(t5, t6);
              --chunkSize;
              if (typeof t6 !== "number")
                return t6.$mul();
              p3 = t6 * 3;
              t6 = _this._png_decoder$_info.palette;
              t5 = t6.length;
              if (p3 < 0 || p3 >= t5)
                return H.ioore(t6, p3);
              r = t6[p3];
              t4 = p3 + 1;
              if (t4 >= t5)
                return H.ioore(t6, t4);
              g = t6[t4];
              t4 = p3 + 2;
              if (t4 >= t5)
                return H.ioore(t6, t4);
              b = t6[t4];
              C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(255, 0, 255));
              C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(b, 0, 255));
              C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(g, 0, 255));
              C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(r, 0, 255));
            } else if (t4 === 0 || t4 === 4) {
              _this._png_decoder$_input.readUint16$0();
              chunkSize -= 2;
            } else if (t4 === 2 || t4 === 6) {
              _this._png_decoder$_input.readUint16$0();
              _this._png_decoder$_input.readUint16$0();
              _this._png_decoder$_input.readUint16$0();
              chunkSize -= 24;
            }
            if (chunkSize > 0) {
              t4 = _this._png_decoder$_input;
              t5 = t4.offset;
              if (typeof t5 !== "number")
                return t5.$add();
              t4.offset = t5 + chunkSize;
            }
            t4 = _this._png_decoder$_input;
            t5 = t4.offset;
            if (typeof t5 !== "number")
              return t5.$add();
            t4.offset = t5 + 4;
            break;
          case "iCCP":
            _this._png_decoder$_info.iCCPName = _this._png_decoder$_input.readString$0();
            t4 = _this._png_decoder$_input;
            t5 = t4.buffer;
            t6 = t4.offset;
            if (typeof t6 !== "number")
              return t6.$add();
            t4.offset = t6 + 1;
            J.$index$asx(t5, t6);
            t6 = _this._png_decoder$_info.iCCPName;
            t5 = _this._png_decoder$_input;
            bytes = t5.subset$1(chunkSize - (t6.length + 2));
            t6 = t5.offset;
            t4 = bytes.offset;
            if (typeof t4 !== "number")
              return H.iae(t4);
            if (typeof t6 !== "number")
              return t6.$add();
            t5.offset = t6 + (bytes.end - t4);
            _this._png_decoder$_info.iCCPData = bytes.toUint8List$0();
            t4 = _this._png_decoder$_input;
            t6 = t4.offset;
            if (typeof t6 !== "number")
              return t6.$add();
            t4.offset = t6 + 4;
            break;
          default:
            t4 = _this._png_decoder$_input;
            t5 = t4.offset;
            if (typeof t5 !== "number")
              return t5.$add();
            t5 += chunkSize;
            t4.offset = t5;
            t4.offset = t5 + 4;
            break;
        }
        if (chunkType === "IEND")
          break;
        t4 = _this._png_decoder$_input;
        t5 = t4.offset;
        t4 = t4.end;
        if (typeof t5 !== "number")
          return t5.$ge();
        if (t5 >= t4)
          return _null;
      }
      return _this._png_decoder$_info;
    },
    decodeFrame$1: function(frame) {
      var t1, imageData, t2, width, height, t3, t4, len, i, chunkSize, chunkType, bytes, t5, data, f, image, input, origW, origH, _this = this, _null = null;
      if (_this._png_decoder$_info == null)
        return _null;
      t1 = type$.JSArray_legacy_int;
      imageData = H.setRuntimeTypeInfo([], t1);
      t2 = _this._png_decoder$_info;
      width = t2.width;
      height = t2.height;
      t3 = t2.frames;
      t4 = t3.length;
      if (t4 === 0 || frame === 0)
        for (len = t2._idat.length, t2 = type$.legacy_List_legacy_int, i = 0; i < len; ++i) {
          t3 = _this._png_decoder$_input;
          t4 = _this._png_decoder$_info._idat;
          if (i >= t4.length)
            return H.ioore(t4, i);
          t3.offset = t4[i];
          chunkSize = t3.readUint32$0();
          chunkType = _this._png_decoder$_input.readString$1(4);
          t3 = _this._png_decoder$_input;
          bytes = t3.subset$1(chunkSize);
          t4 = t3.offset;
          t5 = bytes.offset;
          if (typeof t5 !== "number")
            return H.iae(t5);
          if (typeof t4 !== "number")
            return t4.$add();
          t3.offset = t4 + (bytes.end - t5);
          data = bytes.toUint8List$0();
          C.JSArray_methods.addAll$1(imageData, data);
          if (_this._png_decoder$_input.readUint32$0() !== X.getCrc32(t2._as(data), X.getCrc32(new H.CodeUnits(chunkType), 0)))
            throw H.wrapException(K.ImageException$("Invalid " + chunkType + " checksum"));
        }
      else {
        if (frame >= t4)
          throw H.wrapException(K.ImageException$("Invalid Frame Number: " + frame));
        f = t3[frame];
        width = f.width;
        height = f.height;
        for (t2 = f._fdat, i = 0; i < t2.length; ++i) {
          t3 = _this._png_decoder$_input;
          t3.offset = t2[i];
          chunkSize = t3.readUint32$0();
          _this._png_decoder$_input.readString$1(4);
          t3 = _this._png_decoder$_input;
          t4 = t3.offset;
          if (typeof t4 !== "number")
            return t4.$add();
          t3.offset = t4 + 4;
          bytes = t3.subset$1(chunkSize);
          t4 = t3.offset;
          t5 = bytes.offset;
          if (typeof t5 !== "number")
            return H.iae(t5);
          if (typeof t4 !== "number")
            return t4.$add();
          t3.offset = t4 + (bytes.end - t5);
          C.JSArray_methods.addAll$1(imageData, bytes.toUint8List$0());
        }
      }
      t2 = _this._png_decoder$_info;
      t3 = t2.colorType;
      image = U.Image$(width, height, t3 === 4 || t3 === 6 || t2.transparency != null ? C.Channels_1 : C.Channels_0, _null, _null);
      input = Z.InputBuffer$(new G._ZLibDecoder().decodeBuffer$2$verify(T.InputStream$(type$.legacy_List_legacy_int._as(imageData), 1, _null, 0), false), true, _null, 0);
      _this._png_decoder$_bitBufferLen = _this._png_decoder$_bitBuffer = 0;
      t2 = _this._png_decoder$_info;
      if (t2.colorLut == null) {
        t3 = new Array(256);
        t3.fixed$length = Array;
        t2.set$colorLut(H.setRuntimeTypeInfo(t3, t1));
        for (i = 0; i < 256; ++i) {
          t1 = _this._png_decoder$_info.colorLut;
          (t1 && C.JSArray_methods).$indexSet(t1, i, i);
        }
        t1 = _this._png_decoder$_info;
        if (t1.palette != null && t1.gamma != null)
          for (i = 0; t1 = _this._png_decoder$_info, t2 = t1.palette, i < t2.length; ++i) {
            t1 = t1.colorLut;
            t3 = t2[i];
            t1.length;
            if (t3 >= 256)
              return H.ioore(t1, t3);
            (t2 && C.NativeUint8List_methods).$indexSet(t2, i, t1[t3]);
          }
      } else
        t1 = t2;
      origW = t1.width;
      origH = t1.height;
      t1.width = width;
      t1.height = height;
      _this._progressY = 0;
      if (t1.interlaceMethod !== 0) {
        if (typeof width !== "number")
          return width.$add();
        t1 = C.JSInt_methods._shrOtherPositive$1(width + 7, 3);
        if (typeof height !== "number")
          return height.$add();
        t2 = C.JSInt_methods._shrOtherPositive$1(height + 7, 3);
        _this._processPass$8(input, image, 0, 0, 8, 8, t1, t2);
        t1 = width + 3;
        _this._processPass$8(input, image, 4, 0, 8, 8, C.JSInt_methods._shrOtherPositive$1(t1, 3), t2);
        t2 = height + 3;
        _this._processPass$8(input, image, 0, 4, 4, 8, C.JSInt_methods._shrOtherPositive$1(t1, 2), C.JSInt_methods._shrOtherPositive$1(t2, 3));
        t1 = width + 1;
        _this._processPass$8(input, image, 2, 0, 4, 4, C.JSInt_methods._shrOtherPositive$1(t1, 2), C.JSInt_methods._shrOtherPositive$1(t2, 2));
        t2 = height + 1;
        _this._processPass$8(input, image, 0, 2, 2, 4, C.JSInt_methods._shrOtherPositive$1(t1, 1), C.JSInt_methods._shrOtherPositive$1(t2, 2));
        _this._processPass$8(input, image, 1, 0, 2, 2, C.JSInt_methods._shrOtherPositive$1(width, 1), C.JSInt_methods._shrOtherPositive$1(t2, 1));
        _this._processPass$8(input, image, 0, 1, 1, 2, width, C.JSInt_methods._shrOtherPositive$1(height, 1));
      } else
        _this._process$2(input, image);
      t1 = _this._png_decoder$_info;
      t1.width = origW;
      t1.height = origH;
      t1.toString;
      image.iccProfile = new D.ICCProfileData();
      return image;
    },
    decodeImage$1: function(data) {
      if (this.startDecode$1(type$.legacy_List_legacy_int._as(data)) == null)
        return null;
      return this.decodeFrame$1(0);
    },
    _processPass$8: function(input, image, xOffset, yOffset, xStep, yStep, passWidth, passHeight) {
      var channels, pixelDepth, bpp, rowBytes, line, inData, pixel, t3, t4, t5, blockWidth, dstY, srcY, ri, t6, t7, bytes, t8, row, rowInput, dstX, srcX, c, i, j, t9, _this = this,
        t1 = _this._png_decoder$_info,
        t2 = t1.colorType;
      if (t2 === 4)
        channels = 2;
      else if (t2 === 2)
        channels = 3;
      else {
        t2 = t2 === 6 ? 4 : 1;
        channels = t2;
      }
      t1 = t1.bits;
      if (typeof t1 !== "number")
        return H.iae(t1);
      pixelDepth = channels * t1;
      bpp = C.JSInt_methods._shrOtherPositive$1(pixelDepth + 7, 3);
      rowBytes = C.JSInt_methods._shrOtherPositive$1(pixelDepth * passWidth + 7, 3);
      line = P.List_List$filled(rowBytes, 0, false, type$.legacy_int);
      inData = H.setRuntimeTypeInfo([line, line], type$.JSArray_legacy_List_legacy_int);
      pixel = H.setRuntimeTypeInfo([0, 0, 0, 0], type$.JSArray_legacy_int);
      t1 = image.data;
      t2 = image.width;
      t3 = t1.length;
      t4 = xStep > 1;
      t5 = image.height;
      blockWidth = xStep - xOffset;
      dstY = yOffset;
      srcY = 0;
      ri = 0;
      while (srcY < passHeight) {
        t6 = input.buffer;
        t7 = input.offset;
        if (typeof t7 !== "number")
          return t7.$add();
        input.offset = t7 + 1;
        t7 = J.$index$asx(t6, t7);
        bytes = input.subset$1(rowBytes);
        t6 = input.offset;
        t8 = bytes.offset;
        if (typeof t8 !== "number")
          return H.iae(t8);
        if (typeof t6 !== "number")
          return t6.$add();
        input.offset = t6 + (bytes.end - t8);
        C.JSArray_methods.$indexSet(inData, ri, bytes.toUint8List$0());
        if (ri < 0 || ri >= 2)
          return H.ioore(inData, ri);
        row = inData[ri];
        ri = 1 - ri;
        _this._unfilter$4(t7, bpp, row, inData[ri]);
        _this._png_decoder$_bitBufferLen = _this._png_decoder$_bitBuffer = 0;
        t6 = row.length;
        rowInput = new Z.InputBuffer(row, 0, t6, 0, true);
        for (t6 = blockWidth <= 1, dstX = xOffset, srcX = 0; srcX < passWidth; ++srcX, dstX += xStep) {
          _this._readPixel$2(rowInput, pixel);
          c = _this._getColor$1(pixel);
          if (typeof t2 !== "number")
            return H.iae(t2);
          t7 = dstY * t2 + dstX;
          if (t7 < 0 || t7 >= t3)
            return H.ioore(t1, t7);
          t1[t7] = c;
          if (!t6 || t4)
            for (i = 0; i < xStep; ++i)
              for (j = 0; j < blockWidth; ++j) {
                t7 = dstX + j;
                t8 = dstY + j;
                if (t7 < t2) {
                  if (typeof t5 !== "number")
                    return H.iae(t5);
                  t9 = t8 < t5;
                } else
                  t9 = false;
                if (t9) {
                  t7 = t8 * t2 + t7;
                  if (t7 < 0 || t7 >= t3)
                    return H.ioore(t1, t7);
                  t1[t7] = c;
                }
              }
        }
        ++srcY;
        dstY += yStep;
        t6 = _this._progressY;
        if (typeof t6 !== "number")
          return t6.$add();
        _this._progressY = t6 + 1;
      }
    },
    _process$2: function(input, image) {
      var channels, pixelDepth, w, h, rowBytes, bpp, line, inData, pixel, y, pi, ri, t3, t4, bytes, t5, ri0, rowInput, x, pi0, _this = this,
        t1 = _this._png_decoder$_info,
        t2 = t1.colorType;
      if (t2 === 4)
        channels = 2;
      else if (t2 === 2)
        channels = 3;
      else {
        t2 = t2 === 6 ? 4 : 1;
        channels = t2;
      }
      t2 = t1.bits;
      if (typeof t2 !== "number")
        return H.iae(t2);
      pixelDepth = channels * t2;
      w = t1.width;
      h = t1.height;
      if (typeof w !== "number")
        return w.$mul();
      rowBytes = C.JSInt_methods._shrOtherPositive$1(w * pixelDepth + 7, 3);
      bpp = C.JSInt_methods._shrOtherPositive$1(pixelDepth + 7, 3);
      line = P.List_List$filled(rowBytes, 0, false, type$.legacy_int);
      inData = H.setRuntimeTypeInfo([line, line], type$.JSArray_legacy_List_legacy_int);
      pixel = H.setRuntimeTypeInfo([0, 0, 0, 0], type$.JSArray_legacy_int);
      if (typeof h !== "number")
        return H.iae(h);
      t1 = image.data;
      t2 = t1.length;
      y = 0;
      pi = 0;
      ri = 0;
      for (; y < h; ++y, ri = ri0) {
        t3 = input.buffer;
        t4 = input.offset;
        if (typeof t4 !== "number")
          return t4.$add();
        input.offset = t4 + 1;
        t4 = J.$index$asx(t3, t4);
        bytes = input.subset$1(rowBytes);
        t3 = input.offset;
        t5 = bytes.offset;
        if (typeof t5 !== "number")
          return H.iae(t5);
        if (typeof t3 !== "number")
          return t3.$add();
        input.offset = t3 + (bytes.end - t5);
        C.JSArray_methods.$indexSet(inData, ri, bytes.toUint8List$0());
        if (ri < 0 || ri >= 2)
          return H.ioore(inData, ri);
        ri0 = 1 - ri;
        _this._unfilter$4(t4, bpp, inData[ri], inData[ri0]);
        _this._png_decoder$_bitBufferLen = _this._png_decoder$_bitBuffer = 0;
        t4 = inData[ri];
        t3 = t4.length;
        rowInput = new Z.InputBuffer(t4, 0, t3, 0, true);
        for (x = 0; x < w; ++x, pi = pi0) {
          _this._readPixel$2(rowInput, pixel);
          pi0 = pi + 1;
          t3 = _this._getColor$1(pixel);
          if (pi < 0 || pi >= t2)
            return H.ioore(t1, pi);
          t1[pi] = t3;
        }
      }
    },
    _unfilter$4: function(filterType, bpp, row, prevRow) {
      var rowBytes, x, t2, t3, t4, a, b, c, p, pa, pb, pc, paeth,
        t1 = type$.legacy_List_legacy_int;
      t1._as(row);
      t1._as(prevRow);
      rowBytes = row.length;
      switch (filterType) {
        case 0:
          break;
        case 1:
          for (t1 = J.getInterceptor$ax(row), x = bpp; x < rowBytes; ++x) {
            t2 = row.length;
            if (x >= t2)
              return H.ioore(row, x);
            t3 = row[x];
            t4 = x - bpp;
            if (t4 < 0 || t4 >= t2)
              return H.ioore(row, t4);
            t4 = row[t4];
            if (typeof t3 !== "number")
              return t3.$add();
            if (typeof t4 !== "number")
              return H.iae(t4);
            t1.$indexSet(row, x, t3 + t4 & 255);
          }
          break;
        case 2:
          for (t1 = J.getInterceptor$ax(row), x = 0; x < rowBytes; ++x) {
            if (x >= row.length)
              return H.ioore(row, x);
            t2 = row[x];
            if (x >= prevRow.length)
              return H.ioore(prevRow, x);
            t3 = prevRow[x];
            if (typeof t2 !== "number")
              return t2.$add();
            if (typeof t3 !== "number")
              return H.iae(t3);
            t1.$indexSet(row, x, t2 + t3 & 255);
          }
          break;
        case 3:
          for (t1 = J.getInterceptor$ax(row), x = 0; x < rowBytes; ++x) {
            if (x < bpp)
              a = 0;
            else {
              t2 = x - bpp;
              if (t2 < 0 || t2 >= row.length)
                return H.ioore(row, t2);
              a = row[t2];
            }
            if (x >= prevRow.length)
              return H.ioore(prevRow, x);
            b = prevRow[x];
            if (x >= row.length)
              return H.ioore(row, x);
            t2 = row[x];
            if (typeof a !== "number")
              return a.$add();
            if (typeof b !== "number")
              return H.iae(b);
            t3 = C.JSInt_methods._shrOtherPositive$1(a + b, 1);
            if (typeof t2 !== "number")
              return t2.$add();
            t1.$indexSet(row, x, t2 + t3 & 255);
          }
          break;
        case 4:
          for (t1 = J.getInterceptor$ax(row), x = 0; x < rowBytes; ++x) {
            t2 = x < bpp;
            if (t2)
              a = 0;
            else {
              t3 = x - bpp;
              if (t3 < 0 || t3 >= row.length)
                return H.ioore(row, t3);
              a = row[t3];
            }
            t3 = prevRow.length;
            if (x >= t3)
              return H.ioore(prevRow, x);
            b = prevRow[x];
            if (t2)
              c = 0;
            else {
              t2 = x - bpp;
              if (t2 < 0 || t2 >= t3)
                return H.ioore(prevRow, t2);
              c = prevRow[t2];
            }
            if (typeof a !== "number")
              return a.$add();
            if (typeof b !== "number")
              return H.iae(b);
            if (typeof c !== "number")
              return H.iae(c);
            p = a + b - c;
            pa = Math.abs(p - a);
            pb = Math.abs(p - b);
            pc = Math.abs(p - c);
            if (pa <= pb && pa <= pc)
              paeth = a;
            else if (pb <= pc)
              paeth = b;
            else
              paeth = c;
            if (x >= row.length)
              return H.ioore(row, x);
            t2 = row[x];
            if (typeof t2 !== "number")
              return t2.$add();
            t1.$indexSet(row, x, t2 + paeth & 255);
          }
          break;
        default:
          throw H.wrapException(K.ImageException$("Invalid filter value: " + H.S(filterType)));
      }
    },
    _png_decoder$_readBits$2: function(input, numBits) {
      var t1, t2, t3, mask, _this = this;
      if (numBits === 0)
        return 0;
      if (numBits === 8)
        return input.readByte$0();
      if (numBits === 16)
        return input.readUint16$0();
      if (typeof numBits !== "number")
        return H.iae(numBits);
      t1 = input.end;
      for (; t2 = _this._png_decoder$_bitBufferLen, t2 < numBits;) {
        t2 = input.offset;
        if (typeof t2 !== "number")
          return t2.$ge();
        if (t2 >= t1)
          throw H.wrapException(K.ImageException$("Invalid PNG data."));
        t3 = input.buffer;
        input.offset = t2 + 1;
        t2 = J.$index$asx(t3, t2);
        t3 = _this._png_decoder$_bitBufferLen;
        if (typeof t2 !== "number")
          return t2.$shl();
        _this._png_decoder$_bitBuffer = C.JSInt_methods.$shl(t2, t3);
        _this._png_decoder$_bitBufferLen = t3 + 8;
      }
      if (numBits === 1)
        mask = 1;
      else if (numBits === 2)
        mask = 3;
      else {
        if (numBits === 4)
          t1 = 15;
        else
          t1 = 0;
        mask = t1;
      }
      t1 = t2 - numBits;
      t2 = C.JSInt_methods._shrReceiverPositive$1(_this._png_decoder$_bitBuffer, t1);
      _this._png_decoder$_bitBufferLen = t1;
      return t2 & mask;
    },
    _readPixel$2: function(input, pixel) {
      var t1, t2, _this = this;
      type$.legacy_List_legacy_int._as(pixel);
      t1 = _this._png_decoder$_info;
      t2 = t1.colorType;
      switch (t2) {
        case 0:
          C.JSArray_methods.$indexSet(pixel, 0, _this._png_decoder$_readBits$2(input, t1.bits));
          return;
        case 2:
          C.JSArray_methods.$indexSet(pixel, 0, _this._png_decoder$_readBits$2(input, t1.bits));
          C.JSArray_methods.$indexSet(pixel, 1, _this._png_decoder$_readBits$2(input, _this._png_decoder$_info.bits));
          C.JSArray_methods.$indexSet(pixel, 2, _this._png_decoder$_readBits$2(input, _this._png_decoder$_info.bits));
          return;
        case 3:
          C.JSArray_methods.$indexSet(pixel, 0, _this._png_decoder$_readBits$2(input, t1.bits));
          return;
        case 4:
          C.JSArray_methods.$indexSet(pixel, 0, _this._png_decoder$_readBits$2(input, t1.bits));
          C.JSArray_methods.$indexSet(pixel, 1, _this._png_decoder$_readBits$2(input, _this._png_decoder$_info.bits));
          return;
        case 6:
          C.JSArray_methods.$indexSet(pixel, 0, _this._png_decoder$_readBits$2(input, t1.bits));
          C.JSArray_methods.$indexSet(pixel, 1, _this._png_decoder$_readBits$2(input, _this._png_decoder$_info.bits));
          C.JSArray_methods.$indexSet(pixel, 2, _this._png_decoder$_readBits$2(input, _this._png_decoder$_info.bits));
          C.JSArray_methods.$indexSet(pixel, 3, _this._png_decoder$_readBits$2(input, _this._png_decoder$_info.bits));
          return;
      }
      throw H.wrapException(K.ImageException$("Invalid color type: " + H.S(t2) + "."));
    },
    _getColor$1: function(raw) {
      var t1, t2, g, t3, r, b, t4, t5, t6, t7, p, a, _this = this, _null = null;
      type$.legacy_List_legacy_int._as(raw);
      t1 = _this._png_decoder$_info;
      t2 = t1.colorType;
      switch (t2) {
        case 0:
          switch (t1.bits) {
            case 1:
              g = raw[0] === 0 ? 0 : 255;
              break;
            case 2:
              t2 = raw[0];
              if (typeof t2 !== "number")
                return t2.$mul();
              g = t2 * 85;
              break;
            case 4:
              t2 = raw[0];
              if (typeof t2 !== "number")
                return t2.$shl();
              g = t2 << 4 >>> 0;
              break;
            case 8:
              g = raw[0];
              break;
            case 16:
              t2 = raw[0];
              if (typeof t2 !== "number")
                return t2.$shr();
              g = C.JSInt_methods._shrOtherPositive$1(t2, 8);
              break;
            default:
              g = _null;
          }
          t1 = t1.colorLut;
          g = (t1 && C.JSArray_methods).$index(t1, g);
          t1 = _this._png_decoder$_info.transparency;
          if (t1 != null) {
            t2 = t1.length;
            if (0 >= t2)
              return H.ioore(t1, 0);
            t3 = t1[0];
            if (1 >= t2)
              return H.ioore(t1, 1);
            t1 = t1[1];
            if (raw[0] === ((t3 & 255) << 24 | t1 & 255) >>> 0)
              return K.getColor(g, g, g, 0);
          }
          return K.getColor(g, g, g, 255);
        case 2:
          switch (t1.bits) {
            case 1:
              r = raw[0] === 0 ? 0 : 255;
              g = raw[1] === 0 ? 0 : 255;
              b = raw[2] === 0 ? 0 : 255;
              break;
            case 2:
              t2 = raw[0];
              if (typeof t2 !== "number")
                return t2.$mul();
              r = t2 * 85;
              t2 = raw[1];
              if (typeof t2 !== "number")
                return t2.$mul();
              g = t2 * 85;
              t2 = raw[2];
              if (typeof t2 !== "number")
                return t2.$mul();
              b = t2 * 85;
              break;
            case 4:
              t2 = raw[0];
              if (typeof t2 !== "number")
                return t2.$shl();
              r = t2 << 4 >>> 0;
              t2 = raw[1];
              if (typeof t2 !== "number")
                return t2.$shl();
              g = t2 << 4 >>> 0;
              t2 = raw[2];
              if (typeof t2 !== "number")
                return t2.$shl();
              b = t2 << 4 >>> 0;
              break;
            case 8:
              r = raw[0];
              g = raw[1];
              b = raw[2];
              break;
            case 16:
              t2 = raw[0];
              if (typeof t2 !== "number")
                return t2.$shr();
              r = C.JSInt_methods._shrOtherPositive$1(t2, 8);
              t2 = raw[1];
              if (typeof t2 !== "number")
                return t2.$shr();
              g = C.JSInt_methods._shrOtherPositive$1(t2, 8);
              t2 = raw[2];
              if (typeof t2 !== "number")
                return t2.$shr();
              b = C.JSInt_methods._shrOtherPositive$1(t2, 8);
              break;
            default:
              b = _null;
              g = b;
              r = g;
          }
          t1 = t1.colorLut;
          r = (t1 && C.JSArray_methods).$index(t1, r);
          t1 = _this._png_decoder$_info.colorLut;
          g = (t1 && C.JSArray_methods).$index(t1, g);
          t1 = _this._png_decoder$_info.colorLut;
          b = (t1 && C.JSArray_methods).$index(t1, b);
          t1 = _this._png_decoder$_info.transparency;
          if (t1 != null) {
            t2 = t1.length;
            if (0 >= t2)
              return H.ioore(t1, 0);
            t3 = t1[0];
            if (1 >= t2)
              return H.ioore(t1, 1);
            t4 = t1[1];
            if (2 >= t2)
              return H.ioore(t1, 2);
            t5 = t1[2];
            if (3 >= t2)
              return H.ioore(t1, 3);
            t6 = t1[3];
            if (4 >= t2)
              return H.ioore(t1, 4);
            t7 = t1[4];
            if (5 >= t2)
              return H.ioore(t1, 5);
            t1 = t1[5];
            if (raw[0] === ((t3 & 255) << 8 | t4 & 255) && raw[1] === ((t5 & 255) << 8 | t6 & 255) && raw[2] === ((t7 & 255) << 8 | t1 & 255))
              return K.getColor(r, g, b, 0);
          }
          return K.getColor(r, g, b, 255);
        case 3:
          t2 = raw[0];
          if (typeof t2 !== "number")
            return t2.$mul();
          p = t2 * 3;
          t1 = t1.transparency;
          if (t1 != null && t2 < t1.length) {
            if (t2 < 0 || t2 >= t1.length)
              return H.ioore(t1, t2);
            a = t1[t2];
          } else
            a = 255;
          t1 = _this._png_decoder$_info.palette;
          t2 = t1.length;
          if (p >= t2)
            return K.getColor(255, 255, 255, a);
          if (p < 0)
            return H.ioore(t1, p);
          r = t1[p];
          t3 = p + 1;
          if (t3 >= t2)
            return H.ioore(t1, t3);
          g = t1[t3];
          t3 = p + 2;
          if (t3 >= t2)
            return H.ioore(t1, t3);
          return K.getColor(r, g, t1[t3], a);
        case 4:
          switch (t1.bits) {
            case 1:
              g = raw[0] === 0 ? 0 : 255;
              a = raw[1] === 0 ? 0 : 255;
              break;
            case 2:
              t2 = raw[0];
              if (typeof t2 !== "number")
                return t2.$mul();
              g = t2 * 85;
              t2 = raw[1];
              if (typeof t2 !== "number")
                return t2.$mul();
              a = t2 * 85;
              break;
            case 4:
              t2 = raw[0];
              if (typeof t2 !== "number")
                return t2.$shl();
              g = t2 << 4 >>> 0;
              t2 = raw[1];
              if (typeof t2 !== "number")
                return t2.$shl();
              a = t2 << 4 >>> 0;
              break;
            case 8:
              g = raw[0];
              a = raw[1];
              break;
            case 16:
              t2 = raw[0];
              if (typeof t2 !== "number")
                return t2.$shr();
              g = C.JSInt_methods._shrOtherPositive$1(t2, 8);
              t2 = raw[1];
              if (typeof t2 !== "number")
                return t2.$shr();
              a = C.JSInt_methods._shrOtherPositive$1(t2, 8);
              break;
            default:
              a = _null;
              g = a;
          }
          t1 = t1.colorLut;
          g = (t1 && C.JSArray_methods).$index(t1, g);
          return K.getColor(g, g, g, a);
        case 6:
          switch (t1.bits) {
            case 1:
              r = raw[0] === 0 ? 0 : 255;
              g = raw[1] === 0 ? 0 : 255;
              b = raw[2] === 0 ? 0 : 255;
              a = raw[3] === 0 ? 0 : 255;
              break;
            case 2:
              t2 = raw[0];
              if (typeof t2 !== "number")
                return t2.$mul();
              r = t2 * 85;
              t2 = raw[1];
              if (typeof t2 !== "number")
                return t2.$mul();
              g = t2 * 85;
              t2 = raw[2];
              if (typeof t2 !== "number")
                return t2.$mul();
              b = t2 * 85;
              t2 = raw[3];
              if (typeof t2 !== "number")
                return t2.$mul();
              a = t2 * 85;
              break;
            case 4:
              t2 = raw[0];
              if (typeof t2 !== "number")
                return t2.$shl();
              r = t2 << 4 >>> 0;
              t2 = raw[1];
              if (typeof t2 !== "number")
                return t2.$shl();
              g = t2 << 4 >>> 0;
              t2 = raw[2];
              if (typeof t2 !== "number")
                return t2.$shl();
              b = t2 << 4 >>> 0;
              t2 = raw[3];
              if (typeof t2 !== "number")
                return t2.$shl();
              a = t2 << 4 >>> 0;
              break;
            case 8:
              r = raw[0];
              g = raw[1];
              b = raw[2];
              a = raw[3];
              break;
            case 16:
              t2 = raw[0];
              if (typeof t2 !== "number")
                return t2.$shr();
              r = C.JSInt_methods._shrOtherPositive$1(t2, 8);
              t2 = raw[1];
              if (typeof t2 !== "number")
                return t2.$shr();
              g = C.JSInt_methods._shrOtherPositive$1(t2, 8);
              t2 = raw[2];
              if (typeof t2 !== "number")
                return t2.$shr();
              b = C.JSInt_methods._shrOtherPositive$1(t2, 8);
              t2 = raw[3];
              if (typeof t2 !== "number")
                return t2.$shr();
              a = C.JSInt_methods._shrOtherPositive$1(t2, 8);
              break;
            default:
              a = _null;
              b = a;
              g = b;
              r = g;
          }
          t1 = t1.colorLut;
          r = (t1 && C.JSArray_methods).$index(t1, r);
          t1 = _this._png_decoder$_info.colorLut;
          g = (t1 && C.JSArray_methods).$index(t1, g);
          t1 = _this._png_decoder$_info.colorLut;
          return K.getColor(r, g, (t1 && C.JSArray_methods).$index(t1, b), a);
      }
      throw H.wrapException(K.ImageException$("Invalid color type: " + H.S(t2) + "."));
    }
  };
  U.PsdBevelEffect.prototype = {
    set$highlightColor: function(highlightColor) {
      type$.legacy_List_legacy_int._as(highlightColor);
    },
    set$shadowColor: function(shadowColor) {
      type$.legacy_List_legacy_int._as(shadowColor);
    },
    set$realHighlightColor: function(realHighlightColor) {
      type$.legacy_List_legacy_int._as(realHighlightColor);
    },
    set$realShadowColor: function(realShadowColor) {
      type$.legacy_List_legacy_int._as(realShadowColor);
    }
  };
  M.PsdDropShadowEffect.prototype = {
    set$color: function(color) {
      type$.legacy_List_legacy_int._as(color);
    },
    set$nativeColor: function(nativeColor) {
      type$.legacy_List_legacy_int._as(nativeColor);
    }
  };
  V.PsdEffect.prototype = {};
  D.PsdInnerGlowEffect.prototype = {
    set$color: function(color) {
      type$.legacy_List_legacy_int._as(color);
    },
    set$nativeColor: function(nativeColor) {
      type$.legacy_List_legacy_int._as(nativeColor);
    }
  };
  L.PsdInnerShadowEffect.prototype = {
    set$color: function(color) {
      type$.legacy_List_legacy_int._as(color);
    },
    set$nativeColor: function(nativeColor) {
      type$.legacy_List_legacy_int._as(nativeColor);
    }
  };
  N.PsdOuterGlowEffect.prototype = {
    set$color: function(color) {
      type$.legacy_List_legacy_int._as(color);
    },
    set$nativeColor: function(nativeColor) {
      type$.legacy_List_legacy_int._as(nativeColor);
    }
  };
  F.PsdSolidFillEffect.prototype = {
    set$color: function(color) {
      type$.legacy_List_legacy_int._as(color);
    },
    set$nativeColor: function(nativeColor) {
      type$.legacy_List_legacy_int._as(nativeColor);
    }
  };
  K.PsdLayerAdditionalData.prototype = {};
  Y.PsdLayerSectionDivider.prototype = {};
  O.PsdBlendingRanges.prototype = {
    PsdBlendingRanges$1: function(input) {
      var t1, numChannels, i, t2, _this = this;
      input.readUint16$0();
      input.readUint16$0();
      input.readUint16$0();
      input.readUint16$0();
      t1 = input.offset;
      if (typeof t1 !== "number")
        return H.iae(t1);
      numChannels = C.JSInt_methods._tdivFast$1(input.end - t1, 8);
      if (numChannels > 0) {
        _this.blackSrc = new Uint16Array(numChannels);
        _this.whiteSrc = new Uint16Array(numChannels);
        _this.blackDst = new Uint16Array(numChannels);
        _this.whiteDst = new Uint16Array(numChannels);
        for (i = 0; i < numChannels; ++i) {
          t1 = _this.blackSrc;
          t2 = input.readUint16$0();
          if (i >= t1.length)
            return H.ioore(t1, i);
          t1[i] = t2;
          t2 = _this.whiteSrc;
          t1 = input.readUint16$0();
          if (i >= t2.length)
            return H.ioore(t2, i);
          t2[i] = t1;
          t1 = _this.blackDst;
          t2 = input.readUint16$0();
          if (i >= t1.length)
            return H.ioore(t1, i);
          t1[i] = t2;
          t2 = _this.whiteDst;
          t1 = input.readUint16$0();
          if (i >= t2.length)
            return H.ioore(t2, i);
          t2[i] = t1;
        }
      }
    }
  };
  N.PsdChannel.prototype = {
    readPlane$7: function(input, width, height, bitDepth, compression, lineLengths, planeNum) {
      if (compression == null)
        compression = input.readUint16$0();
      switch (compression) {
        case 0:
          this._readPlaneUncompressed$4(input, width, height, bitDepth);
          break;
        case 1:
          this._readPlaneRleCompressed$6(input, width, height, bitDepth, lineLengths == null ? this._readLineLengths$2(input, height) : lineLengths, planeNum);
          break;
        default:
          throw H.wrapException(K.ImageException$("Unsupported compression: " + compression));
      }
    },
    readPlane$4: function(input, width, height, bitDepth) {
      return this.readPlane$7(input, width, height, bitDepth, null, null, 0);
    },
    _readLineLengths$2: function(input, height) {
      var lineLengths, t1, i, t2;
      if (!H._isInt(height))
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S(height)));
      lineLengths = new Uint16Array(height);
      if (typeof height !== "number")
        return H.iae(height);
      t1 = lineLengths.length;
      i = 0;
      for (; i < height; ++i) {
        t2 = input.readUint16$0();
        if (i >= t1)
          return H.ioore(lineLengths, i);
        lineLengths[i] = t2;
      }
      return lineLengths;
    },
    _readPlaneUncompressed$4: function(input, width, height, bitDepth) {
      var len, t1, t2;
      if (typeof width !== "number")
        return width.$mul();
      if (typeof height !== "number")
        return H.iae(height);
      len = width * height;
      if (bitDepth === 16)
        len *= 2;
      t1 = input.end;
      t2 = input.offset;
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (len > t1 - t2) {
        t1 = new Uint8Array(len);
        this.data = t1;
        C.NativeUint8List_methods.fillRange$3(t1, 0, len, 255);
        return;
      }
      this.data = input.readBytes$1(len).toUint8List$0();
    },
    _readPlaneRleCompressed$6: function(input, width, height, bitDepth, lineLengths, planeNum) {
      var len, t1, lineIndex, t2, pos, i, lineIndex0, bytes, t3;
      if (typeof width !== "number")
        return width.$mul();
      if (typeof height !== "number")
        return H.iae(height);
      len = width * height;
      if (bitDepth === 16)
        len *= 2;
      t1 = this.data = new Uint8Array(len);
      lineIndex = planeNum * height;
      t2 = lineLengths.length;
      if (lineIndex >= t2) {
        C.NativeUint8List_methods.fillRange$3(t1, 0, t1.length, 255);
        return;
      }
      for (pos = 0, i = 0; i < height; ++i, lineIndex = lineIndex0) {
        lineIndex0 = lineIndex + 1;
        if (lineIndex < 0 || lineIndex >= t2)
          return H.ioore(lineLengths, lineIndex);
        bytes = input.subset$1(lineLengths[lineIndex]);
        t1 = input.offset;
        t3 = bytes.offset;
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (typeof t1 !== "number")
          return t1.$add();
        input.offset = t1 + (bytes.end - t3);
        this._decodeRLE$3(bytes, this.data, pos);
        pos += width;
      }
    },
    _decodeRLE$3: function(src, dst, dstIndex) {
      var t3, t4, n, i, dstIndex0,
        t1 = src.end,
        t2 = dst && C.NativeUint8List_methods;
      while (true) {
        t3 = src.offset;
        if (typeof t3 !== "number")
          return t3.$ge();
        if (!(t3 < t1))
          break;
        t4 = src.buffer;
        src.offset = t3 + 1;
        t3 = J.$index$asx(t4, t3);
        t4 = $.$get$__uint8();
        (t4 && C.NativeUint8List_methods).$indexSet(t4, 0, t3);
        t3 = $.$get$__uint8ToInt8();
        if (0 >= t3.length)
          return H.ioore(t3, 0);
        n = t3[0];
        if (n < 0) {
          n = 1 - n;
          t3 = src.buffer;
          t4 = src.offset;
          if (typeof t4 !== "number")
            return t4.$add();
          src.offset = t4 + 1;
          t4 = J.$index$asx(t3, t4);
          for (i = 0; i < n; ++i, dstIndex = dstIndex0) {
            dstIndex0 = dstIndex + 1;
            t2.$indexSet(dst, dstIndex, t4);
          }
        } else {
          ++n;
          for (i = 0; i < n; ++i, dstIndex = dstIndex0) {
            dstIndex0 = dstIndex + 1;
            t3 = src.buffer;
            t4 = src.offset;
            if (typeof t4 !== "number")
              return t4.$add();
            src.offset = t4 + 1;
            t2.$indexSet(dst, dstIndex, J.$index$asx(t3, t4));
          }
        }
      }
    }
  };
  L.PsdImage.prototype = {
    PsdImage$1: function(bytes) {
      var len, t1, t2, t3, _this = this;
      _this._psd_image$_input = Z.InputBuffer$(bytes, true, null, 0);
      _this._psd_image$_readHeader$0();
      if (_this.signature !== 943870035)
        return;
      len = _this._psd_image$_input.readUint32$0();
      _this._psd_image$_input.readBytes$1(len);
      len = _this._psd_image$_input.readUint32$0();
      _this._imageResourceData = _this._psd_image$_input.readBytes$1(len);
      len = _this._psd_image$_input.readUint32$0();
      _this._layerAndMaskData = _this._psd_image$_input.readBytes$1(len);
      t1 = _this._psd_image$_input;
      t2 = t1.end;
      t3 = t1.offset;
      if (typeof t3 !== "number")
        return H.iae(t3);
      _this._imageData = t1.readBytes$1(t2 - t3);
    },
    decode$0: function() {
      var _this = this;
      if (_this.signature !== 943870035 || _this._psd_image$_input == null)
        return false;
      _this._readImageResources$0();
      _this._readLayerAndMaskData$0();
      _this._readMergeImageData$0();
      _this._imageData = _this._layerAndMaskData = _this._imageResourceData = _this._psd_image$_input = null;
      return true;
    },
    decodeImage$0: function() {
      if (!this.decode$0())
        return null;
      return this.renderImage$0();
    },
    renderImage$0: function() {
      var pixels, li, t2, layer, opacity, blendMode, srcP, sy, y, si, t3, t4, t5, di, sx, x, si0, br, bg, bb, ba, ar, ag, ab, aa, da, a, b, g, r, di0, di1, _this = this,
        t1 = _this.mergedImage;
      if (t1 != null)
        return t1;
      t1 = U.Image$(_this.width, _this.height, C.Channels_1, null, null);
      _this.mergedImage = t1;
      t1 = t1.data;
      C.NativeUint32List_methods.fillRange$3(t1, 0, t1.length, 0);
      pixels = _this.mergedImage.getBytes$0();
      for (t1 = pixels.length, li = 0; t2 = _this.layers, li < t2.length; ++li) {
        layer = t2[li];
        t2 = layer.flags;
        if (typeof t2 !== "number")
          return t2.$and();
        if ((t2 & 2) !== 0)
          continue;
        t2 = layer.opacity;
        if (typeof t2 !== "number")
          return t2.$div();
        opacity = t2 / 255;
        blendMode = layer.blendMode;
        srcP = layer.layerImage.getBytes$0();
        sy = layer.top;
        t2 = srcP.length;
        y = 0;
        si = 0;
        while (true) {
          t3 = layer.height;
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (!(y < t3))
            break;
          t3 = layer.top;
          if (typeof t3 !== "number")
            return t3.$add();
          t4 = _this.width;
          if (typeof t4 !== "number")
            return H.iae(t4);
          t5 = layer.left;
          if (typeof t5 !== "number")
            return t5.$mul();
          di = (t3 + y) * t4 * 4 + t5 * 4;
          sx = t5;
          x = 0;
          while (true) {
            t3 = layer.width;
            if (typeof t3 !== "number")
              return H.iae(t3);
            if (!(x < t3))
              break;
            si0 = si + 1;
            if (si < 0 || si >= t2)
              return H.ioore(srcP, si);
            br = srcP[si];
            si = si0 + 1;
            if (si0 < 0 || si0 >= t2)
              return H.ioore(srcP, si0);
            bg = srcP[si0];
            si0 = si + 1;
            if (si < 0 || si >= t2)
              return H.ioore(srcP, si);
            bb = srcP[si];
            si = si0 + 1;
            if (si0 < 0 || si0 >= t2)
              return H.ioore(srcP, si0);
            ba = srcP[si0];
            if (sx >= 0) {
              t3 = _this.width;
              if (typeof t3 !== "number")
                return H.iae(t3);
              if (sx < t3) {
                if (typeof sy !== "number")
                  return sy.$ge();
                if (sy >= 0) {
                  t3 = _this.height;
                  if (typeof t3 !== "number")
                    return H.iae(t3);
                  t3 = sy < t3;
                } else
                  t3 = false;
              } else
                t3 = false;
            } else
              t3 = false;
            if (t3) {
              if (di < 0 || di >= t1)
                return H.ioore(pixels, di);
              ar = pixels[di];
              t3 = di + 1;
              if (t3 >= t1)
                return H.ioore(pixels, t3);
              ag = pixels[t3];
              t4 = di + 2;
              if (t4 >= t1)
                return H.ioore(pixels, t4);
              ab = pixels[t4];
              t4 = di + 3;
              if (t4 >= t1)
                return H.ioore(pixels, t4);
              aa = pixels[t4];
              da = ba / 255 * opacity;
              switch (blendMode) {
                case 1885434739:
                  a = aa;
                  b = ab;
                  g = ag;
                  r = ar;
                  break;
                case 1852797549:
                  a = ba;
                  b = bb;
                  g = bg;
                  r = br;
                  break;
                case 1684632435:
                  a = ba;
                  b = bb;
                  g = bg;
                  r = br;
                  break;
                case 1684107883:
                  r = Math.min(ar, br);
                  g = Math.min(ag, bg);
                  b = Math.min(ab, bb);
                  a = ba;
                  break;
                case 1836411936:
                  r = ar * br >>> 8;
                  g = ag * bg >>> 8;
                  b = ab * bb >>> 8;
                  a = ba;
                  break;
                case 1768188278:
                  r = L.PsdImage__blendColorBurn(ar, br);
                  g = L.PsdImage__blendColorBurn(ag, bg);
                  b = L.PsdImage__blendColorBurn(ab, bb);
                  a = ba;
                  break;
                case 1818391150:
                  r = C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(ar + br - 255, 0, 255));
                  g = C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(ag + bg - 255, 0, 255));
                  b = C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(ab + bb - 255, 0, 255));
                  a = ba;
                  break;
                case 1684751212:
                  a = ba;
                  b = bb;
                  g = bg;
                  r = br;
                  break;
                case 1818850405:
                  r = Math.max(ar, br);
                  g = Math.max(ag, bg);
                  b = Math.max(ab, bb);
                  a = ba;
                  break;
                case 1935897198:
                  r = C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(255 - (255 - br) * (255 - ar), 0, 255));
                  g = C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(255 - (255 - bg) * (255 - ag), 0, 255));
                  b = C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(255 - (255 - bb) * (255 - ab), 0, 255));
                  a = ba;
                  break;
                case 1684633120:
                  r = L.PsdImage__blendColorDodge(ar, br);
                  g = L.PsdImage__blendColorDodge(ag, bg);
                  b = L.PsdImage__blendColorDodge(ab, bb);
                  a = ba;
                  break;
                case 1818518631:
                  r = br + ar > 255 ? 255 : ar + br;
                  g = bg + ag > 255 ? 255 : ag + bg;
                  b = bb + ab > 255 ? 255 : ab + bb;
                  a = ba;
                  break;
                case 1818706796:
                  a = ba;
                  b = bb;
                  g = bg;
                  r = br;
                  break;
                case 1870030194:
                  r = L.PsdImage__blendOverlay(ar, br, aa, ba);
                  g = L.PsdImage__blendOverlay(ag, bg, aa, ba);
                  b = L.PsdImage__blendOverlay(ab, bb, aa, ba);
                  a = ba;
                  break;
                case 1934387572:
                  r = L.PsdImage__blendSoftLight(ar, br);
                  g = L.PsdImage__blendSoftLight(ag, bg);
                  b = L.PsdImage__blendSoftLight(ab, bb);
                  a = ba;
                  break;
                case 1749838196:
                  r = L.PsdImage__blendHardLight(ar, br);
                  g = L.PsdImage__blendHardLight(ag, bg);
                  b = L.PsdImage__blendHardLight(ab, bb);
                  a = ba;
                  break;
                case 1984719220:
                  r = L.PsdImage__blendVividLight(ar, br);
                  g = L.PsdImage__blendVividLight(ag, bg);
                  b = L.PsdImage__blendVividLight(ab, bb);
                  a = ba;
                  break;
                case 1816947060:
                  r = L.PsdImage__blendLinearLight(ar, br);
                  g = L.PsdImage__blendLinearLight(ag, bg);
                  b = L.PsdImage__blendLinearLight(ab, bb);
                  a = ba;
                  break;
                case 1884055924:
                  r = br < 128 ? Math.min(ar, 2 * br) : Math.max(ar, 2 * (br - 128));
                  g = bg < 128 ? Math.min(ag, 2 * bg) : Math.max(ag, 2 * (bg - 128));
                  b = bb < 128 ? Math.min(ab, 2 * bb) : Math.max(ab, 2 * (bb - 128));
                  a = ba;
                  break;
                case 1749903736:
                  r = br < 255 - ar ? 0 : 255;
                  g = bg < 255 - ag ? 0 : 255;
                  b = bb < 255 - ab ? 0 : 255;
                  a = ba;
                  break;
                case 1684629094:
                  r = Math.abs(br - ar);
                  g = Math.abs(bg - ag);
                  b = Math.abs(bb - ab);
                  a = ba;
                  break;
                case 1936553316:
                  r = C.JSNumber_methods.round$0(br + ar - 2 * br * ar / 255);
                  g = C.JSNumber_methods.round$0(bg + ag - 2 * bg * ag / 255);
                  b = C.JSNumber_methods.round$0(bb + ab - 2 * bb * ab / 255);
                  a = ba;
                  break;
                case 1718842722:
                  a = ba;
                  b = bb;
                  g = bg;
                  r = br;
                  break;
                case 1717856630:
                  a = ba;
                  b = bb;
                  g = bg;
                  r = br;
                  break;
                case 1752524064:
                  a = ba;
                  b = bb;
                  g = bg;
                  r = br;
                  break;
                case 1935766560:
                  a = ba;
                  b = bb;
                  g = bg;
                  r = br;
                  break;
                case 1668246642:
                  a = ba;
                  b = bb;
                  g = bg;
                  r = br;
                  break;
                case 1819634976:
                  a = ba;
                  b = bb;
                  g = bg;
                  r = br;
                  break;
                default:
                  a = ba;
                  b = bb;
                  g = bg;
                  r = br;
              }
              t4 = 1 - da;
              r = C.JSNumber_methods.toInt$0(ar * t4 + r * da);
              g = C.JSNumber_methods.toInt$0(ag * t4 + g * da);
              b = C.JSNumber_methods.toInt$0(ab * t4 + b * da);
              a = C.JSNumber_methods.toInt$0(aa * t4 + a * da);
              pixels[di] = r;
              di0 = t3 + 1;
              pixels[t3] = g;
              di1 = di0 + 1;
              if (di0 >= t1)
                return H.ioore(pixels, di0);
              pixels[di0] = b;
              if (di1 >= t1)
                return H.ioore(pixels, di1);
              pixels[di1] = a;
            }
            di += 4;
            ++x;
            ++sx;
          }
          ++y;
          if (typeof sy !== "number")
            return sy.$add();
          ++sy;
        }
      }
      return _this.mergedImage;
    },
    _psd_image$_readHeader$0: function() {
      var t1, padding, i, t2, _this = this;
      _this.signature = _this._psd_image$_input.readUint32$0();
      t1 = _this._psd_image$_input.readUint16$0();
      _this.version = t1;
      if (t1 !== 1) {
        _this.signature = 0;
        return;
      }
      padding = _this._psd_image$_input.readBytes$1(6);
      for (i = 0; i < 6; ++i) {
        t1 = padding.buffer;
        t2 = padding.offset;
        if (typeof t2 !== "number")
          return t2.$add();
        if (J.$index$asx(t1, t2 + i) !== 0) {
          _this.signature = 0;
          return;
        }
      }
      _this.channels = _this._psd_image$_input.readUint16$0();
      _this.height = _this._psd_image$_input.readUint32$0();
      _this.width = _this._psd_image$_input.readUint32$0();
      _this.depth = _this._psd_image$_input.readUint16$0();
      _this.colorMode = _this._psd_image$_input.readUint16$0();
    },
    _readImageResources$0: function() {
      var t2, t3, t4, blockSignature, blockId, len, bytes, _this = this,
        t1 = _this._imageResourceData;
      t1.offset = t1.start;
      t1 = _this.imageResources;
      while (true) {
        t2 = _this._imageResourceData;
        t3 = t2.offset;
        t4 = t2.end;
        if (typeof t3 !== "number")
          return t3.$ge();
        if (!(t3 < t4))
          break;
        blockSignature = t2.readUint32$0();
        blockId = _this._imageResourceData.readUint16$0();
        t2 = _this._imageResourceData;
        t3 = t2.buffer;
        t4 = t2.offset;
        if (typeof t4 !== "number")
          return t4.$add();
        t2.offset = t4 + 1;
        t4 = J.$index$asx(t3, t4);
        _this._imageResourceData.readString$1(t4);
        if (typeof t4 !== "number")
          return t4.$and();
        if ((t4 & 1) === 0) {
          t2 = _this._imageResourceData;
          t3 = t2.offset;
          if (typeof t3 !== "number")
            return t3.$add();
          t2.offset = t3 + 1;
        }
        len = _this._imageResourceData.readUint32$0();
        t2 = _this._imageResourceData;
        bytes = t2.subset$1(len);
        t3 = t2.offset;
        t4 = bytes.offset;
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (typeof t3 !== "number")
          return t3.$add();
        t2.offset = t3 + (bytes.end - t4);
        if ((len & 1) === 1) {
          t2 = _this._imageResourceData;
          t3 = t2.offset;
          if (typeof t3 !== "number")
            return t3.$add();
          t2.offset = t3 + 1;
        }
        if (blockSignature === 943868237)
          t1.$indexSet(0, blockId, new S.PsdImageResource());
      }
    },
    _readLayerAndMaskData$0: function() {
      var len, layerData, t2, count, t3, t4, i, layer, t5, maskData, _this = this,
        t1 = _this._layerAndMaskData;
      t1.offset = t1.start;
      len = t1.readUint32$0();
      if ((len & 1) !== 0)
        ++len;
      layerData = _this._layerAndMaskData.readBytes$1(len);
      t1 = type$.JSArray_legacy_PsdLayer;
      _this.set$layers(H.setRuntimeTypeInfo([], t1));
      if (len > 0) {
        t2 = layerData.readUint16$0();
        $.$get$__uint16()[0] = t2;
        t2 = $.$get$__uint16ToInt16();
        if (0 >= t2.length)
          return H.ioore(t2, 0);
        count = t2[0];
        if (count < 0)
          count = -count;
        for (t2 = type$.legacy_String, t3 = type$.legacy_PsdLayerData, t4 = type$.JSArray_legacy_PsdEffect, i = 0; i < count; ++i) {
          layer = new S.PsdLayer(P.LinkedHashMap_LinkedHashMap$_empty(t2, t3), H.setRuntimeTypeInfo([], t1), H.setRuntimeTypeInfo([], t4));
          layer.PsdLayer$1(layerData);
          t5 = _this.layers;
          (t5 && C.JSArray_methods).add$1(t5, layer);
        }
      }
      for (i = 0; t1 = _this.layers, i < t1.length; ++i)
        t1[i].readImageData$2(layerData, _this);
      len = _this._layerAndMaskData.readUint32$0();
      maskData = _this._layerAndMaskData.readBytes$1(len);
      if (len > 0) {
        maskData.readUint16$0();
        maskData.readUint16$0();
        maskData.readUint16$0();
        maskData.readUint16$0();
        maskData.readUint16$0();
        maskData.readUint16$0();
        maskData.readByte$0();
      }
    },
    _readMergeImageData$0: function() {
      var compression, t2, numLines, lineLengths, i, t3, _this = this,
        t1 = _this._imageData;
      t1.offset = t1.start;
      compression = t1.readUint16$0();
      if (compression === 1) {
        t1 = _this.height;
        t2 = _this.channels;
        if (typeof t1 !== "number")
          return t1.$mul();
        if (typeof t2 !== "number")
          return H.iae(t2);
        numLines = t1 * t2;
        lineLengths = new Uint16Array(numLines);
        for (t1 = lineLengths.length, i = 0; i < numLines; ++i) {
          t2 = _this._imageData.readUint16$0();
          if (i >= t1)
            return H.ioore(lineLengths, i);
          lineLengths[i] = t2;
        }
      } else
        lineLengths = null;
      _this.set$mergeImageChannels(H.setRuntimeTypeInfo([], type$.JSArray_legacy_PsdChannel));
      i = 0;
      while (true) {
        t1 = _this.channels;
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(i < t1))
          break;
        t1 = _this.mergeImageChannels;
        t2 = _this._imageData;
        t3 = i === 3 ? -1 : i;
        t3 = new N.PsdChannel(t3);
        t3.readPlane$7(t2, _this.width, _this.height, _this.depth, compression, lineLengths, i);
        (t1 && C.JSArray_methods).add$1(t1, t3);
        ++i;
      }
      _this.mergedImage = L.PsdImage_createImageFromChannels(_this.colorMode, _this.depth, _this.width, _this.height, _this.mergeImageChannels);
    },
    set$layers: function(layers) {
      this.layers = type$.legacy_List_legacy_PsdLayer._as(layers);
    },
    set$mergeImageChannels: function(mergeImageChannels) {
      this.mergeImageChannels = type$.legacy_List_legacy_PsdChannel._as(mergeImageChannels);
    }
  };
  S.PsdImageResource.prototype = {};
  S.PsdLayer.prototype = {
    PsdLayer$1: function(input) {
      var numChannels, i, id, sig, len, extra, maskData, padding, t3, t4, t5, t6, tag, bytes, t7, data, numFx, j, fxTag, size, fx, _this = this,
        t1 = input.readUint32$0(),
        t2 = $.$get$__uint32();
      t2[0] = t1;
      t1 = $.$get$__uint32ToInt32();
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      _this.top = t1[0];
      t2[0] = input.readUint32$0();
      _this.left = t1[0];
      t2[0] = input.readUint32$0();
      _this.bottom = t1[0];
      t2[0] = input.readUint32$0();
      t1 = t1[0];
      _this.right = t1;
      t2 = _this.left;
      if (typeof t2 !== "number")
        return H.iae(t2);
      _this.width = t1 - t2;
      t2 = _this.bottom;
      t1 = _this.top;
      if (typeof t2 !== "number")
        return t2.$sub();
      if (typeof t1 !== "number")
        return H.iae(t1);
      _this.height = t2 - t1;
      _this.set$channels(H.setRuntimeTypeInfo([], type$.JSArray_legacy_PsdChannel));
      numChannels = input.readUint16$0();
      for (i = 0; i < numChannels; ++i) {
        t1 = input.readUint16$0();
        $.$get$__uint16()[0] = t1;
        t1 = $.$get$__uint16ToInt16();
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        id = t1[0];
        input.readUint32$0();
        t1 = _this.channels;
        (t1 && C.JSArray_methods).add$1(t1, new N.PsdChannel(id));
      }
      sig = input.readUint32$0();
      if (sig !== 943868237)
        throw H.wrapException(K.ImageException$("Invalid PSD layer signature: " + C.JSInt_methods.toRadixString$1(sig, 16)));
      _this.blendMode = input.readUint32$0();
      _this.opacity = input.readByte$0();
      input.readByte$0();
      _this.flags = input.readByte$0();
      if (input.readByte$0() !== 0)
        throw H.wrapException(K.ImageException$("Invalid PSD layer data"));
      len = input.readUint32$0();
      extra = input.readBytes$1(len);
      if (len > 0) {
        len = extra.readUint32$0();
        if (len > 0) {
          maskData = extra.readBytes$1(len);
          t1 = maskData.offset;
          if (typeof t1 !== "number")
            return H.iae(t1);
          maskData.readUint32$0();
          maskData.readUint32$0();
          maskData.readUint32$0();
          maskData.readUint32$0();
          maskData.readByte$0();
          maskData.readByte$0();
          if (maskData.end - t1 === 20) {
            t1 = maskData.offset;
            if (typeof t1 !== "number")
              return t1.$add();
            maskData.offset = t1 + 2;
          } else {
            maskData.readByte$0();
            maskData.readByte$0();
            maskData.readUint32$0();
            maskData.readUint32$0();
            maskData.readUint32$0();
            maskData.readUint32$0();
          }
        }
        len = extra.readUint32$0();
        if (len > 0)
          new O.PsdBlendingRanges().PsdBlendingRanges$1(extra.readBytes$1(len));
        len = extra.readByte$0();
        extra.readString$1(len);
        if (typeof len !== "number")
          return len.$mod();
        padding = 4 - C.JSInt_methods.$mod(len, 4) - 1;
        if (padding > 0) {
          t1 = extra.offset;
          if (typeof t1 !== "number")
            return t1.$add();
          extra.offset = t1 + padding;
        }
        t1 = extra.end;
        t2 = _this.additionalData;
        t3 = _this.effects;
        t4 = type$.JSArray_legacy_int;
        t5 = type$.legacy_PsdLayerAdditionalData;
        while (true) {
          t6 = extra.offset;
          if (typeof t6 !== "number")
            return t6.$ge();
          if (!(t6 < t1))
            break;
          sig = extra.readUint32$0();
          if (sig !== 943868237)
            throw H.wrapException(K.ImageException$("PSD invalid signature for layer additional data: " + C.JSInt_methods.toRadixString$1(sig, 16)));
          tag = extra.readString$1(4);
          len = extra.readUint32$0();
          bytes = extra.subset$1(len);
          t6 = extra.offset;
          t7 = bytes.offset;
          if (typeof t7 !== "number")
            return H.iae(t7);
          if (typeof t6 !== "number")
            return t6.$add();
          t7 = t6 + (bytes.end - t7);
          extra.offset = t7;
          if ((len & 1) === 1)
            extra.offset = t7 + 1;
          t2.$indexSet(0, tag, Q.PsdLayerData_PsdLayerData(tag, bytes));
          if (tag === "lrFX") {
            data = Z.InputBuffer$from(t5._as(t2.$index(0, "lrFX")).data, null, 0);
            data.readUint16$0();
            numFx = data.readUint16$0();
            for (j = 0; j < numFx; ++j) {
              data.readString$1(4);
              fxTag = data.readString$1(4);
              size = data.readUint32$0();
              if (fxTag === "dsdw") {
                fx = new M.PsdDropShadowEffect();
                C.JSArray_methods.add$1(t3, fx);
                fx.version = data.readUint32$0();
                data.readUint32$0();
                data.readUint32$0();
                data.readUint32$0();
                data.readUint32$0();
                fx.set$color(H.setRuntimeTypeInfo([data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0()], t4));
                data.readString$1(8);
                t6 = data.buffer;
                t7 = data.offset;
                if (typeof t7 !== "number")
                  return t7.$add();
                data.offset = t7 + 1;
                J.$index$asx(t6, t7);
                t7 = data.buffer;
                t6 = data.offset;
                if (typeof t6 !== "number")
                  return t6.$add();
                data.offset = t6 + 1;
                J.$index$asx(t7, t6);
                t6 = data.buffer;
                t7 = data.offset;
                if (typeof t7 !== "number")
                  return t7.$add();
                data.offset = t7 + 1;
                J.$index$asx(t6, t7);
                fx.set$nativeColor(H.setRuntimeTypeInfo([data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0()], t4));
              } else if (fxTag === "isdw") {
                fx = new L.PsdInnerShadowEffect();
                C.JSArray_methods.add$1(t3, fx);
                fx.version = data.readUint32$0();
                data.readUint32$0();
                data.readUint32$0();
                data.readUint32$0();
                data.readUint32$0();
                fx.set$color(H.setRuntimeTypeInfo([data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0()], t4));
                data.readString$1(8);
                t6 = data.buffer;
                t7 = data.offset;
                if (typeof t7 !== "number")
                  return t7.$add();
                data.offset = t7 + 1;
                J.$index$asx(t6, t7);
                t7 = data.buffer;
                t6 = data.offset;
                if (typeof t6 !== "number")
                  return t6.$add();
                data.offset = t6 + 1;
                J.$index$asx(t7, t6);
                t6 = data.buffer;
                t7 = data.offset;
                if (typeof t7 !== "number")
                  return t7.$add();
                data.offset = t7 + 1;
                J.$index$asx(t6, t7);
                fx.set$nativeColor(H.setRuntimeTypeInfo([data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0()], t4));
              } else if (fxTag === "oglw") {
                fx = new N.PsdOuterGlowEffect();
                C.JSArray_methods.add$1(t3, fx);
                fx.version = data.readUint32$0();
                data.readUint32$0();
                data.readUint32$0();
                fx.set$color(H.setRuntimeTypeInfo([data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0()], t4));
                data.readString$1(8);
                t6 = data.buffer;
                t7 = data.offset;
                if (typeof t7 !== "number")
                  return t7.$add();
                data.offset = t7 + 1;
                J.$index$asx(t6, t7);
                t7 = data.buffer;
                t6 = data.offset;
                if (typeof t6 !== "number")
                  return t6.$add();
                data.offset = t6 + 1;
                J.$index$asx(t7, t6);
                if (fx.version === 2)
                  fx.set$nativeColor(H.setRuntimeTypeInfo([data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0()], t4));
              } else if (fxTag === "iglw") {
                fx = new D.PsdInnerGlowEffect();
                C.JSArray_methods.add$1(t3, fx);
                fx.version = data.readUint32$0();
                data.readUint32$0();
                data.readUint32$0();
                fx.set$color(H.setRuntimeTypeInfo([data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0()], t4));
                data.readString$1(8);
                t6 = data.buffer;
                t7 = data.offset;
                if (typeof t7 !== "number")
                  return t7.$add();
                data.offset = t7 + 1;
                J.$index$asx(t6, t7);
                t7 = data.buffer;
                t6 = data.offset;
                if (typeof t6 !== "number")
                  return t6.$add();
                data.offset = t6 + 1;
                J.$index$asx(t7, t6);
                if (fx.version === 2) {
                  t6 = data.buffer;
                  t7 = data.offset;
                  if (typeof t7 !== "number")
                    return t7.$add();
                  data.offset = t7 + 1;
                  J.$index$asx(t6, t7);
                  fx.set$nativeColor(H.setRuntimeTypeInfo([data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0()], t4));
                }
              } else if (fxTag === "bevl") {
                fx = new U.PsdBevelEffect();
                C.JSArray_methods.add$1(t3, fx);
                fx.version = data.readUint32$0();
                data.readUint32$0();
                data.readUint32$0();
                data.readUint32$0();
                data.readString$1(8);
                data.readString$1(8);
                fx.set$highlightColor(H.setRuntimeTypeInfo([data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0()], t4));
                fx.set$shadowColor(H.setRuntimeTypeInfo([data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0()], t4));
                t6 = data.buffer;
                t7 = data.offset;
                if (typeof t7 !== "number")
                  return t7.$add();
                data.offset = t7 + 1;
                J.$index$asx(t6, t7);
                t7 = data.buffer;
                t6 = data.offset;
                if (typeof t6 !== "number")
                  return t6.$add();
                data.offset = t6 + 1;
                J.$index$asx(t7, t6);
                t6 = data.buffer;
                t7 = data.offset;
                if (typeof t7 !== "number")
                  return t7.$add();
                data.offset = t7 + 1;
                J.$index$asx(t6, t7);
                t7 = data.buffer;
                t6 = data.offset;
                if (typeof t6 !== "number")
                  return t6.$add();
                data.offset = t6 + 1;
                J.$index$asx(t7, t6);
                t6 = data.buffer;
                t7 = data.offset;
                if (typeof t7 !== "number")
                  return t7.$add();
                data.offset = t7 + 1;
                J.$index$asx(t6, t7);
                t7 = data.buffer;
                t6 = data.offset;
                if (typeof t6 !== "number")
                  return t6.$add();
                data.offset = t6 + 1;
                J.$index$asx(t7, t6);
                if (fx.version === 2) {
                  fx.set$realHighlightColor(H.setRuntimeTypeInfo([data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0()], t4));
                  fx.set$realShadowColor(H.setRuntimeTypeInfo([data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0()], t4));
                }
              } else if (fxTag === "sofi") {
                fx = new F.PsdSolidFillEffect();
                C.JSArray_methods.add$1(t3, fx);
                fx.version = data.readUint32$0();
                data.readString$1(4);
                fx.set$color(H.setRuntimeTypeInfo([data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0()], t4));
                t6 = data.buffer;
                t7 = data.offset;
                if (typeof t7 !== "number")
                  return t7.$add();
                data.offset = t7 + 1;
                J.$index$asx(t6, t7);
                t7 = data.buffer;
                t6 = data.offset;
                if (typeof t6 !== "number")
                  return t6.$add();
                data.offset = t6 + 1;
                J.$index$asx(t7, t6);
                fx.set$nativeColor(H.setRuntimeTypeInfo([data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0()], t4));
              } else {
                t6 = data.offset;
                if (typeof t6 !== "number")
                  return t6.$add();
                data.offset = t6 + size;
              }
            }
          }
        }
      }
    },
    readImageData$2: function(input, psd) {
      var i, t1, _this = this;
      for (i = 0; t1 = _this.channels, i < t1.length; ++i)
        t1[i].readPlane$4(input, _this.width, _this.height, psd.depth);
      _this.layerImage = L.PsdImage_createImageFromChannels(psd.colorMode, psd.depth, _this.width, _this.height, t1);
    },
    set$channels: function(channels) {
      this.channels = type$.legacy_List_legacy_PsdChannel._as(channels);
    }
  };
  Q.PsdLayerData.prototype = {};
  V.PsdDecoder.prototype = {
    decodeImage$1: function(bytes) {
      this.info = L.PsdImage$(type$.legacy_List_legacy_int._as(bytes));
      return this.decodeFrame$1(0);
    },
    decodeFrame$1: function(frame) {
      var t1 = this.info;
      if (t1 == null)
        return null;
      return t1.decodeImage$0();
    }
  };
  R.TgaInfo.prototype = {};
  B.TgaDecoder.prototype = {
    isValidFile$1: function(data) {
      var header = Z.InputBuffer$(type$.legacy_List_legacy_int._as(data), true, null, 0).readBytes$1(18),
        t1 = header.buffer,
        t2 = header.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      if (J.$index$asx(t1, t2 + 2) !== 2)
        return false;
      t1 = header.buffer;
      t2 = header.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      if (J.$index$asx(t1, t2 + 16) !== 24) {
        t1 = header.buffer;
        t2 = header.offset;
        if (typeof t2 !== "number")
          return t2.$add();
        t2 = J.$index$asx(t1, t2 + 16) !== 32;
        t1 = t2;
      } else
        t1 = false;
      if (t1)
        return false;
      return true;
    },
    startDecode$1: function(data) {
      var t1, header, t2, t3, t4, _this = this;
      type$.legacy_List_legacy_int._as(data);
      _this.info = new R.TgaInfo();
      t1 = Z.InputBuffer$(data, true, null, 0);
      _this.input = t1;
      header = t1.readBytes$1(18);
      t1 = header.buffer;
      t2 = header.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      if (J.$index$asx(t1, t2 + 2) !== 2)
        return null;
      t1 = header.buffer;
      t2 = header.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      if (J.$index$asx(t1, t2 + 16) !== 24) {
        t1 = header.buffer;
        t2 = header.offset;
        if (typeof t2 !== "number")
          return t2.$add();
        t2 = J.$index$asx(t1, t2 + 16) !== 32;
        t1 = t2;
      } else
        t1 = false;
      if (t1)
        return null;
      t1 = _this.info;
      t2 = header.buffer;
      t3 = header.offset;
      if (typeof t3 !== "number")
        return t3.$add();
      t3 = J.$index$asx(t2, t3 + 12);
      if (typeof t3 !== "number")
        return t3.$and();
      t2 = header.buffer;
      t4 = header.offset;
      if (typeof t4 !== "number")
        return t4.$add();
      t4 = J.$index$asx(t2, t4 + 13);
      if (typeof t4 !== "number")
        return t4.$and();
      t1.width = t3 & 255 | (t4 & 255) << 8;
      t4 = _this.info;
      t3 = header.buffer;
      t1 = header.offset;
      if (typeof t1 !== "number")
        return t1.$add();
      t1 = J.$index$asx(t3, t1 + 14);
      if (typeof t1 !== "number")
        return t1.$and();
      t3 = header.buffer;
      t2 = header.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      t2 = J.$index$asx(t3, t2 + 15);
      if (typeof t2 !== "number")
        return t2.$and();
      t4.height = t1 & 255 | (t2 & 255) << 8;
      t2 = _this.info;
      t2.imageOffset = _this.input.offset;
      t1 = header.buffer;
      t4 = header.offset;
      if (typeof t4 !== "number")
        return t4.$add();
      t2.bpp = J.$index$asx(t1, t4 + 16);
      return _this.info;
    },
    decodeFrame$1: function(frame) {
      var image, y, t2, t3, t4, x, t5, t6, t7, t8, t9, t10, a, _this = this,
        t1 = _this.info;
      if (t1 == null)
        return null;
      _this.input.offset = t1.imageOffset;
      image = U.Image$(t1.width, t1.height, C.Channels_0, null, null);
      t1 = image.height;
      if (typeof t1 !== "number")
        return t1.$sub();
      y = t1 - 1;
      t1 = image.width;
      t2 = image.data;
      t3 = t2.length;
      for (; y >= 0; --y) {
        if (typeof t1 !== "number")
          return H.iae(t1);
        t4 = y * t1;
        x = 0;
        for (; x < t1; ++x) {
          t5 = _this.input;
          t6 = t5.buffer;
          t7 = t5.offset;
          if (typeof t7 !== "number")
            return t7.$add();
          t5.offset = t7 + 1;
          t7 = J.$index$asx(t6, t7);
          t6 = _this.input;
          t5 = t6.buffer;
          t8 = t6.offset;
          if (typeof t8 !== "number")
            return t8.$add();
          t6.offset = t8 + 1;
          t8 = J.$index$asx(t5, t8);
          t5 = _this.input;
          t6 = t5.buffer;
          t9 = t5.offset;
          if (typeof t9 !== "number")
            return t9.$add();
          t5.offset = t9 + 1;
          t9 = J.$index$asx(t6, t9);
          if (_this.info.bpp === 32) {
            t5 = _this.input;
            t6 = t5.buffer;
            t10 = t5.offset;
            if (typeof t10 !== "number")
              return t10.$add();
            t5.offset = t10 + 1;
            a = J.$index$asx(t6, t10);
          } else
            a = 255;
          t5 = C.JSNumber_methods.toInt$0(J.clamp$2$n(a, 0, 255));
          t7 = C.JSNumber_methods.toInt$0(J.clamp$2$n(t7, 0, 255));
          t8 = C.JSNumber_methods.toInt$0(J.clamp$2$n(t8, 0, 255));
          t9 = C.JSNumber_methods.toInt$0(J.clamp$2$n(t9, 0, 255));
          t6 = t4 + x;
          if (t6 < 0 || t6 >= t3)
            return H.ioore(t2, t6);
          t2[t6] = (t5 << 24 | t7 << 16 | t8 << 8 | t9) >>> 0;
        }
      }
      return image;
    },
    decodeImage$1: function(data) {
      if (this.startDecode$1(type$.legacy_List_legacy_int._as(data)) == null)
        return null;
      return this.decodeFrame$1(0);
    }
  };
  A.TiffBitReader.prototype = {
    readBits$1: function(numBits) {
      var t1, value, t2, t3, t4, t5, _this = this;
      if (numBits === 0)
        return 0;
      if (_this._bitPos === 0) {
        _this._bitPos = 8;
        _this._tiff_bit_reader$_bitBuffer = _this.input.readByte$0();
      }
      for (t1 = _this.input, value = 0; t2 = _this._bitPos, numBits > t2;) {
        t3 = C.JSInt_methods.$shl(value, t2);
        t4 = _this._tiff_bit_reader$_bitBuffer;
        if (t2 < 0 || t2 >= 9)
          return H.ioore(C.List_knt, t2);
        t5 = C.List_knt[t2];
        if (typeof t4 !== "number")
          return t4.$and();
        value = t3 + (t4 & t5);
        numBits -= t2;
        _this._bitPos = 8;
        t2 = t1.buffer;
        t5 = t1.offset;
        if (typeof t5 !== "number")
          return t5.$add();
        t1.offset = t5 + 1;
        _this._tiff_bit_reader$_bitBuffer = J.$index$asx(t2, t5);
      }
      if (numBits > 0) {
        if (t2 === 0) {
          _this._bitPos = 8;
          _this._tiff_bit_reader$_bitBuffer = t1.readByte$0();
        }
        t1 = C.JSInt_methods.$shl(value, numBits);
        t2 = _this._tiff_bit_reader$_bitBuffer;
        t3 = _this._bitPos - numBits;
        if (typeof t2 !== "number")
          return t2.$shr();
        t2 = C.JSInt_methods.$shr(t2, t3);
        if (numBits >= 9)
          return H.ioore(C.List_knt, numBits);
        value = t1 + (t2 & C.List_knt[numBits]);
        _this._bitPos = t3;
      }
      return value;
    }
  };
  G.TiffEntry.prototype = {
    toString$0: function(_) {
      var _this = this,
        t1 = _this.tag;
      if (C.Map_6zffn.containsKey$1(t1))
        return H.S(C.Map_6zffn.$index(0, t1)) + ": " + _this.type + " " + _this.numValues;
      return "<" + t1 + ">: " + _this.type + " " + _this.numValues;
    },
    readValues$1: function(p) {
      var values, t1, i;
      p.offset = this.valueOffset;
      values = H.setRuntimeTypeInfo([], type$.JSArray_legacy_int);
      for (t1 = this.numValues, i = 0; i < t1; ++i)
        C.JSArray_methods.add$1(values, this._readValue$1(p));
      return values;
    },
    _readValue$1: function(p) {
      var num, den;
      switch (this.type) {
        case 1:
        case 2:
          return p.readByte$0();
        case 3:
          return p.readUint16$0();
        case 4:
          return p.readUint32$0();
        case 5:
          num = p.readUint32$0();
          den = p.readUint32$0();
          if (den === 0)
            return 0;
          return C.JSInt_methods.$tdiv(num, den);
        case 6:
          throw H.wrapException(K.ImageException$("Unhandled value type: SBYTE"));
        case 7:
          return p.readByte$0();
        case 8:
          throw H.wrapException(K.ImageException$("Unhandled value type: SSHORT"));
        case 9:
          throw H.wrapException(K.ImageException$("Unhandled value type: SLONG"));
        case 10:
          throw H.wrapException(K.ImageException$("Unhandled value type: SRATIONAL"));
        case 11:
          throw H.wrapException(K.ImageException$("Unhandled value type: FLOAT"));
        case 12:
          throw H.wrapException(K.ImageException$("Unhandled value type: DOUBLE"));
      }
      return 0;
    }
  };
  A.TiffFaxDecoder.prototype = {
    decode1D$4: function(out, compData, startX, height) {
      var t1, scanlineStride, lineOffset, i, _this = this;
      _this.data = compData;
      _this.bytePointer = _this.bitPointer = 0;
      t1 = _this.width;
      if (typeof t1 !== "number")
        return t1.$add();
      scanlineStride = C.JSInt_methods._tdivFast$1(t1 + 7, 8);
      if (typeof height !== "number")
        return H.iae(height);
      lineOffset = 0;
      i = 0;
      for (; i < height; ++i) {
        _this._decodeNextScanline$3(out, lineOffset, startX);
        lineOffset += scanlineStride;
      }
    },
    _decodeNextScanline$3: function(buffer, lineOffset, bitOffset) {
      var t1, bits, code, isT, current, entry, twoBits, isWhite, _this = this;
      _this.changingElemSize = 0;
      t1 = _this.width;
      if (typeof t1 !== "number")
        return H.iae(t1);
      bits = 0;
      code = 0;
      isT = 0;
      current = null;
      entry = null;
      twoBits = null;
      isWhite = true;
      for (; bitOffset < t1;) {
        for (; isWhite;) {
          current = _this._nextNBits$1(10);
          if (current >= 1024)
            return H.ioore(C.List_VSP, current);
          entry = C.List_VSP[current];
          isT = entry & 1;
          bits = C.JSInt_methods._shrOtherPositive$1(entry, 1) & 15;
          if (bits === 12) {
            twoBits = _this._nextLesserThan8Bits$1(2);
            current = (current << 2 & 12 | twoBits) >>> 0;
            if (current >= 16)
              return H.ioore(C.List_MEg, current);
            entry = C.List_MEg[current];
            bits = C.JSInt_methods._shrOtherPositive$1(entry, 1) & 7;
            code = C.JSInt_methods._shrOtherPositive$1(entry, 4) & 4095;
            bitOffset += code;
            _this._updatePointer$1(4 - bits);
          } else if (bits === 0)
            throw H.wrapException(K.ImageException$("TIFFFaxDecoder0"));
          else if (bits === 15)
            throw H.wrapException(K.ImageException$("TIFFFaxDecoder1"));
          else {
            code = C.JSInt_methods._shrOtherPositive$1(entry, 5) & 2047;
            bitOffset += code;
            _this._updatePointer$1(10 - bits);
            if (isT === 0) {
              C.JSArray_methods.$indexSet(_this.currChangingElems, _this.changingElemSize++, bitOffset);
              isWhite = false;
            }
          }
        }
        if (bitOffset === t1) {
          if (_this.compression === 2)
            if (_this.bitPointer !== 0) {
              t1 = _this.bytePointer;
              if (typeof t1 !== "number")
                return t1.$add();
              _this.bytePointer = t1 + 1;
              _this.bitPointer = 0;
            }
          break;
        }
        for (; !isWhite;) {
          current = _this._nextLesserThan8Bits$1(4);
          if (current >= 16)
            return H.ioore(C.List_89P, current);
          entry = C.List_89P[current];
          isT = entry & 1;
          bits = entry >>> 1 & 15;
          code = entry >>> 5 & 2047;
          if (code === 100) {
            current = _this._nextNBits$1(9);
            if (current >= 512)
              return H.ioore(C.List_nLG, current);
            entry = C.List_nLG[current];
            isT = entry & 1;
            bits = C.JSInt_methods._shrOtherPositive$1(entry, 1) & 15;
            code = C.JSInt_methods._shrOtherPositive$1(entry, 5) & 2047;
            if (bits === 12) {
              _this._updatePointer$1(5);
              current = _this._nextLesserThan8Bits$1(4);
              if (current >= 16)
                return H.ioore(C.List_MEg, current);
              entry = C.List_MEg[current];
              bits = C.JSInt_methods._shrOtherPositive$1(entry, 1) & 7;
              code = C.JSInt_methods._shrOtherPositive$1(entry, 4) & 4095;
              _this._setToBlack$4(buffer, lineOffset, bitOffset, code);
              bitOffset += code;
              _this._updatePointer$1(4 - bits);
            } else if (bits === 15)
              throw H.wrapException(K.ImageException$("TIFFFaxDecoder2"));
            else {
              _this._setToBlack$4(buffer, lineOffset, bitOffset, code);
              bitOffset += code;
              _this._updatePointer$1(9 - bits);
              if (isT === 0) {
                C.JSArray_methods.$indexSet(_this.currChangingElems, _this.changingElemSize++, bitOffset);
                isWhite = true;
              }
            }
          } else {
            if (code === 200) {
              current = _this._nextLesserThan8Bits$1(2);
              if (current >= 4)
                return H.ioore(C.List_292_260_226_226, current);
              entry = C.List_292_260_226_226[current];
              code = entry >>> 5 & 2047;
              bits = entry >>> 1 & 15;
              _this._setToBlack$4(buffer, lineOffset, bitOffset, code);
              bitOffset += code;
              _this._updatePointer$1(2 - bits);
              C.JSArray_methods.$indexSet(_this.currChangingElems, _this.changingElemSize++, bitOffset);
            } else {
              _this._setToBlack$4(buffer, lineOffset, bitOffset, code);
              bitOffset += code;
              _this._updatePointer$1(4 - bits);
              C.JSArray_methods.$indexSet(_this.currChangingElems, _this.changingElemSize++, bitOffset);
            }
            isWhite = true;
          }
        }
        if (bitOffset === t1) {
          if (_this.compression === 2)
            if (_this.bitPointer !== 0) {
              t1 = _this.bytePointer;
              if (typeof t1 !== "number")
                return t1.$add();
              _this.bytePointer = t1 + 1;
              _this.bitPointer = 0;
            }
          break;
        }
      }
      C.JSArray_methods.$indexSet(_this.currChangingElems, _this.changingElemSize++, bitOffset);
    },
    decode2D$5: function(out, compData, startX, height, tiffT4Options) {
      var t1, scanlineStride, t2, b, bitOffset, lineOffset, temp, isWhite, bits, code, entry, b2, b1, a1, a0, currIndex, lines, currIndex0, currIndex1, number, _this = this, _null = null;
      _this.data = compData;
      _this.compression = 3;
      _this.bytePointer = _this.bitPointer = 0;
      t1 = _this.width;
      if (typeof t1 !== "number")
        return t1.$add();
      scanlineStride = C.JSInt_methods._tdivFast$1(t1 + 7, 8);
      t2 = new Array(2);
      t2.fixed$length = Array;
      b = H.setRuntimeTypeInfo(t2, type$.JSArray_legacy_int);
      if (typeof tiffT4Options !== "number")
        return tiffT4Options.$and();
      _this.oneD = tiffT4Options & 1;
      _this.fillBits = (tiffT4Options & 4) >>> 2;
      if (_this._readEOL$0() !== 1)
        throw H.wrapException(K.ImageException$("TIFFFaxDecoder3"));
      _this._decodeNextScanline$3(out, 0, startX);
      if (typeof height !== "number")
        return H.iae(height);
      bitOffset = _null;
      lineOffset = scanlineStride;
      temp = bitOffset;
      isWhite = temp;
      bits = isWhite;
      code = bits;
      entry = code;
      b2 = entry;
      b1 = b2;
      a1 = b1;
      a0 = a1;
      currIndex = 0;
      lines = 1;
      for (; lines < height; ++lines) {
        if (_this._readEOL$0() === 0) {
          temp = _this.prevChangingElems;
          _this.set$prevChangingElems(_this.currChangingElems);
          _this.set$currChangingElems(temp);
          _this.lastChangingElement = 0;
          bitOffset = startX;
          a0 = -1;
          isWhite = true;
          currIndex = 0;
          while (true) {
            if (typeof bitOffset !== "number")
              return bitOffset.$lt();
            if (!(bitOffset < t1))
              break;
            _this._getNextChangingElement$3(a0, isWhite, b);
            b1 = b[0];
            b2 = b[1];
            entry = _this._nextLesserThan8Bits$1(7);
            if (entry >= 128)
              return H.ioore(C.List_8co, entry);
            entry = C.List_8co[entry] & 255;
            code = (entry & 120) >>> 3;
            bits = entry & 7;
            if (code === 0) {
              if (!isWhite) {
                if (typeof b2 !== "number")
                  return b2.$sub();
                _this._setToBlack$4(out, lineOffset, bitOffset, b2 - bitOffset);
              }
              _this._updatePointer$1(7 - bits);
              bitOffset = b2;
              a0 = bitOffset;
            } else if (code === 1) {
              _this._updatePointer$1(7 - bits);
              currIndex0 = currIndex + 1;
              currIndex1 = currIndex0 + 1;
              if (isWhite) {
                bitOffset += _this._decodeWhiteCodeWord$0();
                C.JSArray_methods.$indexSet(_this.currChangingElems, currIndex, bitOffset);
                number = _this._decodeBlackCodeWord$0();
                _this._setToBlack$4(out, lineOffset, bitOffset, number);
                bitOffset += number;
                C.JSArray_methods.$indexSet(_this.currChangingElems, currIndex0, bitOffset);
              } else {
                number = _this._decodeBlackCodeWord$0();
                _this._setToBlack$4(out, lineOffset, bitOffset, number);
                bitOffset += number;
                C.JSArray_methods.$indexSet(_this.currChangingElems, currIndex, bitOffset);
                bitOffset += _this._decodeWhiteCodeWord$0();
                C.JSArray_methods.$indexSet(_this.currChangingElems, currIndex0, bitOffset);
              }
              currIndex = currIndex1;
              a0 = bitOffset;
            } else {
              if (code <= 8) {
                if (typeof b1 !== "number")
                  return b1.$add();
                a1 = b1 + (code - 5);
                currIndex0 = currIndex + 1;
                C.JSArray_methods.$indexSet(_this.currChangingElems, currIndex, a1);
                isWhite = !isWhite;
                if (isWhite)
                  _this._setToBlack$4(out, lineOffset, bitOffset, a1 - bitOffset);
                _this._updatePointer$1(7 - bits);
              } else
                throw H.wrapException(K.ImageException$("TIFFFaxDecoder4"));
              bitOffset = a1;
              currIndex = currIndex0;
              a0 = bitOffset;
            }
          }
          currIndex0 = currIndex + 1;
          C.JSArray_methods.$indexSet(_this.currChangingElems, currIndex, bitOffset);
          _this.changingElemSize = currIndex0;
          currIndex = currIndex0;
        } else
          _this._decodeNextScanline$3(out, lineOffset, startX);
        lineOffset += scanlineStride;
      }
    },
    decodeT6$5: function(out, compData, startX, height, tiffT6Options) {
      var t1, scanlineStride, t2, b, cce, bits, code, entry, b2, b1, a1, lineOffset, lines, temp, bitOffset, a0, isWhite, currIndex, currIndex0, currIndex1, number, zeros, exit, _this = this, _null = null;
      _this.data = compData;
      _this.compression = 4;
      _this.bytePointer = _this.bitPointer = 0;
      t1 = _this.width;
      if (typeof t1 !== "number")
        return t1.$add();
      scanlineStride = C.JSInt_methods._tdivFast$1(t1 + 7, 8);
      t2 = new Array(2);
      t2.fixed$length = Array;
      b = H.setRuntimeTypeInfo(t2, type$.JSArray_legacy_int);
      if (typeof tiffT6Options !== "number")
        return tiffT6Options.$and();
      cce = _this.currChangingElems;
      _this.changingElemSize = 0;
      _this.changingElemSize = 1;
      C.JSArray_methods.$indexSet(cce, 0, t1);
      C.JSArray_methods.$indexSet(cce, _this.changingElemSize++, t1);
      if (typeof height !== "number")
        return H.iae(height);
      bits = _null;
      code = bits;
      entry = code;
      b2 = entry;
      b1 = b2;
      a1 = b1;
      lineOffset = 0;
      lines = 0;
      for (; lines < height; ++lines) {
        temp = _this.prevChangingElems;
        _this.set$prevChangingElems(_this.currChangingElems);
        _this.set$currChangingElems(temp);
        _this.lastChangingElement = 0;
        bitOffset = startX;
        a0 = -1;
        isWhite = true;
        currIndex = 0;
        while (true) {
          if (typeof bitOffset !== "number")
            return bitOffset.$lt();
          if (!(bitOffset < t1))
            break;
          _this._getNextChangingElement$3(a0, isWhite, b);
          b1 = b[0];
          b2 = b[1];
          entry = _this._nextLesserThan8Bits$1(7);
          if (entry >= 128)
            return H.ioore(C.List_8co, entry);
          entry = C.List_8co[entry] & 255;
          code = (entry & 120) >>> 3;
          bits = entry & 7;
          if (code === 0) {
            if (!isWhite) {
              if (typeof b2 !== "number")
                return b2.$sub();
              _this._setToBlack$4(out, lineOffset, bitOffset, b2 - bitOffset);
            }
            _this._updatePointer$1(7 - bits);
            bitOffset = b2;
            a0 = bitOffset;
          } else if (code === 1) {
            _this._updatePointer$1(7 - bits);
            currIndex0 = currIndex + 1;
            currIndex1 = currIndex0 + 1;
            if (isWhite) {
              bitOffset += _this._decodeWhiteCodeWord$0();
              C.JSArray_methods.$indexSet(temp, currIndex, bitOffset);
              number = _this._decodeBlackCodeWord$0();
              _this._setToBlack$4(out, lineOffset, bitOffset, number);
              bitOffset += number;
              C.JSArray_methods.$indexSet(temp, currIndex0, bitOffset);
            } else {
              number = _this._decodeBlackCodeWord$0();
              _this._setToBlack$4(out, lineOffset, bitOffset, number);
              bitOffset += number;
              C.JSArray_methods.$indexSet(temp, currIndex, bitOffset);
              bitOffset += _this._decodeWhiteCodeWord$0();
              C.JSArray_methods.$indexSet(temp, currIndex0, bitOffset);
            }
            currIndex = currIndex1;
            a0 = bitOffset;
          } else if (code <= 8) {
            if (typeof b1 !== "number")
              return b1.$add();
            a1 = b1 + (code - 5);
            currIndex0 = currIndex + 1;
            C.JSArray_methods.$indexSet(temp, currIndex, a1);
            isWhite = !isWhite;
            if (isWhite)
              _this._setToBlack$4(out, lineOffset, bitOffset, a1 - bitOffset);
            _this._updatePointer$1(7 - bits);
            bitOffset = a1;
            currIndex = currIndex0;
            a0 = bitOffset;
          } else if (code === 11) {
            if (_this._nextLesserThan8Bits$1(3) !== 7)
              throw H.wrapException(K.ImageException$("TIFFFaxDecoder5"));
            for (zeros = 0, exit = false; !exit;) {
              for (; _this._nextLesserThan8Bits$1(1) !== 1;)
                ++zeros;
              if (zeros > 5) {
                zeros -= 6;
                if (!isWhite && zeros > 0) {
                  currIndex0 = currIndex + 1;
                  C.JSArray_methods.$indexSet(temp, currIndex, bitOffset);
                  currIndex = currIndex0;
                }
                bitOffset += zeros;
                if (zeros > 0)
                  isWhite = true;
                if (_this._nextLesserThan8Bits$1(1) === 0) {
                  if (!isWhite) {
                    currIndex0 = currIndex + 1;
                    C.JSArray_methods.$indexSet(temp, currIndex, bitOffset);
                    currIndex = currIndex0;
                  }
                  isWhite = true;
                } else {
                  if (isWhite) {
                    currIndex0 = currIndex + 1;
                    C.JSArray_methods.$indexSet(temp, currIndex, bitOffset);
                    currIndex = currIndex0;
                  }
                  isWhite = false;
                }
                exit = true;
              }
              if (zeros === 5) {
                if (!isWhite) {
                  currIndex0 = currIndex + 1;
                  C.JSArray_methods.$indexSet(temp, currIndex, bitOffset);
                  currIndex = currIndex0;
                }
                bitOffset += zeros;
                isWhite = true;
              } else {
                bitOffset += zeros;
                currIndex0 = currIndex + 1;
                C.JSArray_methods.$indexSet(temp, currIndex, bitOffset);
                _this._setToBlack$4(out, lineOffset, bitOffset, 1);
                ++bitOffset;
                currIndex = currIndex0;
                isWhite = false;
              }
            }
          } else
            throw H.wrapException(K.ImageException$("TIFFFaxDecoder5 " + code));
        }
        C.JSArray_methods.$indexSet(temp, currIndex, bitOffset);
        _this.changingElemSize = currIndex + 1;
        lineOffset += scanlineStride;
      }
    },
    _decodeWhiteCodeWord$0: function() {
      var twoBits, runLength, isWhite, current, entry, bits, t1, _this = this;
      for (twoBits = null, runLength = 0, isWhite = true; isWhite;) {
        current = _this._nextNBits$1(10);
        if (current >= 1024)
          return H.ioore(C.List_VSP, current);
        entry = C.List_VSP[current];
        bits = C.JSInt_methods._shrOtherPositive$1(entry, 1) & 15;
        if (bits === 12) {
          twoBits = _this._nextLesserThan8Bits$1(2);
          current = (current << 2 & 12 | twoBits) >>> 0;
          if (current >= 16)
            return H.ioore(C.List_MEg, current);
          entry = C.List_MEg[current];
          t1 = C.JSInt_methods._shrOtherPositive$1(entry, 1);
          runLength += C.JSInt_methods._shrOtherPositive$1(entry, 4) & 4095;
          _this._updatePointer$1(4 - (t1 & 7));
        } else if (bits === 0)
          throw H.wrapException(K.ImageException$("TIFFFaxDecoder0"));
        else if (bits === 15)
          throw H.wrapException(K.ImageException$("TIFFFaxDecoder1"));
        else {
          runLength += C.JSInt_methods._shrOtherPositive$1(entry, 5) & 2047;
          _this._updatePointer$1(10 - bits);
          if ((entry & 1) === 0)
            isWhite = false;
        }
      }
      return runLength;
    },
    _decodeBlackCodeWord$0: function() {
      var runLength, isWhite, current, entry, code, bits, t1, _this = this;
      for (runLength = 0, isWhite = false; !isWhite;) {
        current = _this._nextLesserThan8Bits$1(4);
        if (current >= 16)
          return H.ioore(C.List_89P, current);
        entry = C.List_89P[current];
        code = entry >>> 5 & 2047;
        if (code === 100) {
          current = _this._nextNBits$1(9);
          if (current >= 512)
            return H.ioore(C.List_nLG, current);
          entry = C.List_nLG[current];
          bits = C.JSInt_methods._shrOtherPositive$1(entry, 1) & 15;
          t1 = C.JSInt_methods._shrOtherPositive$1(entry, 5);
          if (bits === 12) {
            _this._updatePointer$1(5);
            current = _this._nextLesserThan8Bits$1(4);
            if (current >= 16)
              return H.ioore(C.List_MEg, current);
            entry = C.List_MEg[current];
            t1 = C.JSInt_methods._shrOtherPositive$1(entry, 1);
            runLength += C.JSInt_methods._shrOtherPositive$1(entry, 4) & 4095;
            _this._updatePointer$1(4 - (t1 & 7));
          } else if (bits === 15)
            throw H.wrapException(K.ImageException$("TIFFFaxDecoder2"));
          else {
            runLength += t1 & 2047;
            _this._updatePointer$1(9 - bits);
            if ((entry & 1) === 0)
              isWhite = true;
          }
        } else {
          if (code === 200) {
            current = _this._nextLesserThan8Bits$1(2);
            if (current >= 4)
              return H.ioore(C.List_292_260_226_226, current);
            entry = C.List_292_260_226_226[current];
            runLength += entry >>> 5 & 2047;
            _this._updatePointer$1(2 - (entry >>> 1 & 15));
          } else {
            runLength += code;
            _this._updatePointer$1(4 - (entry >>> 1 & 15));
          }
          isWhite = true;
        }
      }
      return runLength;
    },
    _readEOL$0: function() {
      var bitsLeft, n, _this = this,
        _s15_ = "TIFFFaxDecoder8",
        t1 = _this.fillBits;
      if (t1 === 0) {
        if (_this._nextNBits$1(12) !== 1)
          throw H.wrapException(K.ImageException$("TIFFFaxDecoder6"));
      } else if (t1 === 1) {
        t1 = _this.bitPointer;
        if (typeof t1 !== "number")
          return H.iae(t1);
        bitsLeft = 8 - t1;
        if (_this._nextNBits$1(bitsLeft) !== 0)
          throw H.wrapException(K.ImageException$(_s15_));
        if (bitsLeft < 4)
          if (_this._nextNBits$1(8) !== 0)
            throw H.wrapException(K.ImageException$(_s15_));
        for (; n = _this._nextNBits$1(8), n !== 1;)
          if (n !== 0)
            throw H.wrapException(K.ImageException$(_s15_));
      }
      if (_this.oneD === 0)
        return 1;
      else
        return _this._nextLesserThan8Bits$1(1);
    },
    _getNextChangingElement$3: function(a0, isWhite, ret) {
      var pce, ces, t1, start, i, temp, t2, _this = this;
      type$.legacy_List_legacy_int._as(ret);
      pce = _this.prevChangingElems;
      ces = _this.changingElemSize;
      t1 = _this.lastChangingElement;
      start = t1 > 0 ? t1 - 1 : 0;
      start = isWhite ? (start & 4294967294) >>> 0 : (start | 1) >>> 0;
      for (t1 = pce.length, i = start; i < ces; i += 2) {
        if (i >= t1)
          return H.ioore(pce, i);
        temp = pce[i];
        if (typeof temp !== "number")
          return temp.$gt();
        if (typeof a0 !== "number")
          return H.iae(a0);
        if (temp > a0) {
          _this.lastChangingElement = i;
          C.JSArray_methods.$indexSet(ret, 0, temp);
          break;
        }
      }
      t2 = i + 1;
      if (t2 < ces) {
        if (t2 >= t1)
          return H.ioore(pce, t2);
        C.JSArray_methods.$indexSet(ret, 1, pce[t2]);
      }
    },
    _setToBlack$4: function(buffer, lineOffset, bitOffset, numBits) {
      var maskVal, t1, t2, val, byteNum0, t3, t4,
        bitNum = 8 * lineOffset + bitOffset,
        lastBit = bitNum + numBits,
        byteNum = C.JSInt_methods._shrOtherPositive$1(bitNum, 3),
        shift = bitNum & 7;
      if (shift > 0) {
        maskVal = C.JSInt_methods.$shl(1, 7 - shift);
        t1 = buffer.buffer;
        t2 = buffer.offset;
        if (typeof t2 !== "number")
          return t2.$add();
        val = J.$index$asx(t1, t2 + byteNum);
        while (true) {
          if (!(maskVal > 0 && bitNum < lastBit))
            break;
          if (typeof val !== "number")
            return val.$or();
          val = (val | maskVal) >>> 0;
          maskVal = maskVal >>> 1;
          ++bitNum;
        }
        buffer.$indexSet(0, byteNum, val);
      }
      byteNum = C.JSInt_methods._shrOtherPositive$1(bitNum, 3);
      for (t1 = lastBit - 7; bitNum < t1; byteNum = byteNum0) {
        byteNum0 = byteNum + 1;
        t2 = buffer.buffer;
        t3 = buffer.offset;
        if (typeof t3 !== "number")
          return t3.$add();
        J.$indexSet$ax(t2, t3 + byteNum, 255);
        bitNum += 8;
      }
      for (; bitNum < lastBit;) {
        byteNum = C.JSInt_methods._shrOtherPositive$1(bitNum, 3);
        t1 = buffer.buffer;
        t2 = buffer.offset;
        if (typeof t2 !== "number")
          return t2.$add();
        t2 = J.$index$asx(t1, t2 + byteNum);
        t1 = C.JSInt_methods.$shl(1, 7 - (bitNum & 7));
        if (typeof t2 !== "number")
          return t2.$or();
        t3 = buffer.buffer;
        t4 = buffer.offset;
        if (typeof t4 !== "number")
          return t4.$add();
        J.$indexSet$ax(t3, t4 + byteNum, (t2 | t1) >>> 0);
        ++bitNum;
      }
    },
    _nextNBits$1: function(bitsToGet) {
      var l, bp, b, next, next2next, bitsLeft, bitsFromNextByte, bitsFromNext2NextByte, bitsFromNextByte0, i1, i2, _this = this,
        t1 = _this.data,
        t2 = t1.end,
        t3 = t1.offset;
      if (typeof t3 !== "number")
        return H.iae(t3);
      l = t2 - t3 - 1;
      bp = _this.bytePointer;
      t2 = _this.fillOrder;
      if (t2 === 1) {
        t1 = t1.buffer;
        if (typeof bp !== "number")
          return H.iae(bp);
        b = J.$index$asx(t1, t3 + bp);
        if (bp === l) {
          next = 0;
          next2next = 0;
        } else {
          t1 = bp + 1;
          t2 = _this.data;
          if (t1 === l) {
            t3 = t2.buffer;
            t2 = t2.offset;
            if (typeof t2 !== "number")
              return t2.$add();
            next = J.$index$asx(t3, t2 + t1);
            next2next = 0;
          } else {
            t3 = t2.buffer;
            t2 = t2.offset;
            if (typeof t2 !== "number")
              return t2.$add();
            next = J.$index$asx(t3, t2 + t1);
            t1 = _this.data;
            t2 = t1.buffer;
            t1 = t1.offset;
            if (typeof t1 !== "number")
              return t1.$add();
            next2next = J.$index$asx(t2, t1 + (bp + 2));
          }
        }
      } else if (t2 === 2) {
        t1 = t1.buffer;
        if (typeof bp !== "number")
          return H.iae(bp);
        t3 = J.$index$asx(t1, t3 + bp);
        if (typeof t3 !== "number")
          return t3.$and();
        b = C.List_VvJ[t3 & 255];
        if (bp === l) {
          next = 0;
          next2next = 0;
        } else {
          t1 = bp + 1;
          t2 = _this.data;
          if (t1 === l) {
            t3 = t2.buffer;
            t2 = t2.offset;
            if (typeof t2 !== "number")
              return t2.$add();
            t1 = J.$index$asx(t3, t2 + t1);
            if (typeof t1 !== "number")
              return t1.$and();
            next = C.List_VvJ[t1 & 255];
            next2next = 0;
          } else {
            t3 = t2.buffer;
            t2 = t2.offset;
            if (typeof t2 !== "number")
              return t2.$add();
            t1 = J.$index$asx(t3, t2 + t1);
            if (typeof t1 !== "number")
              return t1.$and();
            next = C.List_VvJ[t1 & 255];
            t1 = _this.data;
            t2 = t1.buffer;
            t1 = t1.offset;
            if (typeof t1 !== "number")
              return t1.$add();
            t1 = J.$index$asx(t2, t1 + (bp + 2));
            if (typeof t1 !== "number")
              return t1.$and();
            next2next = C.List_VvJ[t1 & 255];
          }
        }
      } else
        throw H.wrapException(K.ImageException$("TIFFFaxDecoder7"));
      t1 = _this.bitPointer;
      if (typeof t1 !== "number")
        return H.iae(t1);
      bitsLeft = 8 - t1;
      bitsFromNextByte = bitsToGet - bitsLeft;
      if (bitsFromNextByte > 8) {
        bitsFromNext2NextByte = bitsFromNextByte - 8;
        bitsFromNextByte0 = 8;
      } else {
        bitsFromNextByte0 = bitsFromNextByte;
        bitsFromNext2NextByte = 0;
      }
      t1 = _this.bytePointer;
      if (typeof t1 !== "number")
        return t1.$add();
      t1 = _this.bytePointer = t1 + 1;
      if (bitsLeft < 0 || bitsLeft >= 9)
        return H.ioore(C.List_knt, bitsLeft);
      t2 = C.List_knt[bitsLeft];
      if (typeof b !== "number")
        return b.$and();
      i1 = C.JSInt_methods.$shl(b & t2, bitsFromNextByte);
      if (bitsFromNextByte0 < 0)
        return H.ioore(C.List_knt0, bitsFromNextByte0);
      t2 = C.List_knt0[bitsFromNextByte0];
      if (typeof next !== "number")
        return next.$and();
      i2 = C.JSInt_methods._shrReceiverPositive$1(next & t2, 8 - bitsFromNextByte0);
      if (bitsFromNext2NextByte !== 0) {
        i2 = C.JSInt_methods.$shl(i2, bitsFromNext2NextByte);
        if (bitsFromNext2NextByte >= 9)
          return H.ioore(C.List_knt0, bitsFromNext2NextByte);
        t2 = C.List_knt0[bitsFromNext2NextByte];
        if (typeof next2next !== "number")
          return next2next.$and();
        i2 |= C.JSInt_methods._shrReceiverPositive$1(next2next & t2, 8 - bitsFromNext2NextByte);
        _this.bytePointer = t1 + 1;
        _this.bitPointer = bitsFromNext2NextByte;
      } else if (bitsFromNextByte0 === 8) {
        _this.bitPointer = 0;
        _this.bytePointer = t1 + 1;
      } else
        _this.bitPointer = bitsFromNextByte0;
      return (i1 | i2) >>> 0;
    },
    _nextLesserThan8Bits$1: function(bitsToGet) {
      var l, bp, b, next, bitsLeft, bitsFromNextByte, shift, i1, _this = this,
        t1 = _this.data,
        t2 = t1.end,
        t3 = t1.offset;
      if (typeof t3 !== "number")
        return H.iae(t3);
      l = t2 - t3 - 1;
      bp = _this.bytePointer;
      t2 = _this.fillOrder;
      if (t2 === 1) {
        t1 = t1.buffer;
        if (typeof bp !== "number")
          return H.iae(bp);
        b = J.$index$asx(t1, t3 + bp);
        if (bp === l)
          next = 0;
        else {
          t1 = _this.data;
          t2 = t1.buffer;
          t1 = t1.offset;
          if (typeof t1 !== "number")
            return t1.$add();
          next = J.$index$asx(t2, t1 + (bp + 1));
        }
      } else if (t2 === 2) {
        t1 = t1.buffer;
        if (typeof bp !== "number")
          return H.iae(bp);
        t3 = J.$index$asx(t1, t3 + bp);
        if (typeof t3 !== "number")
          return t3.$and();
        b = C.List_VvJ[t3 & 255];
        if (bp === l)
          next = 0;
        else {
          t1 = _this.data;
          t2 = t1.buffer;
          t1 = t1.offset;
          if (typeof t1 !== "number")
            return t1.$add();
          t1 = J.$index$asx(t2, t1 + (bp + 1));
          if (typeof t1 !== "number")
            return t1.$and();
          next = C.List_VvJ[t1 & 255];
        }
      } else
        throw H.wrapException(K.ImageException$("TIFFFaxDecoder7"));
      t1 = _this.bitPointer;
      if (typeof t1 !== "number")
        return H.iae(t1);
      bitsLeft = 8 - t1;
      bitsFromNextByte = bitsToGet - bitsLeft;
      shift = bitsLeft - bitsToGet;
      if (shift >= 0) {
        if (bitsLeft < 0 || bitsLeft >= 9)
          return H.ioore(C.List_knt, bitsLeft);
        t2 = C.List_knt[bitsLeft];
        if (typeof b !== "number")
          return b.$and();
        i1 = C.JSInt_methods._shrReceiverPositive$1(b & t2, shift);
        t1 += bitsToGet;
        _this.bitPointer = t1;
        if (t1 === 8) {
          _this.bitPointer = 0;
          t1 = _this.bytePointer;
          if (typeof t1 !== "number")
            return t1.$add();
          _this.bytePointer = t1 + 1;
        }
      } else {
        if (bitsLeft < 0 || bitsLeft >= 9)
          return H.ioore(C.List_knt, bitsLeft);
        t1 = C.List_knt[bitsLeft];
        if (typeof b !== "number")
          return b.$and();
        i1 = C.JSInt_methods.$shl(b & t1, -shift);
        if (bitsFromNextByte < 0 || bitsFromNextByte >= 9)
          return H.ioore(C.List_knt0, bitsFromNextByte);
        t1 = C.List_knt0[bitsFromNextByte];
        if (typeof next !== "number")
          return next.$and();
        i1 = (i1 | C.JSInt_methods._shrReceiverPositive$1(next & t1, 8 - bitsFromNextByte)) >>> 0;
        t1 = _this.bytePointer;
        if (typeof t1 !== "number")
          return t1.$add();
        _this.bytePointer = t1 + 1;
        _this.bitPointer = bitsFromNextByte;
      }
      return i1;
    },
    _updatePointer$1: function(bitsToMoveBack) {
      var i, _this = this,
        t1 = _this.bitPointer;
      if (typeof t1 !== "number")
        return t1.$sub();
      i = t1 - bitsToMoveBack;
      if (i < 0) {
        t1 = _this.bytePointer;
        if (typeof t1 !== "number")
          return t1.$sub();
        _this.bytePointer = t1 - 1;
        _this.bitPointer = 8 + i;
      } else
        _this.bitPointer = i;
    },
    set$prevChangingElems: function(prevChangingElems) {
      this.prevChangingElems = type$.legacy_List_legacy_int._as(prevChangingElems);
    },
    set$currChangingElems: function(currChangingElems) {
      this.currChangingElems = type$.legacy_List_legacy_int._as(currChangingElems);
    }
  };
  U.TiffImage.prototype = {
    TiffImage$1: function(p) {
      var t1, i, tag, type, numValues, entry, t2, len, t3, l, v, t0, _this = this,
        p3 = Z.InputBuffer$from(p, null, 0),
        numDirEntries = p.readUint16$0();
      for (t1 = _this.tags, i = 0; i < numDirEntries; ++i) {
        tag = p.readUint16$0();
        type = p.readUint16$0();
        numValues = p.readUint32$0();
        entry = new G.TiffEntry(tag, type, numValues);
        if (type < 13 && type > 0) {
          if (type >= 14)
            return H.ioore(C.List_yYQ, type);
          t2 = C.List_yYQ[type];
        } else
          t2 = 0;
        if (numValues * t2 > 4)
          entry.valueOffset = p.readUint32$0();
        else {
          t2 = p.offset;
          entry.valueOffset = t2;
          if (typeof t2 !== "number")
            return t2.$add();
          p.offset = t2 + 4;
        }
        t1.$indexSet(0, tag, entry);
        if (tag === 256) {
          p3.offset = entry.valueOffset;
          _this.width = entry._readValue$1(p3);
        } else if (tag === 257) {
          p3.offset = entry.valueOffset;
          _this.height = entry._readValue$1(p3);
        } else if (tag === 262) {
          p3.offset = entry.valueOffset;
          _this.photometricType = entry._readValue$1(p3);
        } else if (tag === 259) {
          p3.offset = entry.valueOffset;
          _this.compression = entry._readValue$1(p3);
        } else if (tag === 258) {
          p3.offset = entry.valueOffset;
          _this.bitsPerSample = entry._readValue$1(p3);
        } else if (tag === 277) {
          p3.offset = entry.valueOffset;
          _this.samplesPerPixel = entry._readValue$1(p3);
        } else if (tag === 317) {
          p3.offset = entry.valueOffset;
          _this.predictor = entry._readValue$1(p3);
        } else if (tag === 339) {
          p3.offset = entry.valueOffset;
          _this.sampleFormat = entry._readValue$1(p3);
        } else if (tag === 320) {
          _this.set$colorMap(entry.readValues$1(p3));
          _this.colorMapRed = 0;
          t2 = _this.colorMap.length / 3 | 0;
          _this.colorMapGreen = t2;
          _this.colorMapBlue = t2 * 2;
        }
      }
      if (_this.width == null || _this.height == null || _this.bitsPerSample == null || _this.compression == null)
        return;
      t2 = _this.colorMap;
      if (t2 != null && _this.bitsPerSample === 8)
        for (len = t2.length, i = 0; i < len; ++i) {
          t2 = _this.colorMap;
          if (i >= t2.length)
            return H.ioore(t2, i);
          t3 = t2[i];
          if (typeof t3 !== "number")
            return t3.$shr();
          C.JSArray_methods.$indexSet(t2, i, C.JSInt_methods._shrOtherPositive$1(t3, 8));
        }
      if (_this.photometricType === 0)
        _this.isWhiteZero = true;
      if (t1.containsKey$1(324)) {
        _this.tileWidth = _this._readTag$2(p3, 322);
        _this.tileHeight = _this._readTag$2(p3, 323);
        _this.set$tileOffsets(_this._readTagList$2(p3, 324));
        _this.set$tileByteCounts(_this._readTagList$2(p3, 325));
      } else {
        _this.tileWidth = _this._readTag$3(p3, 322, _this.width);
        if (!t1.containsKey$1(278))
          _this.tileHeight = _this._readTag$3(p3, 323, _this.height);
        else {
          l = _this._readTag$2(p3, 278);
          if (l === -1)
            _this.tileHeight = _this.height;
          else
            _this.tileHeight = l;
        }
        _this.set$tileOffsets(_this._readTagList$2(p3, 273));
        _this.set$tileByteCounts(_this._readTagList$2(p3, 279));
      }
      t2 = _this.width;
      t3 = _this.tileWidth;
      if (typeof t2 !== "number")
        return t2.$add();
      if (typeof t3 !== "number")
        return H.iae(t3);
      _this.tilesX = C.JSInt_methods.$tdiv(t2 + t3 - 1, t3);
      t3 = _this.height;
      t2 = _this.tileHeight;
      if (typeof t3 !== "number")
        return t3.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      _this.tilesY = C.JSInt_methods.$tdiv(t3 + t2 - 1, t2);
      t2 = _this.samplesPerPixel;
      if (typeof t2 !== "number")
        return H.iae(t2);
      _this.fillOrder = _this._readTag$3(p3, 266, 1);
      _this.t4Options = _this._readTag$3(p3, 292, 0);
      _this.t6Options = _this._readTag$3(p3, 293, 0);
      _this._readTag$3(p3, 338, 0);
      switch (_this.photometricType) {
        case 0:
        case 1:
          t1 = _this.bitsPerSample;
          if (t1 === 1 && _this.samplesPerPixel === 1)
            _this.imageType = 0;
          else if (t1 === 4 && _this.samplesPerPixel === 1)
            _this.imageType = 1;
          else {
            if (typeof t1 !== "number")
              return t1.$mod();
            if (C.JSInt_methods.$mod(t1, 8) === 0) {
              t1 = _this.samplesPerPixel;
              if (t1 === 1)
                _this.imageType = 2;
              else if (t1 === 2)
                _this.imageType = 3;
              else
                _this.imageType = 8;
            }
          }
          break;
        case 2:
          t1 = _this.bitsPerSample;
          if (typeof t1 !== "number")
            return t1.$mod();
          if (C.JSInt_methods.$mod(t1, 8) === 0) {
            t1 = _this.samplesPerPixel;
            if (t1 === 3)
              _this.imageType = 5;
            else if (t1 === 4)
              _this.imageType = 6;
            else
              _this.imageType = 8;
          }
          break;
        case 3:
          if (_this.samplesPerPixel === 1) {
            t1 = _this.bitsPerSample;
            t1 = t1 === 4 || t1 === 8 || t1 === 16;
          } else
            t1 = false;
          if (t1)
            _this.imageType = 4;
          break;
        case 4:
          if (_this.bitsPerSample === 1 && _this.samplesPerPixel === 1)
            _this.imageType = 0;
          break;
        case 6:
          if (_this.compression === 7 && _this.bitsPerSample === 8 && _this.samplesPerPixel === 3)
            _this.imageType = 5;
          else {
            if (t1.containsKey$1(530)) {
              v = t1.$index(0, 530).readValues$1(p3);
              t1 = v.length;
              if (0 >= t1)
                return H.ioore(v, 0);
              t2 = _this.chromaSubH = v[0];
              if (1 >= t1)
                return H.ioore(v, 1);
              t1 = _this.chromaSubV = v[1];
              t0 = t2;
              t2 = t1;
              t1 = t0;
            } else {
              _this.chromaSubV = _this.chromaSubH = 2;
              t1 = 2;
              t2 = 2;
            }
            if (typeof t1 !== "number")
              return t1.$mul();
            if (typeof t2 !== "number")
              return H.iae(t2);
            if (t1 * t2 === 1)
              _this.imageType = 8;
            else if (_this.bitsPerSample === 8 && _this.samplesPerPixel === 3)
              _this.imageType = 7;
          }
          break;
        default:
          t1 = _this.bitsPerSample;
          if (typeof t1 !== "number")
            return t1.$mod();
          if (C.JSInt_methods.$mod(t1, 8) === 0)
            _this.imageType = 8;
          break;
      }
    },
    decode$1: function(p) {
      var tileY, ti, t1, tileX, _this = this;
      _this.image = U.Image$(_this.width, _this.height, C.Channels_1, null, null);
      tileY = 0;
      ti = 0;
      while (true) {
        t1 = _this.tilesY;
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(tileY < t1))
          break;
        tileX = 0;
        while (true) {
          t1 = _this.tilesX;
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(tileX < t1))
            break;
          _this._decodeTile$3(p, tileX, tileY);
          ++tileX;
          ++ti;
        }
        ++tileY;
      }
      return _this.image;
    },
    _decodeTile$3: function(p, tileX, tileY) {
      var byteCount, bdata, decoder, e, t1, tileIndex, outX, t2, outY, t3, bytesInThisTile, exception, j, count, len, i, t4, t5, py, pi, y, px, x, sample, gray, c, pi0, gray16, gray160, alpha16, alpha160, fg, t6, r, g, b, ri, gi, bi, r16, r160, g16, b16, a, g160, b160, a16, a160, _this = this, _null = null;
      if (_this.imageType === 0) {
        _this._decodeBilevelTile$3(p, tileX, tileY);
        return;
      }
      t1 = _this.tilesX;
      if (typeof t1 !== "number")
        return H.iae(t1);
      tileIndex = tileY * t1 + tileX;
      t1 = _this.tileOffsets;
      if (tileIndex < 0 || tileIndex >= t1.length)
        return H.ioore(t1, tileIndex);
      p.offset = t1[tileIndex];
      t1 = _this.tileWidth;
      if (typeof t1 !== "number")
        return H.iae(t1);
      outX = tileX * t1;
      t2 = _this.tileHeight;
      if (typeof t2 !== "number")
        return H.iae(t2);
      outY = tileY * t2;
      t3 = _this.tileByteCounts;
      if (tileIndex >= t3.length)
        return H.ioore(t3, tileIndex);
      byteCount = t3[tileIndex];
      t3 = _this.samplesPerPixel;
      if (typeof t3 !== "number")
        return H.iae(t3);
      bytesInThisTile = t1 * t2 * t3;
      t1 = _this.bitsPerSample;
      t2 = t1 === 16;
      if (t2)
        bytesInThisTile *= 2;
      else if (t1 === 32)
        bytesInThisTile *= 4;
      bdata = null;
      if (t1 === 8 || t2 || t1 === 32 || t1 === 64) {
        t1 = _this.compression;
        if (t1 === 1)
          bdata = p;
        else if (t1 === 5) {
          bdata = Z.InputBuffer$(new Uint8Array(bytesInThisTile), false, _null, 0);
          decoder = new G.LzwDecoder(new Uint8Array(4096));
          try {
            decoder.decode$2(Z.InputBuffer$from(p, byteCount, 0), bdata.buffer);
          } catch (exception) {
            e = H.unwrapException(exception);
            P.print(e);
          }
          if (_this.predictor === 2) {
            j = 0;
            while (true) {
              t1 = _this.tileHeight;
              if (typeof t1 !== "number")
                return H.iae(t1);
              if (!(j < t1))
                break;
              t1 = _this.samplesPerPixel;
              t2 = _this.tileWidth;
              if (typeof t2 !== "number")
                return H.iae(t2);
              if (typeof t1 !== "number")
                return t1.$mul();
              count = t1 * (j * t2 + 1);
              for (len = t2 * t1, i = t1; i < len; ++i) {
                t1 = bdata;
                t2 = t1.buffer;
                t3 = t1.offset;
                if (typeof t3 !== "number")
                  return t3.$add();
                t3 = J.$index$asx(t2, t3 + count);
                t2 = bdata;
                t4 = _this.samplesPerPixel;
                if (typeof t4 !== "number")
                  return H.iae(t4);
                t5 = t2.buffer;
                t2 = t2.offset;
                if (typeof t2 !== "number")
                  return t2.$add();
                t4 = J.$index$asx(t5, t2 + (count - t4));
                if (typeof t3 !== "number")
                  return t3.$add();
                if (typeof t4 !== "number")
                  return H.iae(t4);
                t2 = t1.buffer;
                t1 = t1.offset;
                if (typeof t1 !== "number")
                  return t1.$add();
                J.$indexSet$ax(t2, t1 + count, t3 + t4);
                ++count;
              }
              ++j;
            }
          }
        } else if (t1 === 32773) {
          bdata = Z.InputBuffer$(new Uint8Array(bytesInThisTile), false, _null, 0);
          _this._decodePackbits$3(p, bytesInThisTile, bdata.buffer);
        } else if (t1 === 32946) {
          t1 = S.Inflate$(p.toList$2(0, 0, byteCount)).output;
          bdata = Z.InputBuffer$(type$.legacy_List_legacy_int._as(H.NativeUint8List_NativeUint8List$view(t1._output_stream$_buffer.buffer, 0, t1._output_stream$_length)), false, _null, 0);
        } else if (t1 === 8)
          bdata = Z.InputBuffer$(new G._ZLibDecoder().decodeBuffer$2$verify(T.InputStream$(type$.legacy_List_legacy_int._as(p.toList$2(0, 0, byteCount)), 1, _null, 0), false), false, _null, 0);
        else if (t1 === 6) {
          if (_this.image == null)
            _this.image = U.Image$(_this.width, _this.height, C.Channels_1, _null, _null);
          _this._jpegToImage$6(new Z.JpegDecoder().decodeImage$1(p.toList$2(0, 0, byteCount)), _this.image, outX, outY, _this.tileWidth, _this.tileHeight);
          if (_this.hdrImage != null) {
            t1 = new F.HdrImage(P.LinkedHashMap_LinkedHashMap$_empty(type$.legacy_String, type$.legacy_HdrSlice));
            t1.HdrImage$fromImage$1(_this.image);
            _this.hdrImage = t1;
          }
          return;
        } else
          throw H.wrapException(K.ImageException$("Unsupported Compression Type: " + H.S(t1)));
        if (bdata == null)
          return;
        py = outY;
        pi = 0;
        y = 0;
        while (true) {
          t1 = _this.tileHeight;
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (y < t1) {
            t1 = _this.height;
            if (typeof t1 !== "number")
              return H.iae(t1);
            t1 = py < t1;
          } else
            t1 = false;
          if (!t1)
            break;
          px = outX;
          x = 0;
          while (true) {
            t1 = _this.tileWidth;
            if (typeof t1 !== "number")
              return H.iae(t1);
            if (x < t1) {
              t1 = _this.width;
              if (typeof t1 !== "number")
                return H.iae(t1);
              t1 = px < t1;
            } else
              t1 = false;
            if (!t1)
              break;
            t1 = _this.samplesPerPixel;
            if (t1 === 1)
              if (_this.sampleFormat === 3) {
                t1 = _this.bitsPerSample;
                if (t1 === 32) {
                  t1 = bdata.readUint32$0();
                  $.$get$__uint32()[0] = t1;
                  t1 = $.$get$__uint32ToFloat32();
                  if (0 >= t1.length)
                    return H.ioore(t1, 0);
                  sample = t1[0];
                } else if (t1 === 64)
                  sample = bdata.readFloat64$0();
                else if (t1 === 16) {
                  t1 = bdata.readUint16$0();
                  if ($.Half__toFloatFloat32 == null)
                    Q.Half__initialize();
                  t2 = $.Half__toFloatFloat32;
                  if (t1 >= t2.length)
                    return H.ioore(t2, t1);
                  sample = t2[t1];
                } else
                  sample = 0;
                t1 = _this.hdrImage;
                if (t1 != null) {
                  t1 = t1.red;
                  if (t1 != null)
                    t1.setFloat$3(px, py, sample);
                }
                if (_this.image != null) {
                  gray = C.JSNumber_methods.toInt$0(C.JSNumber_methods.clamp$2(sample * 255, 0, 255));
                  if (_this.photometricType === 3 && _this.colorMap != null) {
                    t1 = _this.colorMap;
                    t2 = _this.colorMapRed;
                    if (typeof t2 !== "number")
                      return t2.$add();
                    t2 += gray;
                    t3 = t1.length;
                    if (t2 < 0 || t2 >= t3)
                      return H.ioore(t1, t2);
                    t2 = t1[t2];
                    t4 = _this.colorMapGreen;
                    if (typeof t4 !== "number")
                      return t4.$add();
                    t4 += gray;
                    if (t4 < 0 || t4 >= t3)
                      return H.ioore(t1, t4);
                    t4 = t1[t4];
                    t5 = _this.colorMapBlue;
                    if (typeof t5 !== "number")
                      return t5.$add();
                    t5 += gray;
                    if (t5 < 0 || t5 >= t3)
                      return H.ioore(t1, t5);
                    t5 = t1[t5];
                    c = (C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(255, 0, 255)) << 24 | C.JSNumber_methods.toInt$0(J.clamp$2$n(t5, 0, 255)) << 16 | C.JSNumber_methods.toInt$0(J.clamp$2$n(t4, 0, 255)) << 8 | C.JSNumber_methods.toInt$0(J.clamp$2$n(t2, 0, 255))) >>> 0;
                  } else
                    c = (C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(255, 0, 255)) << 24 | C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(gray, 0, 255)) << 16 | C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(gray, 0, 255)) << 8 | C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(gray, 0, 255))) >>> 0;
                  t1 = _this.image;
                  t2 = t1.data;
                  t1 = t1.width;
                  if (typeof t1 !== "number")
                    return H.iae(t1);
                  t1 = py * t1 + px;
                  if (t1 < 0 || t1 >= t2.length)
                    return H.ioore(t2, t1);
                  t2[t1] = c;
                }
              } else {
                t1 = bdata;
                pi0 = pi + 1;
                t2 = t1.buffer;
                t1 = t1.offset;
                if (typeof t1 !== "number")
                  return t1.$add();
                gray = J.$index$asx(t2, t1 + pi);
                if (_this.bitsPerSample === 16) {
                  pi = pi0 + 1;
                  if (!p.bigEndian) {
                    t1 = bdata;
                    t2 = t1.buffer;
                    t1 = t1.offset;
                    if (typeof t1 !== "number")
                      return t1.$add();
                    t1 = J.$index$asx(t2, t1 + pi0);
                    if (typeof t1 !== "number")
                      return t1.$shl();
                    if (typeof gray !== "number")
                      return H.iae(gray);
                    gray16 = (t1 << 8 | gray) >>> 0;
                    gray = t1;
                  } else {
                    if (typeof gray !== "number")
                      return gray.$shl();
                    t1 = bdata;
                    t2 = t1.buffer;
                    t1 = t1.offset;
                    if (typeof t1 !== "number")
                      return t1.$add();
                    t1 = J.$index$asx(t2, t1 + pi0);
                    if (typeof t1 !== "number")
                      return H.iae(t1);
                    gray16 = (gray << 8 | t1) >>> 0;
                  }
                } else {
                  gray16 = gray;
                  pi = pi0;
                }
                if (_this.photometricType === 0) {
                  if (typeof gray !== "number")
                    return H.iae(gray);
                  gray = 255 - gray;
                  if (typeof gray16 !== "number")
                    return H.iae(gray16);
                  gray16 = 65535 - gray16;
                }
                t1 = _this.hdrImage;
                if (t1 != null) {
                  if (typeof gray16 !== "number")
                    return gray16.$div();
                  t1 = t1.red;
                  if (t1 != null)
                    t1.setFloat$3(px, py, gray16 / 65535);
                }
                if (_this.image != null) {
                  if (_this.photometricType === 3 && _this.colorMap != null) {
                    t1 = _this.colorMap;
                    t2 = _this.colorMapRed;
                    if (typeof t2 !== "number")
                      return t2.$add();
                    if (typeof gray !== "number")
                      return H.iae(gray);
                    t2 += gray;
                    t3 = t1.length;
                    if (t2 < 0 || t2 >= t3)
                      return H.ioore(t1, t2);
                    t2 = t1[t2];
                    t4 = _this.colorMapGreen;
                    if (typeof t4 !== "number")
                      return t4.$add();
                    t4 += gray;
                    if (t4 < 0 || t4 >= t3)
                      return H.ioore(t1, t4);
                    t4 = t1[t4];
                    t5 = _this.colorMapBlue;
                    if (typeof t5 !== "number")
                      return t5.$add();
                    t5 += gray;
                    if (t5 < 0 || t5 >= t3)
                      return H.ioore(t1, t5);
                    t5 = t1[t5];
                    c = (C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(255, 0, 255)) << 24 | C.JSNumber_methods.toInt$0(J.clamp$2$n(t5, 0, 255)) << 16 | C.JSNumber_methods.toInt$0(J.clamp$2$n(t4, 0, 255)) << 8 | C.JSNumber_methods.toInt$0(J.clamp$2$n(t2, 0, 255))) >>> 0;
                  } else
                    c = (C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(255, 0, 255)) << 24 | C.JSNumber_methods.toInt$0(J.clamp$2$n(gray, 0, 255)) << 16 | C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(gray, 0, 255)) << 8 | C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(gray, 0, 255))) >>> 0;
                  t1 = _this.image;
                  t2 = t1.data;
                  t1 = t1.width;
                  if (typeof t1 !== "number")
                    return H.iae(t1);
                  t1 = py * t1 + px;
                  if (t1 < 0 || t1 >= t2.length)
                    return H.ioore(t2, t1);
                  t2[t1] = c;
                }
              }
            else if (t1 === 2) {
              t1 = bdata;
              pi0 = pi + 1;
              t2 = t1.buffer;
              t1 = t1.offset;
              if (typeof t1 !== "number")
                return t1.$add();
              gray16 = J.$index$asx(t2, t1 + pi);
              if (_this.bitsPerSample === 16) {
                if (typeof gray16 !== "number")
                  return gray16.$shl();
                t1 = bdata;
                pi = pi0 + 1;
                t2 = t1.buffer;
                t1 = t1.offset;
                if (typeof t1 !== "number")
                  return t1.$add();
                t1 = J.$index$asx(t2, t1 + pi0);
                if (typeof t1 !== "number")
                  return H.iae(t1);
                gray160 = (gray16 << 8 | t1) >>> 0;
              } else {
                gray160 = gray16;
                pi = pi0;
              }
              t1 = bdata;
              pi0 = pi + 1;
              t2 = t1.buffer;
              t1 = t1.offset;
              if (typeof t1 !== "number")
                return t1.$add();
              alpha16 = J.$index$asx(t2, t1 + pi);
              if (_this.bitsPerSample === 16) {
                if (typeof alpha16 !== "number")
                  return alpha16.$shl();
                t1 = bdata;
                pi = pi0 + 1;
                t2 = t1.buffer;
                t1 = t1.offset;
                if (typeof t1 !== "number")
                  return t1.$add();
                t1 = J.$index$asx(t2, t1 + pi0);
                if (typeof t1 !== "number")
                  return H.iae(t1);
                alpha160 = (alpha16 << 8 | t1) >>> 0;
              } else {
                alpha160 = alpha16;
                pi = pi0;
              }
              t1 = _this.hdrImage;
              if (t1 != null) {
                if (typeof gray160 !== "number")
                  return gray160.$div();
                fg = gray160 / 65535;
                if (typeof alpha160 !== "number")
                  return alpha160.$div();
                t1 = t1.red;
                if (t1 != null)
                  t1.setFloat$3(px, py, fg);
                t1 = _this.hdrImage.green;
                if (t1 != null)
                  t1.setFloat$3(px, py, fg);
              }
              if (_this.image != null) {
                t1 = C.JSNumber_methods.toInt$0(J.clamp$2$n(alpha16, 0, 255));
                t2 = C.JSNumber_methods.toInt$0(J.clamp$2$n(gray16, 0, 255));
                t3 = C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(gray16, 0, 255));
                t4 = C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(gray16, 0, 255));
                t5 = _this.image;
                t6 = t5.data;
                t5 = t5.width;
                if (typeof t5 !== "number")
                  return H.iae(t5);
                t5 = py * t5 + px;
                if (t5 < 0 || t5 >= t6.length)
                  return H.ioore(t6, t5);
                t6[t5] = (t1 << 24 | t2 << 16 | t3 << 8 | t4) >>> 0;
              }
            } else if (t1 === 3)
              if (_this.sampleFormat === 3) {
                t1 = _this.bitsPerSample;
                if (t1 === 32) {
                  t1 = bdata.readUint32$0();
                  t2 = $.$get$__uint32();
                  t2[0] = t1;
                  t1 = $.$get$__uint32ToFloat32();
                  if (0 >= t1.length)
                    return H.ioore(t1, 0);
                  r = t1[0];
                  t2[0] = bdata.readUint32$0();
                  g = t1[0];
                  t2[0] = bdata.readUint32$0();
                  b = t1[0];
                } else if (t1 === 64) {
                  r = bdata.readFloat64$0();
                  g = 0;
                  b = 0;
                } else if (t1 === 16) {
                  t1 = bdata.readUint16$0();
                  if ($.Half__toFloatFloat32 == null)
                    Q.Half__initialize();
                  t2 = $.Half__toFloatFloat32;
                  if (t1 >= t2.length)
                    return H.ioore(t2, t1);
                  r = t2[t1];
                  t1 = bdata.readUint16$0();
                  if ($.Half__toFloatFloat32 == null)
                    Q.Half__initialize();
                  t2 = $.Half__toFloatFloat32;
                  if (t1 >= t2.length)
                    return H.ioore(t2, t1);
                  g = t2[t1];
                  t1 = bdata.readUint16$0();
                  if ($.Half__toFloatFloat32 == null)
                    Q.Half__initialize();
                  t2 = $.Half__toFloatFloat32;
                  if (t1 >= t2.length)
                    return H.ioore(t2, t1);
                  b = t2[t1];
                } else {
                  r = 0;
                  g = 0;
                  b = 0;
                }
                t1 = _this.hdrImage;
                if (t1 != null) {
                  t1 = t1.red;
                  if (t1 != null)
                    t1.setFloat$3(px, py, r);
                  t1 = _this.hdrImage.green;
                  if (t1 != null)
                    t1.setFloat$3(px, py, g);
                  t1 = _this.hdrImage.blue;
                  if (t1 != null)
                    t1.setFloat$3(px, py, b);
                }
                if (_this.image != null) {
                  ri = C.JSNumber_methods.toInt$0(C.JSNumber_methods.clamp$2(r * 255, 0, 255));
                  gi = C.JSNumber_methods.toInt$0(C.JSNumber_methods.clamp$2(g * 255, 0, 255));
                  bi = C.JSNumber_methods.toInt$0(C.JSNumber_methods.clamp$2(b * 255, 0, 255));
                  t1 = C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(255, 0, 255));
                  t2 = C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(bi, 0, 255));
                  t3 = C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(gi, 0, 255));
                  t4 = C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(ri, 0, 255));
                  t5 = _this.image;
                  t6 = t5.data;
                  t5 = t5.width;
                  if (typeof t5 !== "number")
                    return H.iae(t5);
                  t5 = py * t5 + px;
                  if (t5 < 0 || t5 >= t6.length)
                    return H.ioore(t6, t5);
                  t6[t5] = (t1 << 24 | t2 << 16 | t3 << 8 | t4) >>> 0;
                }
              } else {
                t1 = bdata;
                pi0 = pi + 1;
                t2 = t1.buffer;
                t1 = t1.offset;
                if (typeof t1 !== "number")
                  return t1.$add();
                r16 = J.$index$asx(t2, t1 + pi);
                if (_this.bitsPerSample === 16) {
                  if (typeof r16 !== "number")
                    return r16.$shl();
                  t1 = bdata;
                  pi = pi0 + 1;
                  t2 = t1.buffer;
                  t1 = t1.offset;
                  if (typeof t1 !== "number")
                    return t1.$add();
                  t1 = J.$index$asx(t2, t1 + pi0);
                  if (typeof t1 !== "number")
                    return H.iae(t1);
                  r160 = (r16 << 8 | t1) >>> 0;
                } else {
                  r160 = r16;
                  pi = pi0;
                }
                t1 = bdata;
                pi0 = pi + 1;
                t2 = t1.buffer;
                t1 = t1.offset;
                if (typeof t1 !== "number")
                  return t1.$add();
                t1 = J.$index$asx(t2, t1 + pi);
                if (_this.bitsPerSample === 16) {
                  if (typeof r16 !== "number")
                    return r16.$shl();
                  t2 = bdata;
                  pi = pi0 + 1;
                  t3 = t2.buffer;
                  t2 = t2.offset;
                  if (typeof t2 !== "number")
                    return t2.$add();
                  t2 = J.$index$asx(t3, t2 + pi0);
                  if (typeof t2 !== "number")
                    return H.iae(t2);
                  g16 = (r16 << 8 | t2) >>> 0;
                } else {
                  g16 = r16;
                  pi = pi0;
                }
                t2 = bdata;
                pi0 = pi + 1;
                t3 = t2.buffer;
                t2 = t2.offset;
                if (typeof t2 !== "number")
                  return t2.$add();
                t2 = J.$index$asx(t3, t2 + pi);
                if (_this.bitsPerSample === 16) {
                  if (typeof r16 !== "number")
                    return r16.$shl();
                  t3 = bdata;
                  pi = pi0 + 1;
                  t4 = t3.buffer;
                  t3 = t3.offset;
                  if (typeof t3 !== "number")
                    return t3.$add();
                  t3 = J.$index$asx(t4, t3 + pi0);
                  if (typeof t3 !== "number")
                    return H.iae(t3);
                  b16 = (r16 << 8 | t3) >>> 0;
                } else {
                  b16 = r16;
                  pi = pi0;
                }
                t3 = _this.hdrImage;
                if (t3 != null) {
                  if (typeof r160 !== "number")
                    return r160.$div();
                  t3 = t3.red;
                  if (t3 != null)
                    t3.setFloat$3(px, py, r160 / 65535);
                  t3 = _this.hdrImage;
                  if (typeof g16 !== "number")
                    return g16.$div();
                  t3 = t3.green;
                  if (t3 != null)
                    t3.setFloat$3(px, py, g16 / 65535);
                  t3 = _this.hdrImage;
                  if (typeof b16 !== "number")
                    return b16.$div();
                  t3 = t3.blue;
                  if (t3 != null)
                    t3.setFloat$3(px, py, b16 / 65535);
                }
                if (_this.image != null) {
                  t3 = C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(255, 0, 255));
                  t2 = C.JSNumber_methods.toInt$0(J.clamp$2$n(t2, 0, 255));
                  t1 = C.JSNumber_methods.toInt$0(J.clamp$2$n(t1, 0, 255));
                  t4 = C.JSNumber_methods.toInt$0(J.clamp$2$n(r16, 0, 255));
                  t5 = _this.image;
                  t6 = t5.data;
                  t5 = t5.width;
                  if (typeof t5 !== "number")
                    return H.iae(t5);
                  t5 = py * t5 + px;
                  if (t5 < 0 || t5 >= t6.length)
                    return H.ioore(t6, t5);
                  t6[t5] = (t3 << 24 | t2 << 16 | t1 << 8 | t4) >>> 0;
                }
              }
            else {
              if (typeof t1 !== "number")
                return t1.$ge();
              if (t1 >= 4)
                if (_this.sampleFormat === 3) {
                  t1 = _this.bitsPerSample;
                  if (t1 === 32) {
                    t1 = bdata.readUint32$0();
                    t2 = $.$get$__uint32();
                    t2[0] = t1;
                    t1 = $.$get$__uint32ToFloat32();
                    if (0 >= t1.length)
                      return H.ioore(t1, 0);
                    r = t1[0];
                    t2[0] = bdata.readUint32$0();
                    g = t1[0];
                    t2[0] = bdata.readUint32$0();
                    b = t1[0];
                    t2[0] = bdata.readUint32$0();
                    a = t1[0];
                  } else if (t1 === 64) {
                    r = bdata.readFloat64$0();
                    g = 0;
                    b = 0;
                    a = 0;
                  } else if (t1 === 16) {
                    t1 = bdata.readUint16$0();
                    if ($.Half__toFloatFloat32 == null)
                      Q.Half__initialize();
                    t2 = $.Half__toFloatFloat32;
                    if (t1 >= t2.length)
                      return H.ioore(t2, t1);
                    r = t2[t1];
                    t1 = bdata.readUint16$0();
                    if ($.Half__toFloatFloat32 == null)
                      Q.Half__initialize();
                    t2 = $.Half__toFloatFloat32;
                    if (t1 >= t2.length)
                      return H.ioore(t2, t1);
                    g = t2[t1];
                    t1 = bdata.readUint16$0();
                    if ($.Half__toFloatFloat32 == null)
                      Q.Half__initialize();
                    t2 = $.Half__toFloatFloat32;
                    if (t1 >= t2.length)
                      return H.ioore(t2, t1);
                    b = t2[t1];
                    t1 = bdata.readUint16$0();
                    if ($.Half__toFloatFloat32 == null)
                      Q.Half__initialize();
                    t2 = $.Half__toFloatFloat32;
                    if (t1 >= t2.length)
                      return H.ioore(t2, t1);
                    a = t2[t1];
                  } else {
                    r = 0;
                    g = 0;
                    b = 0;
                    a = 0;
                  }
                  t1 = _this.hdrImage;
                  if (t1 != null) {
                    t1 = t1.red;
                    if (t1 != null)
                      t1.setFloat$3(px, py, r);
                    t1 = _this.hdrImage.green;
                    if (t1 != null)
                      t1.setFloat$3(px, py, g);
                    t1 = _this.hdrImage.blue;
                    if (t1 != null)
                      t1.setFloat$3(px, py, b);
                    t1 = _this.hdrImage.alpha;
                    if (t1 != null)
                      t1.setFloat$3(px, py, a);
                  }
                  if (_this.image != null) {
                    ri = C.JSNumber_methods.toInt$0(C.JSNumber_methods.clamp$2(r * 255, 0, 255));
                    gi = C.JSNumber_methods.toInt$0(C.JSNumber_methods.clamp$2(g * 255, 0, 255));
                    bi = C.JSNumber_methods.toInt$0(C.JSNumber_methods.clamp$2(b * 255, 0, 255));
                    t1 = C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(C.JSNumber_methods.toInt$0(C.JSNumber_methods.clamp$2(a * 255, 0, 255)), 0, 255));
                    t2 = C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(bi, 0, 255));
                    t3 = C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(gi, 0, 255));
                    t4 = C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(ri, 0, 255));
                    t5 = _this.image;
                    t6 = t5.data;
                    t5 = t5.width;
                    if (typeof t5 !== "number")
                      return H.iae(t5);
                    t5 = py * t5 + px;
                    if (t5 < 0 || t5 >= t6.length)
                      return H.ioore(t6, t5);
                    t6[t5] = (t1 << 24 | t2 << 16 | t3 << 8 | t4) >>> 0;
                  }
                } else {
                  t1 = bdata;
                  pi0 = pi + 1;
                  t2 = t1.buffer;
                  t1 = t1.offset;
                  if (typeof t1 !== "number")
                    return t1.$add();
                  r16 = J.$index$asx(t2, t1 + pi);
                  if (_this.bitsPerSample === 16) {
                    if (typeof r16 !== "number")
                      return r16.$shl();
                    t1 = bdata;
                    pi = pi0 + 1;
                    t2 = t1.buffer;
                    t1 = t1.offset;
                    if (typeof t1 !== "number")
                      return t1.$add();
                    t1 = J.$index$asx(t2, t1 + pi0);
                    if (typeof t1 !== "number")
                      return H.iae(t1);
                    r160 = (r16 << 8 | t1) >>> 0;
                  } else {
                    r160 = r16;
                    pi = pi0;
                  }
                  t1 = bdata;
                  pi0 = pi + 1;
                  t2 = t1.buffer;
                  t1 = t1.offset;
                  if (typeof t1 !== "number")
                    return t1.$add();
                  g16 = J.$index$asx(t2, t1 + pi);
                  if (_this.bitsPerSample === 16) {
                    if (typeof g16 !== "number")
                      return g16.$shl();
                    t1 = bdata;
                    pi = pi0 + 1;
                    t2 = t1.buffer;
                    t1 = t1.offset;
                    if (typeof t1 !== "number")
                      return t1.$add();
                    t1 = J.$index$asx(t2, t1 + pi0);
                    if (typeof t1 !== "number")
                      return H.iae(t1);
                    g160 = (g16 << 8 | t1) >>> 0;
                  } else {
                    g160 = g16;
                    pi = pi0;
                  }
                  t1 = bdata;
                  pi0 = pi + 1;
                  t2 = t1.buffer;
                  t1 = t1.offset;
                  if (typeof t1 !== "number")
                    return t1.$add();
                  b16 = J.$index$asx(t2, t1 + pi);
                  if (_this.bitsPerSample === 16) {
                    if (typeof b16 !== "number")
                      return b16.$shl();
                    t1 = bdata;
                    pi = pi0 + 1;
                    t2 = t1.buffer;
                    t1 = t1.offset;
                    if (typeof t1 !== "number")
                      return t1.$add();
                    t1 = J.$index$asx(t2, t1 + pi0);
                    if (typeof t1 !== "number")
                      return H.iae(t1);
                    b160 = (b16 << 8 | t1) >>> 0;
                  } else {
                    b160 = b16;
                    pi = pi0;
                  }
                  t1 = bdata;
                  pi0 = pi + 1;
                  t2 = t1.buffer;
                  t1 = t1.offset;
                  if (typeof t1 !== "number")
                    return t1.$add();
                  a16 = J.$index$asx(t2, t1 + pi);
                  if (_this.bitsPerSample === 16) {
                    if (typeof a16 !== "number")
                      return a16.$shl();
                    t1 = bdata;
                    pi = pi0 + 1;
                    t2 = t1.buffer;
                    t1 = t1.offset;
                    if (typeof t1 !== "number")
                      return t1.$add();
                    t1 = J.$index$asx(t2, t1 + pi0);
                    if (typeof t1 !== "number")
                      return H.iae(t1);
                    a160 = (a16 << 8 | t1) >>> 0;
                  } else {
                    a160 = a16;
                    pi = pi0;
                  }
                  t1 = _this.hdrImage;
                  if (t1 != null) {
                    if (typeof r160 !== "number")
                      return r160.$div();
                    t1 = t1.red;
                    if (t1 != null)
                      t1.setFloat$3(px, py, r160 / 65535);
                    t1 = _this.hdrImage;
                    if (typeof g160 !== "number")
                      return g160.$div();
                    t1 = t1.green;
                    if (t1 != null)
                      t1.setFloat$3(px, py, g160 / 65535);
                    t1 = _this.hdrImage;
                    if (typeof b160 !== "number")
                      return b160.$div();
                    t1 = t1.blue;
                    if (t1 != null)
                      t1.setFloat$3(px, py, b160 / 65535);
                    t1 = _this.hdrImage;
                    if (typeof a160 !== "number")
                      return a160.$div();
                    t1 = t1.alpha;
                    if (t1 != null)
                      t1.setFloat$3(px, py, a160 / 65535);
                  }
                  if (_this.image != null) {
                    t1 = C.JSNumber_methods.toInt$0(J.clamp$2$n(a16, 0, 255));
                    t2 = C.JSNumber_methods.toInt$0(J.clamp$2$n(b16, 0, 255));
                    t3 = C.JSNumber_methods.toInt$0(J.clamp$2$n(g16, 0, 255));
                    t4 = C.JSNumber_methods.toInt$0(J.clamp$2$n(r16, 0, 255));
                    t5 = _this.image;
                    t6 = t5.data;
                    t5 = t5.width;
                    if (typeof t5 !== "number")
                      return H.iae(t5);
                    t5 = py * t5 + px;
                    if (t5 < 0 || t5 >= t6.length)
                      return H.ioore(t6, t5);
                    t6[t5] = (t1 << 24 | t2 << 16 | t3 << 8 | t4) >>> 0;
                  }
                }
            }
            ++x;
            ++px;
          }
          ++y;
          ++py;
        }
      } else
        throw H.wrapException(K.ImageException$("Unsupported bitsPerSample: " + H.S(t1)));
    },
    _jpegToImage$6: function(tile, image, outX, outY, tileWidth, tileHeight) {
      var t1, t2, t3, y, t4, x, t5, t6, t7;
      if (typeof tileHeight !== "number")
        return H.iae(tileHeight);
      t1 = tile.data;
      t2 = tile.width;
      t3 = t1.length;
      y = 0;
      for (; y < tileHeight; ++y) {
        if (typeof tileWidth !== "number")
          return H.iae(tileWidth);
        t4 = y + outY;
        x = 0;
        for (; x < tileWidth; ++x) {
          if (typeof t2 !== "number")
            return H.iae(t2);
          t5 = y * t2 + x;
          if (t5 < 0 || t5 >= t3)
            return H.ioore(t1, t5);
          t5 = t1[t5];
          t6 = image.data;
          t7 = image.width;
          if (typeof t7 !== "number")
            return H.iae(t7);
          t7 = t4 * t7 + (x + outX);
          if (t7 < 0 || t7 >= t6.length)
            return H.ioore(t6, t7);
          t6[t7] = t5;
        }
      }
    },
    _decodeBilevelTile$3: function(p, tileX, tileY) {
      var bdata, tileIndex, outX, t2, outY, t3, byteCount, bytesInThisTile, j, count, i, t4, t5, exception, br, white, black, py, y, px, x, _this = this, _null = null, _4278190080 = 4278190080, _4294967295 = 4294967295,
        t1 = _this.tilesX;
      if (typeof t1 !== "number")
        return H.iae(t1);
      tileIndex = tileY * t1 + tileX;
      t1 = _this.tileOffsets;
      if (tileIndex < 0 || tileIndex >= t1.length)
        return H.ioore(t1, tileIndex);
      p.offset = t1[tileIndex];
      t1 = _this.tileWidth;
      if (typeof t1 !== "number")
        return H.iae(t1);
      outX = tileX * t1;
      t2 = _this.tileHeight;
      if (typeof t2 !== "number")
        return H.iae(t2);
      outY = tileY * t2;
      t3 = _this.tileByteCounts;
      if (tileIndex >= t3.length)
        return H.ioore(t3, tileIndex);
      byteCount = t3[tileIndex];
      bdata = null;
      t3 = _this.compression;
      if (t3 === 32773) {
        bytesInThisTile = C.JSInt_methods.$mod(t1, 8) === 0 ? C.JSInt_methods._tdivFast$1(t1, 8) * t2 : (C.JSInt_methods._tdivFast$1(t1, 8) + 1) * t2;
        bdata = Z.InputBuffer$(new Uint8Array(t1 * t2), false, _null, 0);
        _this._decodePackbits$3(p, bytesInThisTile, bdata.buffer);
      } else if (t3 === 5) {
        bdata = Z.InputBuffer$(new Uint8Array(t1 * t2), false, _null, 0);
        new G.LzwDecoder(new Uint8Array(4096)).decode$2(Z.InputBuffer$from(p, byteCount, 0), bdata.buffer);
        if (_this.predictor === 2) {
          j = 0;
          while (true) {
            t1 = _this.height;
            if (typeof t1 !== "number")
              return H.iae(t1);
            if (!(j < t1))
              break;
            t1 = _this.samplesPerPixel;
            t2 = _this.width;
            if (typeof t2 !== "number")
              return H.iae(t2);
            if (typeof t1 !== "number")
              return t1.$mul();
            count = t1 * (j * t2 + 1);
            i = t1;
            while (true) {
              t1 = _this.width;
              t2 = _this.samplesPerPixel;
              if (typeof t1 !== "number")
                return t1.$mul();
              if (typeof t2 !== "number")
                return H.iae(t2);
              if (!(i < t1 * t2))
                break;
              t1 = bdata;
              t2 = t1.buffer;
              t3 = t1.offset;
              if (typeof t3 !== "number")
                return t3.$add();
              t3 = J.$index$asx(t2, t3 + count);
              t2 = bdata;
              t4 = _this.samplesPerPixel;
              if (typeof t4 !== "number")
                return H.iae(t4);
              t5 = t2.buffer;
              t2 = t2.offset;
              if (typeof t2 !== "number")
                return t2.$add();
              t4 = J.$index$asx(t5, t2 + (count - t4));
              if (typeof t3 !== "number")
                return t3.$add();
              if (typeof t4 !== "number")
                return H.iae(t4);
              t2 = t1.buffer;
              t1 = t1.offset;
              if (typeof t1 !== "number")
                return t1.$add();
              J.$indexSet$ax(t2, t1 + count, t3 + t4);
              ++count;
              ++i;
            }
            ++j;
          }
        }
      } else if (t3 === 2) {
        bdata = Z.InputBuffer$(new Uint8Array(t1 * t2), false, _null, 0);
        try {
          A.TiffFaxDecoder$(_this.fillOrder, _this.tileWidth, _this.tileHeight).decode1D$4(bdata, p, 0, _this.tileHeight);
        } catch (exception) {
          H.unwrapException(exception);
        }
      } else if (t3 === 3) {
        bdata = Z.InputBuffer$(new Uint8Array(t1 * t2), false, _null, 0);
        try {
          A.TiffFaxDecoder$(_this.fillOrder, _this.tileWidth, _this.tileHeight).decode2D$5(bdata, p, 0, _this.tileHeight, _this.t4Options);
        } catch (exception) {
          H.unwrapException(exception);
        }
      } else if (t3 === 4) {
        bdata = Z.InputBuffer$(new Uint8Array(t1 * t2), false, _null, 0);
        try {
          A.TiffFaxDecoder$(_this.fillOrder, _this.tileWidth, _this.tileHeight).decodeT6$5(bdata, p, 0, _this.tileHeight, _this.t6Options);
        } catch (exception) {
          H.unwrapException(exception);
        }
      } else if (t3 === 8)
        bdata = Z.InputBuffer$(new G._ZLibDecoder().decodeBuffer$2$verify(T.InputStream$(type$.legacy_List_legacy_int._as(p.toList$2(0, 0, byteCount)), 1, _null, 0), false), false, _null, 0);
      else if (t3 === 32946) {
        t1 = S.Inflate$(p.toList$2(0, 0, byteCount)).output;
        bdata = Z.InputBuffer$(type$.legacy_List_legacy_int._as(H.NativeUint8List_NativeUint8List$view(t1._output_stream$_buffer.buffer, 0, t1._output_stream$_length)), false, _null, 0);
      } else if (t3 === 1)
        bdata = p;
      else
        throw H.wrapException(K.ImageException$("Unsupported Compression Type: " + H.S(t3)));
      if (bdata == null)
        return;
      br = new A.TiffBitReader(bdata);
      t1 = _this.isWhiteZero;
      white = t1 ? _4278190080 : _4294967295;
      black = t1 ? _4294967295 : _4278190080;
      py = outY;
      y = 0;
      while (true) {
        t1 = _this.tileHeight;
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(y < t1))
          break;
        px = outX;
        x = 0;
        while (true) {
          t1 = _this.tileWidth;
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(x < t1))
            break;
          t1 = br.readBits$1(1);
          t2 = _this.image;
          if (t1 === 0) {
            t1 = t2.data;
            t2 = t2.width;
            if (typeof t2 !== "number")
              return H.iae(t2);
            t2 = py * t2 + px;
            if (t2 < 0 || t2 >= t1.length)
              return H.ioore(t1, t2);
            t1[t2] = black;
          } else {
            t1 = t2.data;
            t2 = t2.width;
            if (typeof t2 !== "number")
              return H.iae(t2);
            t2 = py * t2 + px;
            if (t2 < 0 || t2 >= t1.length)
              return H.ioore(t1, t2);
            t1[t2] = white;
          }
          ++x;
          ++px;
        }
        br._bitPos = 0;
        ++y;
        ++py;
      }
    },
    _decodePackbits$3: function(data, arraySize, dst) {
      var t1, srcCount, dstCount, srcCount0, t2, t3, b, i, dstCount0, t4;
      type$.legacy_List_legacy_int._as(dst);
      for (t1 = J.getInterceptor$ax(dst), srcCount = 0, dstCount = 0; dstCount < arraySize;) {
        srcCount0 = srcCount + 1;
        t2 = data.buffer;
        t3 = data.offset;
        if (typeof t3 !== "number")
          return t3.$add();
        t3 = J.$index$asx(t2, t3 + srcCount);
        t2 = $.$get$__uint8();
        (t2 && C.NativeUint8List_methods).$indexSet(t2, 0, t3);
        t3 = $.$get$__uint8ToInt8();
        if (0 >= t3.length)
          return H.ioore(t3, 0);
        b = t3[0];
        if (b >= 0 && b <= 127)
          for (t2 = b + 1, srcCount = srcCount0, i = 0; i < t2; ++i, dstCount = dstCount0, srcCount = srcCount0) {
            dstCount0 = dstCount + 1;
            srcCount0 = srcCount + 1;
            t3 = data.buffer;
            t4 = data.offset;
            if (typeof t4 !== "number")
              return t4.$add();
            t1.$indexSet(dst, dstCount, J.$index$asx(t3, t4 + srcCount));
          }
        else {
          t2 = b <= -1 && b >= -127;
          srcCount = srcCount0 + 1;
          if (t2) {
            t2 = data.buffer;
            t3 = data.offset;
            if (typeof t3 !== "number")
              return t3.$add();
            srcCount0 = J.$index$asx(t2, t3 + srcCount0);
            for (t2 = -b + 1, i = 0; i < t2; ++i, dstCount = dstCount0) {
              dstCount0 = dstCount + 1;
              t1.$indexSet(dst, dstCount, srcCount0);
            }
          }
        }
      }
    },
    _readTag$3: function(p, type, defaultValue) {
      var t1 = this.tags;
      if (!t1.containsKey$1(type))
        return defaultValue;
      t1 = t1.$index(0, type);
      p.offset = t1.valueOffset;
      return t1._readValue$1(p);
    },
    _readTag$2: function(p, type) {
      return this._readTag$3(p, type, 0);
    },
    _readTagList$2: function(p, type) {
      var t1 = this.tags;
      if (!t1.containsKey$1(type))
        return null;
      return t1.$index(0, type).readValues$1(p);
    },
    set$tileOffsets: function(tileOffsets) {
      this.tileOffsets = type$.legacy_List_legacy_int._as(tileOffsets);
    },
    set$tileByteCounts: function(tileByteCounts) {
      this.tileByteCounts = type$.legacy_List_legacy_int._as(tileByteCounts);
    },
    set$colorMap: function(colorMap) {
      this.colorMap = type$.legacy_List_legacy_int._as(colorMap);
    }
  };
  A.TiffInfo.prototype = {};
  G.LzwDecoder.prototype = {
    decode$2: function(p, out) {
      var outLen, t1, t2, code, oldCode, t3, i, t4, _this = this;
      type$.legacy_List_legacy_int._as(out);
      _this.set$_out(out);
      outLen = J.get$length$asx(out);
      _this._outPointer = 0;
      t1 = type$.legacy_Uint8List._as(p.buffer);
      _this._data = t1;
      t2 = _this._dataLength = t1.length;
      _this._bytePointer = p.offset;
      if (0 >= t2)
        return H.ioore(t1, 0);
      if (t1[0] === 0) {
        if (1 >= t2)
          return H.ioore(t1, 1);
        t1 = t1[1] === 1;
      } else
        t1 = false;
      if (t1)
        throw H.wrapException(K.ImageException$("Invalid LZW Data"));
      _this._initializeStringTable$0();
      _this._nextBits = _this._nextData = 0;
      code = _this._getNextCode$0();
      t1 = _this._tiff_lzw_decoder$_buffer;
      oldCode = 0;
      while (true) {
        if (code !== 257) {
          t2 = _this._outPointer;
          if (typeof t2 !== "number")
            return t2.$lt();
          t2 = t2 < outLen;
        } else
          t2 = false;
        if (!t2)
          break;
        if (code === 256) {
          _this._initializeStringTable$0();
          code = _this._getNextCode$0();
          _this._bufferLength = 0;
          if (code === 257)
            break;
          t2 = _this._out;
          t3 = _this._outPointer;
          if (typeof t3 !== "number")
            return t3.$add();
          _this._outPointer = t3 + 1;
          J.$indexSet$ax(t2, t3, code);
          oldCode = code;
        } else {
          t2 = _this._tableIndex;
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (code < t2) {
            _this._getString$1(code);
            t2 = _this._bufferLength;
            if (typeof t2 !== "number")
              return t2.$sub();
            i = t2 - 1;
            for (; i >= 0; --i) {
              t2 = _this._out;
              t3 = _this._outPointer;
              if (typeof t3 !== "number")
                return t3.$add();
              _this._outPointer = t3 + 1;
              if (i >= 4096)
                return H.ioore(t1, i);
              J.$indexSet$ax(t2, t3, t1[i]);
            }
            t2 = _this._bufferLength;
            if (typeof t2 !== "number")
              return t2.$sub();
            --t2;
            if (t2 < 0 || t2 >= 4096)
              return H.ioore(t1, t2);
            _this._addString$2(oldCode, t1[t2]);
          } else {
            _this._getString$1(oldCode);
            t2 = _this._bufferLength;
            if (typeof t2 !== "number")
              return t2.$sub();
            i = t2 - 1;
            for (; i >= 0; --i) {
              t2 = _this._out;
              t3 = _this._outPointer;
              if (typeof t3 !== "number")
                return t3.$add();
              _this._outPointer = t3 + 1;
              if (i >= 4096)
                return H.ioore(t1, i);
              J.$indexSet$ax(t2, t3, t1[i]);
            }
            t2 = _this._out;
            t3 = _this._outPointer;
            if (typeof t3 !== "number")
              return t3.$add();
            _this._outPointer = t3 + 1;
            t4 = _this._bufferLength;
            if (typeof t4 !== "number")
              return t4.$sub();
            --t4;
            if (t4 < 0 || t4 >= 4096)
              return H.ioore(t1, t4);
            J.$indexSet$ax(t2, t3, t1[t4]);
            t4 = _this._bufferLength;
            if (typeof t4 !== "number")
              return t4.$sub();
            --t4;
            if (t4 < 0 || t4 >= 4096)
              return H.ioore(t1, t4);
            _this._addString$2(oldCode, t1[t4]);
          }
          oldCode = code;
        }
        code = _this._getNextCode$0();
      }
    },
    _addString$2: function(string, newString) {
      var _this = this,
        t1 = _this._table;
      (t1 && C.NativeUint8List_methods).$indexSet(t1, _this._tableIndex, newString);
      t1 = _this._prefix;
      (t1 && C.NativeUint32List_methods).$indexSet(t1, _this._tableIndex, string);
      t1 = _this._tableIndex;
      if (typeof t1 !== "number")
        return t1.$add();
      t1 = _this._tableIndex = t1 + 1;
      if (t1 === 511)
        _this._bitsToGet = 10;
      else if (t1 === 1023)
        _this._bitsToGet = 11;
      else if (t1 === 2047)
        _this._bitsToGet = 12;
    },
    _getString$1: function(code) {
      var t1, t2, t3, c, t4, t5, t6, _this = this;
      _this._bufferLength = 0;
      t1 = _this._tiff_lzw_decoder$_buffer;
      _this._bufferLength = 1;
      t2 = _this._table;
      t2.length;
      if (code >= 4096)
        return H.ioore(t2, code);
      t1[0] = t2[code];
      t3 = _this._prefix;
      c = t3[code];
      for (t4 = 1; c !== 4098; t4 = t5) {
        t5 = t4 + 1;
        _this._bufferLength = t5;
        t2.length;
        if (c < 0 || c >= 4096)
          return H.ioore(t2, c);
        t6 = t2[c];
        if (t4 >= 4096)
          return H.ioore(t1, t4);
        t1[t4] = t6;
        c = t3[c];
      }
    },
    _getNextCode$0: function() {
      var t3, t4, t5, t6, _this = this,
        t1 = _this._bytePointer,
        t2 = _this._dataLength;
      if (typeof t1 !== "number")
        return t1.$ge();
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (t1 >= t2)
        return 257;
      for (; t3 = _this._nextBits, t4 = _this._bitsToGet, t3 < t4; t1 = t6) {
        if (t1 >= t2)
          return 257;
        t4 = _this._nextData;
        t5 = _this._data;
        t6 = t1 + 1;
        _this._bytePointer = t6;
        if (t1 < 0 || t1 >= t5.length)
          return H.ioore(t5, t1);
        _this._nextData = ((t4 << 8 >>> 0) + t5[t1] & 4294967295) >>> 0;
        _this._nextBits = t3 + 8;
      }
      t1 = t3 - t4;
      _this._nextBits = t1;
      t1 = C.JSInt_methods._shrReceiverPositive$1(_this._nextData, t1);
      t4 -= 9;
      if (t4 < 0 || t4 >= 4)
        return H.ioore(C.List_511_1023_2047_4095, t4);
      return t1 & C.List_511_1023_2047_4095[t4];
    },
    _initializeStringTable$0: function() {
      var t1, i, _this = this;
      _this._table = new Uint8Array(4096);
      t1 = new Uint32Array(4096);
      _this._prefix = t1;
      C.NativeUint32List_methods.fillRange$3(t1, 0, 4096, 4098);
      for (t1 = _this._table, i = 0; i < 256; ++i)
        t1[i] = i;
      _this._bitsToGet = 9;
      _this._tableIndex = 258;
    },
    set$_out: function(_out) {
      this._out = type$.legacy_List_legacy_int._as(_out);
    }
  };
  N.TiffDecoder.prototype = {
    decodeImage$1: function(data) {
      var t1,
        ptr = Z.InputBuffer$(type$.legacy_List_legacy_int._as(data), false, null, 0),
        info = this._readHeader$1(ptr);
      if (info == null)
        return null;
      t1 = info.images;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      return t1[0].decode$1(ptr);
    },
    _readHeader$1: function(p) {
      var p2, img, t2, offset, t3, img0, t4, exception, t5, _null = null,
        t1 = H.setRuntimeTypeInfo([], type$.JSArray_legacy_TiffImage),
        info = new A.TiffInfo(t1),
        byteOrder = p.readUint16$0();
      if (byteOrder !== 18761 && byteOrder !== 19789)
        return _null;
      if (byteOrder === 19789)
        p.bigEndian = true;
      else
        p.bigEndian = false;
      t2 = p.readUint16$0();
      info.signature = t2;
      if (t2 !== 42)
        return _null;
      offset = p.readUint32$0();
      p2 = Z.InputBuffer$from(p, _null, 0);
      p2.offset = offset;
      for (t2 = type$.legacy_int, t3 = type$.legacy_TiffEntry; offset !== 0;) {
        img = null;
        try {
          img0 = new U.TiffImage(P.LinkedHashMap_LinkedHashMap$_empty(t2, t3));
          img0.TiffImage$1(p2);
          img = img0;
          t4 = img;
          if (!(t4.width != null && t4.height != null && t4.samplesPerPixel != null && t4.bitsPerSample != null && t4.compression != null))
            break;
        } catch (exception) {
          H.unwrapException(exception);
          break;
        }
        C.JSArray_methods.add$1(t1, img);
        t4 = t1.length;
        if (t4 === 1) {
          if (0 >= t4)
            return H.ioore(t1, 0);
          t5 = t1[0];
          info.width = t5.width;
          if (0 >= t4)
            return H.ioore(t1, 0);
          info.height = t5.height;
        }
        offset = p2.readUint32$0();
        if (offset !== 0)
          p2.offset = offset;
      }
      return t1.length !== 0 ? info : _null;
    }
  };
  A.VP8.prototype = {
    decodeHeader$0: function() {
      var t2,
        t1 = this.input,
        bits = t1.readUint24$0();
      if ((bits & 1) !== 0)
        return false;
      if ((bits >>> 1 & 7) > 3)
        return false;
      if ((bits >>> 4 & 1) === 0)
        return false;
      this._frameHeader.partitionLength = bits >>> 5;
      if (t1.readUint24$0() !== 2752925)
        return false;
      t2 = this._webp;
      t2.width = t1.readUint16$0();
      t2.height = t1.readUint16$0();
      return true;
    },
    decode$0: function() {
      var t1, _this = this, _null = null;
      if (!_this._getHeaders$0())
        return _null;
      t1 = _this._webp;
      _this.output = U.Image$(t1.width, t1.height, C.Channels_1, _null, _null);
      _this._initFrame$0();
      if (!_this._parseFrame$0())
        return _null;
      return _this.output;
    },
    _getHeaders$0: function() {
      var t1, t2, i, t3, t4, _this = this;
      if (!_this.decodeHeader$0())
        return false;
      t1 = new Uint8Array(3);
      t2 = new Array(4);
      t2.fixed$length = Array;
      t2 = new L.VP8Proba(t1, H.setRuntimeTypeInfo(t2, type$.JSArray_legacy_List_legacy_VP8BandProbas));
      t2.VP8Proba$0();
      _this._proba = t2;
      for (t1 = _this._dqm, i = 0; i < 4; ++i) {
        t2 = new Int32Array(2);
        t3 = new Int32Array(2);
        C.JSArray_methods.$indexSet(t1, i, new L.VP8QuantMatrix(t2, t3, new Int32Array(2)));
      }
      t1 = _this._webp;
      t2 = t1.width;
      if (typeof t2 !== "number")
        return t2.$shr();
      C.JSInt_methods._shrOtherPositive$1(t2, 8);
      t1 = t1.height;
      if (typeof t1 !== "number")
        return t1.$shr();
      C.JSInt_methods._shrOtherPositive$1(t1, 8);
      _this._cropLeft = _this._cropTop = 0;
      _this._cropRight = t2;
      _this._cropBottom = t1;
      _this._mbWidth = C.JSInt_methods._shrOtherPositive$1(t2 + 15, 4);
      _this._mbHeight = C.JSInt_methods._shrOtherPositive$1(t1 + 15, 4);
      _this._segment = 0;
      t1 = _this.input;
      t2 = _this._frameHeader;
      t3 = new B.VP8BitReader(t1.subset$1(t2.partitionLength));
      t3._range = 254;
      t3._vp8_bit_reader$_value = 0;
      t3._bits = -8;
      _this.br = t3;
      t2 = t2.partitionLength;
      t4 = t1.offset;
      if (typeof t4 !== "number")
        return t4.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t1.offset = t4 + t2;
      t3.getValue$1(1);
      _this.br.getValue$1(1);
      _this._parseSegmentHeader$2(_this._segmentHeader, _this._proba);
      _this._parseFilterHeader$0();
      if (!_this._parsePartitions$1(t1))
        return false;
      _this._parseQuant$0();
      _this.br.getValue$1(1);
      _this._parseProba$0();
      return true;
    },
    _parseSegmentHeader$2: function(hdr, proba) {
      var s, t2, value, _this = this,
        t1 = _this.br.getValue$1(1) !== 0;
      hdr.useSegment = t1;
      if (t1) {
        hdr.updateMap = _this.br.getValue$1(1) !== 0;
        if (_this.br.getValue$1(1) !== 0) {
          hdr.absoluteDelta = _this.br.getValue$1(1) !== 0;
          for (t1 = hdr.quantizer, s = 0; s < 4; ++s) {
            if (_this.br.getValue$1(1) !== 0) {
              t2 = _this.br;
              value = t2.getValue$1(7);
              t2 = t2.getValue$1(1) === 1 ? -value : value;
            } else
              t2 = 0;
            t1[s] = t2;
          }
          for (t1 = hdr.filterStrength, s = 0; s < 4; ++s) {
            if (_this.br.getValue$1(1) !== 0) {
              t2 = _this.br;
              value = t2.getValue$1(6);
              t2 = t2.getValue$1(1) === 1 ? -value : value;
            } else
              t2 = 0;
            t1[s] = t2;
          }
        }
        if (hdr.updateMap)
          for (s = 0; s < 3; ++s) {
            t1 = proba.segments;
            t1[s] = _this.br.getValue$1(1) !== 0 ? _this.br.getValue$1(8) : 255;
          }
      } else
        hdr.updateMap = false;
      return true;
    },
    _parseFilterHeader$0: function() {
      var t1, i, t2, value, _this = this,
        hdr = _this._filterHeader;
      hdr.simple = _this.br.getValue$1(1) !== 0;
      hdr.level = _this.br.getValue$1(6);
      hdr.sharpness = _this.br.getValue$1(3);
      t1 = _this.br.getValue$1(1) !== 0;
      hdr.useLfDelta = t1;
      if (t1)
        if (_this.br.getValue$1(1) !== 0) {
          for (t1 = hdr.refLfDelta, i = 0; i < 4; ++i)
            if (_this.br.getValue$1(1) !== 0) {
              t2 = _this.br;
              value = t2.getValue$1(6);
              t1[i] = t2.getValue$1(1) === 1 ? -value : value;
            }
          for (t1 = hdr.modeLfDelta, i = 0; i < 4; ++i)
            if (_this.br.getValue$1(1) !== 0) {
              t2 = _this.br;
              value = t2.getValue$1(6);
              t1[i] = t2.getValue$1(1) === 1 ? -value : value;
            }
        }
      if (hdr.level === 0)
        t1 = 0;
      else
        t1 = H.boolConversionCheck(hdr.simple) ? 1 : 2;
      _this._filterType = t1;
      return true;
    },
    _parsePartitions$1: function(input) {
      var bufEnd, lastPart, partStart, sz, p, szb, t3, t4, t5, partEnd,
        t1 = input.end,
        t2 = input.offset;
      if (typeof t2 !== "number")
        return H.iae(t2);
      bufEnd = t1 - t2;
      t2 = C.JSInt_methods._shlPositive$1(1, this.br.getValue$1(2));
      this._numPartitions = t2;
      lastPart = t2 - 1;
      partStart = lastPart * 3;
      if (bufEnd < partStart)
        return false;
      for (t1 = this._partitions, sz = 0, p = 0; p < lastPart; ++p, partStart = partEnd) {
        szb = input.subset$2$offset(3, sz);
        t2 = szb.buffer;
        t3 = szb.offset;
        if (typeof t3 !== "number")
          return t3.$add();
        t3 = J.$index$asx(t2, t3);
        t2 = szb.buffer;
        t4 = szb.offset;
        if (typeof t4 !== "number")
          return t4.$add();
        t4 = J.$index$asx(t2, t4 + 1);
        if (typeof t4 !== "number")
          return t4.$shl();
        if (typeof t3 !== "number")
          return t3.$or();
        t2 = szb.buffer;
        t5 = szb.offset;
        if (typeof t5 !== "number")
          return t5.$add();
        t5 = J.$index$asx(t2, t5 + 2);
        if (typeof t5 !== "number")
          return t5.$shl();
        partEnd = partStart + ((t3 | t4 << 8 | t5 << 16) >>> 0);
        if (partEnd > bufEnd)
          partEnd = bufEnd;
        t2 = new B.VP8BitReader(input.subset$2$position(partEnd - partStart, partStart));
        t2._range = 254;
        t2._vp8_bit_reader$_value = 0;
        t2._bits = -8;
        C.JSArray_methods.$indexSet(t1, p, t2);
        sz += 3;
      }
      t2 = input.offset;
      t3 = input.start;
      if (typeof t2 !== "number")
        return t2.$sub();
      if (typeof t3 !== "number")
        return H.iae(t3);
      t3 = new B.VP8BitReader(input.subset$2$position(bufEnd - partStart, t2 - t3 + partStart));
      t3._range = 254;
      t3._vp8_bit_reader$_value = 0;
      t3._bits = -8;
      C.JSArray_methods.$indexSet(t1, lastPart, t3);
      return partStart < bufEnd && true;
    },
    _parseQuant$0: function() {
      var t1, t2, i, q, t3, m, t4, _this = this,
        base_q0 = _this.br.getValue$1(7),
        dqy1_dc = _this.br.getValue$1(1) !== 0 ? _this.br.getSignedValue$1(4) : 0,
        dqy2_dc = _this.br.getValue$1(1) !== 0 ? _this.br.getSignedValue$1(4) : 0,
        dqy2_ac = _this.br.getValue$1(1) !== 0 ? _this.br.getSignedValue$1(4) : 0,
        dquv_dc = _this.br.getValue$1(1) !== 0 ? _this.br.getSignedValue$1(4) : 0,
        dquv_ac = _this.br.getValue$1(1) !== 0 ? _this.br.getSignedValue$1(4) : 0,
        hdr = _this._segmentHeader;
      for (t1 = _this._dqm, t2 = hdr.quantizer, i = 0; i < 4; ++i) {
        if (hdr.useSegment) {
          q = t2[i];
          if (!hdr.absoluteDelta)
            q += base_q0;
        } else {
          if (i > 0) {
            t3 = t1[0];
            if (i < 0 || i >= 4)
              return H.ioore(t1, i);
            t1[i] = t3;
            continue;
          }
          q = base_q0;
        }
        m = t1[i];
        t3 = m.y1Mat;
        t4 = q + dqy1_dc;
        if (t4 < 0)
          t4 = 0;
        else if (t4 > 127)
          t4 = 127;
        t3[0] = C.List_8co1[t4];
        if (q < 0)
          t4 = 0;
        else
          t4 = q > 127 ? 127 : q;
        t3[1] = C.List_AiM[t4];
        t4 = m.y2Mat;
        t3 = q + dqy2_dc;
        if (t3 < 0)
          t3 = 0;
        else if (t3 > 127)
          t3 = 127;
        t4[0] = C.List_8co1[t3] * 2;
        t3 = q + dqy2_ac;
        if (t3 < 0)
          t3 = 0;
        else if (t3 > 127)
          t3 = 127;
        t4[1] = C.List_AiM[t3] * 101581 >>> 16;
        if (t4[1] < 8)
          t4[1] = 8;
        t3 = m.uvMat;
        t4 = q + dquv_dc;
        if (t4 < 0)
          t4 = 0;
        else if (t4 > 117)
          t4 = 117;
        t3[0] = C.List_8co1[t4];
        t4 = q + dquv_ac;
        if (t4 < 0)
          t4 = 0;
        else if (t4 > 127)
          t4 = 127;
        t3[1] = C.List_AiM[t4];
      }
    },
    _parseProba$0: function() {
      var t, b, c, p, v, t1, _this = this,
        proba = _this._proba;
      for (t = 0; t < 4; ++t)
        for (b = 0; b < 8; ++b)
          for (c = 0; c < 3; ++c)
            for (p = 0; p < 11; ++p) {
              v = _this.br.getBit$1(C.List_MIe[t][b][c][p]) !== 0 ? _this.br.getValue$1(8) : C.List_S8N[t][b][c][p];
              proba.bands[t][b].probas[c][p] = v;
            }
      t1 = _this.br.getValue$1(1) !== 0;
      _this._useSkipProba = t1;
      if (t1)
        _this._skipP = _this.br.getValue$1(8);
    },
    _precomputeFilterStrengths$0: function() {
      var hdr, t2, t3, t4, s, baseLevel, t5, i4x4, info, level, ilevel, ilevel0, _this = this,
        t1 = _this._filterType;
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > 0) {
        hdr = _this._filterHeader;
        for (t1 = hdr.refLfDelta, t2 = hdr.modeLfDelta, t3 = _this._segmentHeader, t4 = t3.filterStrength, s = 0; s < 4; ++s) {
          if (t3.useSegment) {
            baseLevel = t4[s];
            if (!t3.absoluteDelta) {
              t5 = hdr.level;
              if (typeof t5 !== "number")
                return H.iae(t5);
              baseLevel += t5;
            }
          } else
            baseLevel = hdr.level;
          for (i4x4 = 0; i4x4 <= 1; ++i4x4) {
            info = _this._fStrengths[s][i4x4];
            if (H.boolConversionCheck(hdr.useLfDelta)) {
              t5 = t1[0];
              if (typeof baseLevel !== "number")
                return baseLevel.$add();
              level = baseLevel + t5;
              if (i4x4 !== 0)
                level += t2[0];
            } else
              level = baseLevel;
            if (typeof level !== "number")
              return level.$lt();
            if (level < 0)
              level = 0;
            else if (level > 63)
              level = 63;
            if (level > 0) {
              t5 = hdr.sharpness;
              if (typeof t5 !== "number")
                return t5.$gt();
              if (t5 > 0) {
                ilevel = t5 > 4 ? C.JSInt_methods._shrOtherPositive$1(level, 2) : C.JSInt_methods._shrOtherPositive$1(level, 1);
                ilevel0 = 9 - t5;
                if (ilevel > ilevel0)
                  ilevel = ilevel0;
              } else
                ilevel = level;
              if (ilevel < 1)
                ilevel = 1;
              info.fInnerLevel = ilevel;
              info.fLimit = 2 * level + ilevel;
              if (level >= 40)
                t5 = 2;
              else
                t5 = level >= 15 ? 1 : 0;
              info.hevThresh = t5;
            } else
              info.fLimit = 0;
            info.fInner = i4x4 !== 0;
          }
        }
      }
    },
    _initFrame$0: function() {
      var i, t3, t4, t5, extra_rows, extra_y, extra_uv, uvWidth, extraPixels, _this = this, _null = null,
        t1 = _this._webp,
        t2 = t1._webp_info$_alphaData;
      if (t2 != null)
        _this._alphaData = t2;
      t2 = new Array(4);
      t2.fixed$length = Array;
      _this.set$_fStrengths(H.setRuntimeTypeInfo(t2, type$.JSArray_legacy_List_legacy_VP8FInfo));
      for (t2 = type$.JSArray_legacy_VP8FInfo, i = 0; i < 4; ++i) {
        t3 = _this._fStrengths;
        (t3 && C.JSArray_methods).$indexSet(t3, i, H.setRuntimeTypeInfo([new L.VP8FInfo(), new L.VP8FInfo()], t2));
      }
      t3 = _this._mbWidth;
      if (typeof t3 !== "number")
        return H.iae(t3);
      t3 = new Array(t3);
      t3.fixed$length = Array;
      _this.set$_yuvT(H.setRuntimeTypeInfo(t3, type$.JSArray_legacy_VP8TopSamples));
      i = 0;
      while (true) {
        t3 = _this._mbWidth;
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (!(i < t3))
          break;
        t3 = _this._yuvT;
        t4 = new Uint8Array(16);
        t5 = new Uint8Array(8);
        (t3 && C.JSArray_methods).$indexSet(t3, i, new L.VP8TopSamples(t4, t5, new Uint8Array(8)));
        ++i;
      }
      _this._yuvBlock = new Uint8Array(832);
      t3 = _this._mbWidth;
      if (typeof t3 !== "number")
        return H.iae(t3);
      _this._intraT = new Uint8Array(4 * t3);
      t3 = _this._mbWidth;
      if (typeof t3 !== "number")
        return H.iae(t3);
      _this._cacheYStride = 16 * t3;
      _this._cacheUVStride = 8 * t3;
      extra_rows = C.JSArray_methods.$index(C.List_0_2_8, _this._filterType);
      t3 = _this._cacheYStride;
      if (typeof t3 !== "number")
        return H.iae(t3);
      extra_y = extra_rows * t3;
      t4 = _this._cacheUVStride;
      if (typeof t4 !== "number")
        return H.iae(t4);
      extra_uv = (extra_rows / 2 | 0) * t4;
      _this._cacheY = Z.InputBuffer$(new Uint8Array(16 * t3 + extra_y), false, _null, extra_y);
      t3 = _this._cacheUVStride;
      if (typeof t3 !== "number")
        return H.iae(t3);
      _this._cacheU = Z.InputBuffer$(new Uint8Array(8 * t3 + extra_uv), false, _null, extra_uv);
      t3 = _this._cacheUVStride;
      if (typeof t3 !== "number")
        return H.iae(t3);
      _this._cacheV = Z.InputBuffer$(new Uint8Array(8 * t3 + extra_uv), false, _null, extra_uv);
      t3 = t1.width;
      if (!H._isInt(t3))
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t3)));
      _this._tmpY = Z.InputBuffer$(new Uint8Array(t3), false, _null, 0);
      t1 = t1.width;
      if (typeof t1 !== "number")
        return t1.$add();
      uvWidth = C.JSInt_methods._shrOtherPositive$1(t1 + 1, 1);
      _this._tmpU = Z.InputBuffer$(new Uint8Array(uvWidth), false, _null, 0);
      _this._tmpV = Z.InputBuffer$(new Uint8Array(uvWidth), false, _null, 0);
      extraPixels = C.JSArray_methods.$index(C.List_0_2_8, _this._filterType);
      if (_this._filterType === 2)
        _this._tlMbY = _this._tlMbX = 0;
      else {
        t1 = _this._cropLeft;
        if (typeof t1 !== "number")
          return t1.$sub();
        t1 = C.JSInt_methods._tdivFast$1(t1 - extraPixels, 16);
        _this._tlMbX = t1;
        t3 = _this._cropTop;
        if (typeof t3 !== "number")
          return t3.$sub();
        t3 = C.JSInt_methods._tdivFast$1(t3 - extraPixels, 16);
        _this._tlMbY = t3;
        if (t1 < 0)
          _this._tlMbX = 0;
        if (t3 < 0)
          _this._tlMbY = 0;
      }
      t1 = _this._cropBottom;
      if (typeof t1 !== "number")
        return t1.$add();
      t1 = C.JSInt_methods._tdivFast$1(t1 + 15 + extraPixels, 16);
      _this._brMbY = t1;
      t3 = _this._cropRight;
      if (typeof t3 !== "number")
        return t3.$add();
      t3 = C.JSInt_methods._tdivFast$1(t3 + 15 + extraPixels, 16);
      _this._brMbX = t3;
      t4 = _this._mbWidth;
      if (typeof t4 !== "number")
        return H.iae(t4);
      if (t3 > t4)
        _this._brMbX = t4;
      t3 = _this._mbHeight;
      if (typeof t3 !== "number")
        return H.iae(t3);
      if (t1 > t3)
        _this._brMbY = t3;
      t1 = new Array(t4 + 1);
      t1.fixed$length = Array;
      _this.set$_mbInfo(H.setRuntimeTypeInfo(t1, type$.JSArray_legacy_VP8MB));
      t1 = _this._mbWidth;
      if (typeof t1 !== "number")
        return H.iae(t1);
      t1 = new Array(t1);
      t1.fixed$length = Array;
      _this.set$_mbData(H.setRuntimeTypeInfo(t1, type$.JSArray_legacy_VP8MBData));
      t1 = _this._mbWidth;
      if (typeof t1 !== "number")
        return H.iae(t1);
      t1 = new Array(t1);
      t1.fixed$length = Array;
      _this.set$_fInfo(H.setRuntimeTypeInfo(t1, t2));
      i = 0;
      while (true) {
        t1 = _this._mbWidth;
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(i < t1))
          break;
        t1 = _this._mbInfo;
        (t1 && C.JSArray_methods).$indexSet(t1, i, new L.VP8MB());
        t1 = _this._mbData;
        t2 = new Int16Array(384);
        (t1 && C.JSArray_methods).$indexSet(t1, i, new L.VP8MBData(t2, new Uint8Array(16)));
        ++i;
      }
      t2 = _this._mbInfo;
      (t2 && C.JSArray_methods).$indexSet(t2, t1, new L.VP8MB());
      _this._precomputeFilterStrengths$0();
      V.VP8Filter__initTables();
      _this._dsp = new V.VP8Filter();
      return true;
    },
    _parseFrame$0: function() {
      var t1, t2, t3, t4, t5, tokenBr, t6, left, t7, mb, block, skip, finfo, useFilter, _this = this;
      _this._mbY = 0;
      t1 = _this._intraL;
      t2 = _this._segmentHeader;
      t3 = _this._partitions;
      t4 = 0;
      while (true) {
        t5 = _this._brMbY;
        if (typeof t5 !== "number")
          return H.iae(t5);
        if (!(t4 < t5))
          break;
        t5 = _this._numPartitions;
        if (typeof t5 !== "number")
          return t5.$sub();
        t5 = (t4 & t5 - 1) >>> 0;
        if (t5 < 0 || t5 >= 8)
          return H.ioore(t3, t5);
        tokenBr = t3[t5];
        while (true) {
          t4 = _this._mbX;
          t5 = _this._mbWidth;
          if (typeof t5 !== "number")
            return H.iae(t5);
          if (!(t4 < t5))
            break;
          t5 = _this._mbInfo;
          t6 = t5.length;
          if (0 >= t6)
            return H.ioore(t5, 0);
          left = t5[0];
          t7 = 1 + t4;
          if (t7 >= t6)
            return H.ioore(t5, t7);
          mb = t5[t7];
          t7 = _this._mbData;
          if (t4 >= t7.length)
            return H.ioore(t7, t4);
          block = t7[t4];
          if (t2.updateMap) {
            t4 = _this.br.getBit$1(_this._proba.segments[0]);
            t5 = _this.br;
            t6 = _this._proba;
            _this._segment = t4 === 0 ? t5.getBit$1(t6.segments[1]) : 2 + t5.getBit$1(t6.segments[2]);
          }
          skip = H.boolConversionCheck(_this._useSkipProba) && _this.br.getBit$1(_this._skipP) !== 0;
          _this._parseIntraMode$0();
          if (!skip)
            skip = _this._parseResiduals$2(mb, tokenBr);
          else {
            left.nz = mb.nz = 0;
            if (!H.boolConversionCheck(block.isIntra4x4))
              left.nzDc = mb.nzDc = 0;
            block.nonZeroUV = block.nonZeroY = 0;
          }
          t4 = _this._filterType;
          if (typeof t4 !== "number")
            return t4.$gt();
          if (t4 > 0) {
            t4 = _this._fInfo;
            t5 = _this._mbX;
            t6 = _this._fStrengths;
            t6 = (t6 && C.JSArray_methods).$index(t6, _this._segment);
            (t4 && C.JSArray_methods).$indexSet(t4, t5, t6[H.boolConversionCheck(block.isIntra4x4) ? 1 : 0]);
            t4 = _this._fInfo;
            t5 = _this._mbX;
            if (t5 >= t4.length)
              return H.ioore(t4, t5);
            finfo = t4[t5];
            finfo.fInner = finfo.fInner || !skip;
          }
          ++_this._mbX;
        }
        t4 = _this._mbInfo;
        if (0 >= t4.length)
          return H.ioore(t4, 0);
        left = t4[0];
        left.nzDc = left.nz = 0;
        C.NativeUint8List_methods.fillRange$3(t1, 0, 4, 0);
        _this._mbX = 0;
        _this._reconstructRow$0();
        t4 = _this._filterType;
        if (typeof t4 !== "number")
          return t4.$gt();
        if (t4 > 0) {
          t4 = _this._mbY;
          t5 = _this._tlMbY;
          if (typeof t5 !== "number")
            return H.iae(t5);
          if (t4 >= t5) {
            t5 = _this._brMbY;
            if (typeof t5 !== "number")
              return H.iae(t5);
            t5 = t4 <= t5;
            useFilter = t5;
          } else
            useFilter = false;
        } else
          useFilter = false;
        if (!_this._finishRow$1(useFilter))
          return false;
        t4 = ++_this._mbY;
      }
      return true;
    },
    _reconstructRow$0: function() {
      var mb_x, t2, block, j, t3, t4, top_yuv, coeffs, bits, topRight, topRight32, p, n, dst, bits_uv, pred_func, y_out, u_out, _this = this, _null = null,
        mb_y = _this._mbY,
        t1 = _this._yuvBlock,
        y_dst = Z.InputBuffer$(t1, false, _null, 40),
        u_dst = Z.InputBuffer$(t1, false, _null, 584),
        v_dst = Z.InputBuffer$(t1, false, _null, 600);
      t1 = mb_y > 0;
      mb_x = 0;
      while (true) {
        t2 = _this._mbWidth;
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(mb_x < t2))
          break;
        t2 = _this._mbData;
        if (mb_x >= t2.length)
          return H.ioore(t2, mb_x);
        block = t2[mb_x];
        if (mb_x > 0) {
          for (j = -1; j < 16; ++j) {
            t2 = j * 32;
            y_dst.memcpy$4(t2 - 4, 4, y_dst, t2 + 12);
          }
          for (j = -1; j < 8; ++j) {
            t2 = j * 32;
            t3 = t2 - 4;
            t2 += 4;
            u_dst.memcpy$4(t3, 4, u_dst, t2);
            v_dst.memcpy$4(t3, 4, v_dst, t2);
          }
        } else {
          for (j = 0; j < 16; ++j) {
            t2 = y_dst.buffer;
            t3 = y_dst.offset;
            if (typeof t3 !== "number")
              return t3.$add();
            J.$indexSet$ax(t2, t3 + (j * 32 - 1), 129);
          }
          for (j = 0; j < 8; ++j) {
            t2 = j * 32 - 1;
            t3 = u_dst.buffer;
            t4 = u_dst.offset;
            if (typeof t4 !== "number")
              return t4.$add();
            J.$indexSet$ax(t3, t4 + t2, 129);
            t4 = v_dst.buffer;
            t3 = v_dst.offset;
            if (typeof t3 !== "number")
              return t3.$add();
            J.$indexSet$ax(t4, t3 + t2, 129);
          }
          if (t1) {
            t2 = v_dst.buffer;
            t3 = v_dst.offset;
            if (typeof t3 !== "number")
              return t3.$add();
            J.$indexSet$ax(t2, t3 + -33, 129);
            t3 = u_dst.buffer;
            t2 = u_dst.offset;
            if (typeof t2 !== "number")
              return t2.$add();
            J.$indexSet$ax(t3, t2 + -33, 129);
            t2 = y_dst.buffer;
            t3 = y_dst.offset;
            if (typeof t3 !== "number")
              return t3.$add();
            J.$indexSet$ax(t2, t3 + -33, 129);
          }
        }
        t2 = _this._yuvT;
        if (mb_x >= t2.length)
          return H.ioore(t2, mb_x);
        top_yuv = t2[mb_x];
        coeffs = block.coeffs;
        bits = block.nonZeroY;
        if (t1) {
          y_dst.memcpy$3(-32, 16, top_yuv.y);
          u_dst.memcpy$3(-32, 8, top_yuv.u);
          v_dst.memcpy$3(-32, 8, top_yuv.v);
        } else if (mb_x === 0) {
          t2 = y_dst.buffer;
          t3 = y_dst.offset;
          if (typeof t3 !== "number")
            return t3.$add();
          t3 += -33;
          J.fillRange$3$ax(t2, t3, t3 + 21, 127);
          t3 = u_dst.buffer;
          t2 = u_dst.offset;
          if (typeof t2 !== "number")
            return t2.$add();
          t2 += -33;
          J.fillRange$3$ax(t3, t2, t2 + 9, 127);
          t2 = v_dst.buffer;
          t3 = v_dst.offset;
          if (typeof t3 !== "number")
            return t3.$add();
          t3 += -33;
          J.fillRange$3$ax(t2, t3, t3 + 9, 127);
        }
        if (H.boolConversionCheck(block.isIntra4x4)) {
          topRight = Z.InputBuffer$from(y_dst, _null, -16);
          topRight32 = topRight.toUint32List$0();
          if (t1) {
            t2 = _this._mbWidth;
            if (typeof t2 !== "number")
              return t2.$sub();
            if (mb_x >= t2 - 1) {
              t2 = top_yuv.y[15];
              t3 = topRight.buffer;
              t4 = topRight.offset;
              if (typeof t4 !== "number")
                return t4.$add();
              J.fillRange$3$ax(t3, t4, t4 + 4, t2);
            } else {
              t2 = _this._yuvT;
              t3 = mb_x + 1;
              if (t3 >= t2.length)
                return H.ioore(t2, t3);
              topRight.memcpy$3(0, 4, t2[t3].y);
            }
          }
          t2 = topRight32.length;
          if (0 >= t2)
            return H.ioore(topRight32, 0);
          p = topRight32[0];
          if (96 >= t2)
            return H.ioore(topRight32, 96);
          topRight32[96] = p;
          topRight32[64] = p;
          topRight32[32] = p;
          t2 = block.imodes;
          n = 0;
          while (n < 16) {
            dst = Z.InputBuffer$from(y_dst, _null, C.List_cGl0[n]);
            t3 = t2[n];
            if (t3 >= 10)
              return H.ioore(C.List_sty, t3);
            C.List_sty[t3].call$1(dst);
            t3 = n * 16;
            _this._doTransform$3(bits, new Z.InputBuffer(coeffs, t3, 384, t3, false), dst);
            ++n;
            if (typeof bits !== "number")
              return bits.$shl();
            bits = (bits << 2 & 4294967295) >>> 0;
          }
        } else {
          C.JSArray_methods.$index(C.List_8aB, A.VP8__checkMode(mb_x, mb_y, block.imodes[0])).call$1(y_dst);
          if (bits !== 0) {
            n = 0;
            while (n < 16) {
              dst = Z.InputBuffer$from(y_dst, _null, C.List_cGl0[n]);
              t2 = n * 16;
              _this._doTransform$3(bits, new Z.InputBuffer(coeffs, t2, 384, t2, false), dst);
              ++n;
              if (typeof bits !== "number")
                return bits.$shl();
              bits = (bits << 2 & 4294967295) >>> 0;
            }
          }
        }
        bits_uv = block.nonZeroUV;
        pred_func = A.VP8__checkMode(mb_x, mb_y, block.uvmode);
        C.JSArray_methods.$index(C.List_0W6, pred_func).call$1(u_dst);
        C.JSArray_methods.$index(C.List_0W6, pred_func).call$1(v_dst);
        _this._doUVTransform$3(bits_uv, new Z.InputBuffer(coeffs, 256, 384, 256, false), u_dst);
        if (typeof bits_uv !== "number")
          return bits_uv.$shr();
        _this._doUVTransform$3(bits_uv >>> 8, new Z.InputBuffer(coeffs, 320, 384, 320, false), v_dst);
        t2 = _this._mbHeight;
        if (typeof t2 !== "number")
          return t2.$sub();
        if (mb_y < t2 - 1) {
          C.NativeUint8List_methods.setRange$4(top_yuv.y, 0, 16, y_dst.toUint8List$0(), 480);
          C.NativeUint8List_methods.setRange$4(top_yuv.u, 0, 8, u_dst.toUint8List$0(), 224);
          C.NativeUint8List_methods.setRange$4(top_yuv.v, 0, 8, v_dst.toUint8List$0(), 224);
        }
        y_out = mb_x * 16;
        u_out = mb_x * 8;
        for (j = 0; j < 16; ++j) {
          t2 = _this._cacheYStride;
          if (typeof t2 !== "number")
            return H.iae(t2);
          _this._cacheY.memcpy$4(y_out + j * t2, 16, y_dst, j * 32);
        }
        for (j = 0; j < 8; ++j) {
          t2 = _this._cacheUVStride;
          if (typeof t2 !== "number")
            return H.iae(t2);
          t3 = j * 32;
          _this._cacheU.memcpy$4(u_out + j * t2, 8, u_dst, t3);
          t2 = _this._cacheUVStride;
          if (typeof t2 !== "number")
            return H.iae(t2);
          _this._cacheV.memcpy$4(u_out + j * t2, 8, v_dst, t3);
        }
        ++mb_x;
      }
    },
    _doTransform$3: function(bits, src, dst) {
      var t1, t2, a, c4, d4, c1, d1;
      if (typeof bits !== "number")
        return bits.$shr();
      switch (bits >>> 30) {
        case 3:
          this._dsp.transform$3(src, dst, false);
          break;
        case 2:
          this._dsp.toString;
          t1 = src.buffer;
          t2 = src.offset;
          if (typeof t2 !== "number")
            return t2.$add();
          t2 = J.$index$asx(t1, t2);
          if (typeof t2 !== "number")
            return t2.$add();
          a = t2 + 4;
          t2 = src.buffer;
          t1 = src.offset;
          if (typeof t1 !== "number")
            return t1.$add();
          t1 = J.$index$asx(t2, t1 + 4);
          if (typeof t1 !== "number")
            return t1.$mul();
          c4 = C.JSInt_methods.toSigned$1(C.JSInt_methods._shrOtherPositive$1(t1 * 35468, 16), 32);
          t1 = src.buffer;
          t2 = src.offset;
          if (typeof t2 !== "number")
            return t2.$add();
          t2 = J.$index$asx(t1, t2 + 4);
          if (typeof t2 !== "number")
            return t2.$mul();
          d4 = C.JSInt_methods.toSigned$1(C.JSInt_methods._shrOtherPositive$1(t2 * 85627, 16), 32);
          t2 = src.buffer;
          t1 = src.offset;
          if (typeof t1 !== "number")
            return t1.$add();
          t1 = J.$index$asx(t2, t1 + 1);
          if (typeof t1 !== "number")
            return t1.$mul();
          c1 = C.JSInt_methods.toSigned$1(C.JSInt_methods._shrOtherPositive$1(t1 * 35468, 16), 32);
          t1 = src.buffer;
          t2 = src.offset;
          if (typeof t2 !== "number")
            return t2.$add();
          t2 = J.$index$asx(t1, t2 + 1);
          if (typeof t2 !== "number")
            return t2.$mul();
          d1 = C.JSInt_methods.toSigned$1(C.JSInt_methods._shrOtherPositive$1(t2 * 85627, 16), 32);
          V.VP8Filter__store2(dst, 0, a + d4, d1, c1);
          V.VP8Filter__store2(dst, 1, a + c4, d1, c1);
          V.VP8Filter__store2(dst, 2, a - c4, d1, c1);
          V.VP8Filter__store2(dst, 3, a - d4, d1, c1);
          break;
        case 1:
          this._dsp.transformDC$2(src, dst);
          break;
        default:
          break;
      }
    },
    _doUVTransform$3: function(bits, src, dst) {
      var t1, t2, t3, _null = null;
      if (typeof bits !== "number")
        return bits.$and();
      if ((bits & 255) !== 0) {
        t1 = this._dsp;
        if ((bits & 170) !== 0) {
          t1.transform$3(src, dst, true);
          t1.transform$3(Z.InputBuffer$from(src, _null, 32), Z.InputBuffer$from(dst, _null, 128), true);
        } else {
          t1.toString;
          t2 = src.buffer;
          t3 = src.offset;
          if (typeof t3 !== "number")
            return t3.$add();
          if (J.$index$asx(t2, t3) !== 0)
            t1.transformDC$2(src, dst);
          t2 = src.buffer;
          t3 = src.offset;
          if (typeof t3 !== "number")
            return t3.$add();
          if (J.$index$asx(t2, t3 + 16) !== 0)
            t1.transformDC$2(Z.InputBuffer$from(src, _null, 16), Z.InputBuffer$from(dst, _null, 4));
          t2 = src.buffer;
          t3 = src.offset;
          if (typeof t3 !== "number")
            return t3.$add();
          if (J.$index$asx(t2, t3 + 32) !== 0)
            t1.transformDC$2(Z.InputBuffer$from(src, _null, 32), Z.InputBuffer$from(dst, _null, 128));
          t2 = src.buffer;
          t3 = src.offset;
          if (typeof t3 !== "number")
            return t3.$add();
          if (J.$index$asx(t2, t3 + 48) !== 0)
            t1.transformDC$2(Z.InputBuffer$from(src, _null, 48), Z.InputBuffer$from(dst, _null, 132));
        }
      }
    },
    _doFilter$2: function(mbX, mbY) {
      var fInfo, yDst, ilevel, limit, uvBps, uDst, vDst, hevThresh, t2, u2, v2, _this = this, _null = null,
        yBps = _this._cacheYStride,
        t1 = _this._fInfo;
      if (mbX < 0 || mbX >= t1.length)
        return H.ioore(t1, mbX);
      fInfo = t1[mbX];
      yDst = Z.InputBuffer$from(_this._cacheY, _null, mbX * 16);
      ilevel = fInfo.fInnerLevel;
      limit = fInfo.fLimit;
      if (limit === 0)
        return;
      if (_this._filterType === 1) {
        if (mbX > 0)
          _this._dsp.simpleHFilter16$3(yDst, yBps, limit + 4);
        if (fInfo.fInner)
          _this._dsp.simpleHFilter16i$3(yDst, yBps, limit);
        if (mbY > 0)
          _this._dsp.simpleVFilter16$3(yDst, yBps, limit + 4);
        if (fInfo.fInner)
          _this._dsp.simpleVFilter16i$3(yDst, yBps, limit);
      } else {
        uvBps = _this._cacheUVStride;
        t1 = mbX * 8;
        uDst = Z.InputBuffer$from(_this._cacheU, _null, t1);
        vDst = Z.InputBuffer$from(_this._cacheV, _null, t1);
        hevThresh = fInfo.hevThresh;
        if (mbX > 0) {
          t1 = limit + 4;
          _this._dsp._filterLoop26$7(yDst, 1, yBps, 16, t1, ilevel, hevThresh);
          t2 = _this._dsp;
          t2._filterLoop26$7(uDst, 1, uvBps, 8, t1, ilevel, hevThresh);
          t2._filterLoop26$7(vDst, 1, uvBps, 8, t1, ilevel, hevThresh);
        }
        if (fInfo.fInner) {
          _this._dsp.hFilter16i$5(yDst, yBps, limit, ilevel, hevThresh);
          t1 = _this._dsp;
          t1.toString;
          u2 = Z.InputBuffer$from(uDst, _null, 4);
          v2 = Z.InputBuffer$from(vDst, _null, 4);
          t1._filterLoop24$7(u2, 1, uvBps, 8, limit, ilevel, hevThresh);
          t1._filterLoop24$7(v2, 1, uvBps, 8, limit, ilevel, hevThresh);
        }
        if (mbY > 0) {
          t1 = limit + 4;
          _this._dsp._filterLoop26$7(yDst, yBps, 1, 16, t1, ilevel, hevThresh);
          t2 = _this._dsp;
          t2._filterLoop26$7(uDst, uvBps, 1, 8, t1, ilevel, hevThresh);
          t2._filterLoop26$7(vDst, uvBps, 1, 8, t1, ilevel, hevThresh);
        }
        if (fInfo.fInner) {
          _this._dsp.vFilter16i$5(yDst, yBps, limit, ilevel, hevThresh);
          t1 = _this._dsp;
          t1.toString;
          if (typeof uvBps !== "number")
            return H.iae(uvBps);
          t2 = 4 * uvBps;
          u2 = Z.InputBuffer$from(uDst, _null, t2);
          v2 = Z.InputBuffer$from(vDst, _null, t2);
          t1._filterLoop24$7(u2, uvBps, 1, 8, limit, ilevel, hevThresh);
          t1._filterLoop24$7(v2, uvBps, 1, 8, limit, ilevel, hevThresh);
        }
      }
    },
    _filterRow$0: function() {
      var t1, _this = this,
        mbX = _this._tlMbX;
      while (true) {
        t1 = _this._brMbX;
        if (typeof mbX !== "number")
          return mbX.$lt();
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(mbX < t1))
          break;
        _this._doFilter$2(mbX, _this._mbY);
        ++mbX;
      }
    },
    _finishRow$1: function(useFilter) {
      var ySize, uvSize, yDst, t2, uDst, vDst, mbY, t3, yStart, yEnd, t4, t5, deltaY, t6, t7, t8, t9, _this = this, _null = null,
        extraYRows = C.JSArray_methods.$index(C.List_0_2_8, _this._filterType),
        t1 = _this._cacheYStride;
      if (typeof t1 !== "number")
        return H.iae(t1);
      ySize = extraYRows * t1;
      t1 = _this._cacheUVStride;
      if (typeof t1 !== "number")
        return H.iae(t1);
      uvSize = (extraYRows / 2 | 0) * t1;
      t1 = -ySize;
      yDst = Z.InputBuffer$from(_this._cacheY, _null, t1);
      t2 = -uvSize;
      uDst = Z.InputBuffer$from(_this._cacheU, _null, t2);
      vDst = Z.InputBuffer$from(_this._cacheV, _null, t2);
      mbY = _this._mbY;
      t3 = _this._brMbY;
      if (typeof t3 !== "number")
        return t3.$sub();
      yStart = mbY * 16;
      yEnd = (mbY + 1) * 16;
      if (useFilter)
        _this._filterRow$0();
      if (mbY !== 0) {
        yStart -= extraYRows;
        _this._y = Z.InputBuffer$from(yDst, _null, 0);
        _this._u = Z.InputBuffer$from(uDst, _null, 0);
        _this._v = Z.InputBuffer$from(vDst, _null, 0);
      } else {
        _this._y = Z.InputBuffer$from(_this._cacheY, _null, 0);
        _this._u = Z.InputBuffer$from(_this._cacheU, _null, 0);
        _this._v = Z.InputBuffer$from(_this._cacheV, _null, 0);
      }
      t3 = mbY < t3 - 1;
      if (t3)
        yEnd -= extraYRows;
      t4 = _this._cropBottom;
      if (typeof t4 !== "number")
        return H.iae(t4);
      if (yEnd > t4)
        yEnd = t4;
      _this._a = null;
      if (_this._alphaData != null && yStart < yEnd) {
        t4 = _this._a = _this._decompressAlphaRows$2(yStart, yEnd - yStart);
        if (t4 == null)
          return false;
      } else
        t4 = _null;
      t5 = _this._cropTop;
      if (typeof t5 !== "number")
        return H.iae(t5);
      if (yStart < t5) {
        deltaY = t5 - yStart;
        t6 = _this._y;
        t7 = t6.offset;
        t8 = _this._cacheYStride;
        if (typeof t8 !== "number")
          return t8.$mul();
        if (typeof t7 !== "number")
          return t7.$add();
        t6.offset = t7 + t8 * deltaY;
        t8 = _this._u;
        t7 = t8.offset;
        t6 = _this._cacheUVStride;
        t9 = C.JSInt_methods._shrOtherPositive$1(deltaY, 1);
        if (typeof t6 !== "number")
          return t6.$mul();
        t9 = t6 * t9;
        if (typeof t7 !== "number")
          return t7.$add();
        t8.offset = t7 + t9;
        t7 = _this._v;
        t8 = t7.offset;
        if (typeof t8 !== "number")
          return t8.$add();
        t7.offset = t8 + t9;
        if (t4 != null) {
          t6 = t4.offset;
          t7 = _this._webp.width;
          if (typeof t7 !== "number")
            return t7.$mul();
          if (typeof t6 !== "number")
            return t6.$add();
          t4.offset = t6 + t7 * deltaY;
        }
        yStart = t5;
      }
      if (yStart < yEnd) {
        t6 = _this._y;
        t7 = t6.offset;
        t8 = _this._cropLeft;
        if (typeof t7 !== "number")
          return t7.$add();
        if (typeof t8 !== "number")
          return H.iae(t8);
        t6.offset = t7 + t8;
        t7 = _this._u;
        t6 = t7.offset;
        t9 = t8 >>> 1;
        if (typeof t6 !== "number")
          return t6.$add();
        t7.offset = t6 + t9;
        t6 = _this._v;
        t7 = t6.offset;
        if (typeof t7 !== "number")
          return t7.$add();
        t6.offset = t7 + t9;
        if (t4 != null) {
          t6 = t4.offset;
          if (typeof t6 !== "number")
            return t6.$add();
          t4.offset = t6 + t8;
        }
        t4 = _this._cropRight;
        if (typeof t4 !== "number")
          return t4.$sub();
        _this._put$3(yStart - t5, t4 - t8, yEnd - yStart);
      }
      if (t3) {
        t3 = _this._cacheY;
        t4 = _this._cacheYStride;
        if (typeof t4 !== "number")
          return H.iae(t4);
        t3.memcpy$4(t1, ySize, yDst, 16 * t4);
        t4 = _this._cacheU;
        t1 = _this._cacheUVStride;
        if (typeof t1 !== "number")
          return H.iae(t1);
        t4.memcpy$4(t2, uvSize, uDst, 8 * t1);
        t1 = _this._cacheV;
        t4 = _this._cacheUVStride;
        if (typeof t4 !== "number")
          return H.iae(t4);
        t1.memcpy$4(t2, uvSize, vDst, 8 * t4);
      }
      return true;
    },
    _put$3: function(mbY, mbW, mbH) {
      if (mbW <= 0 || mbH <= 0)
        return false;
      this._emitFancyRGB$3(mbY, mbW, mbH);
      this._emitAlphaRGB$3(mbY, mbW, mbH);
      return true;
    },
    _clip8$1: function(v) {
      var d;
      if ((v & -4194304) >>> 0 === 0)
        d = C.JSInt_methods._shrOtherPositive$1(v, 14);
      else
        d = v < 0 ? 0 : 255;
      return d;
    },
    _yuvToRgb$4: function(y, u, v, rgb) {
      var t1;
      if (typeof y !== "number")
        return H.iae(y);
      t1 = 19077 * y;
      rgb.$indexSet(0, 0, this._clip8$1(t1 + 26149 * v + -3644112));
      rgb.$indexSet(0, 1, this._clip8$1(t1 - 6419 * u - 13320 * v + 2229552));
      rgb.$indexSet(0, 2, this._clip8$1(t1 + 33050 * u + -4527440));
    },
    _upsample$9: function(topY, bottomY, topU, topV, curU, curV, topDst, bottomDst, len) {
      var t4, tl_uv, l_uv, uv0, x, t5, t_uv, uv, avg, diag_12, diag_03, uv1, t6, t7, t8, t9, t10, d, t11, _this = this, _null = null,
        LOAD_UV = new A.VP8__upsample_LOAD_UV(),
        t1 = len - 1,
        lastPixelPair = C.JSInt_methods._shrOtherPositive$1(t1, 1),
        t2 = topU.buffer,
        t3 = topU.offset;
      if (typeof t3 !== "number")
        return t3.$add();
      t3 = J.$index$asx(t2, t3);
      t2 = topV.buffer;
      t4 = topV.offset;
      if (typeof t4 !== "number")
        return t4.$add();
      tl_uv = LOAD_UV.call$2(t3, J.$index$asx(t2, t4));
      t4 = curU.buffer;
      t2 = curU.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      t2 = J.$index$asx(t4, t2);
      t4 = curV.buffer;
      t3 = curV.offset;
      if (typeof t3 !== "number")
        return t3.$add();
      l_uv = LOAD_UV.call$2(t2, J.$index$asx(t4, t3));
      if (typeof tl_uv !== "number")
        return H.iae(tl_uv);
      if (typeof l_uv !== "number")
        return H.iae(l_uv);
      uv0 = C.JSInt_methods._shrOtherPositive$1(3 * tl_uv + l_uv + 131074, 2);
      t3 = topY.buffer;
      t4 = topY.offset;
      if (typeof t4 !== "number")
        return t4.$add();
      _this._yuvToRgb$4(J.$index$asx(t3, t4), uv0 & 255, uv0 >>> 16, topDst);
      topDst.$indexSet(0, 3, 255);
      t2 = bottomY != null;
      if (t2) {
        uv0 = C.JSInt_methods._shrOtherPositive$1(3 * l_uv + tl_uv + 131074, 2);
        t3 = bottomY.buffer;
        t4 = bottomY.offset;
        if (typeof t4 !== "number")
          return t4.$add();
        _this._yuvToRgb$4(J.$index$asx(t3, t4), uv0 & 255, uv0 >>> 16, bottomDst);
        bottomDst.$indexSet(0, 3, 255);
      }
      for (x = 1; x <= lastPixelPair; ++x, l_uv = uv, tl_uv = t_uv) {
        t3 = topU.buffer;
        t4 = topU.offset;
        if (typeof t4 !== "number")
          return t4.$add();
        t4 = J.$index$asx(t3, t4 + x);
        t3 = topV.buffer;
        t5 = topV.offset;
        if (typeof t5 !== "number")
          return t5.$add();
        t_uv = LOAD_UV.call$2(t4, J.$index$asx(t3, t5 + x));
        t5 = curU.buffer;
        t3 = curU.offset;
        if (typeof t3 !== "number")
          return t3.$add();
        t3 = J.$index$asx(t5, t3 + x);
        t5 = curV.buffer;
        t4 = curV.offset;
        if (typeof t4 !== "number")
          return t4.$add();
        uv = LOAD_UV.call$2(t3, J.$index$asx(t5, t4 + x));
        if (typeof t_uv !== "number")
          return H.iae(t_uv);
        if (typeof uv !== "number")
          return H.iae(uv);
        avg = tl_uv + t_uv + l_uv + uv + 524296;
        diag_12 = C.JSInt_methods._shrOtherPositive$1(avg + 2 * (t_uv + l_uv), 3);
        diag_03 = C.JSInt_methods._shrOtherPositive$1(avg + 2 * (tl_uv + uv), 3);
        uv0 = C.JSInt_methods._shrOtherPositive$1(diag_12 + tl_uv, 1);
        uv1 = C.JSInt_methods._shrOtherPositive$1(diag_03 + t_uv, 1);
        t4 = 2 * x;
        t5 = t4 - 1;
        t3 = topY.buffer;
        t6 = topY.offset;
        if (typeof t6 !== "number")
          return t6.$add();
        t6 = J.$index$asx(t3, t6 + t5);
        t3 = uv0 & 255;
        t7 = uv0 >>> 16;
        t8 = t5 * 4;
        t9 = Z.InputBuffer$from(topDst, _null, t8);
        if (typeof t6 !== "number")
          return H.iae(t6);
        t6 = 19077 * t6;
        t10 = t6 + 26149 * t7 + -3644112;
        if ((t10 & -4194304) >>> 0 === 0)
          d = C.JSInt_methods._shrOtherPositive$1(t10, 14);
        else
          d = t10 < 0 ? 0 : 255;
        t10 = t9.buffer;
        t11 = t9.offset;
        if (typeof t11 !== "number")
          return t11.$add();
        J.$indexSet$ax(t10, t11, d);
        t7 = t6 - 6419 * t3 - 13320 * t7 + 2229552;
        if ((t7 & -4194304) >>> 0 === 0)
          d = C.JSInt_methods._shrOtherPositive$1(t7, 14);
        else
          d = t7 < 0 ? 0 : 255;
        t7 = t9.buffer;
        t10 = t9.offset;
        if (typeof t10 !== "number")
          return t10.$add();
        J.$indexSet$ax(t7, t10 + 1, d);
        t3 = t6 + 33050 * t3 + -4527440;
        if ((t3 & -4194304) >>> 0 === 0)
          d = C.JSInt_methods._shrOtherPositive$1(t3, 14);
        else
          d = t3 < 0 ? 0 : 255;
        t3 = t9.buffer;
        t6 = t9.offset;
        if (typeof t6 !== "number")
          return t6.$add();
        J.$indexSet$ax(t3, t6 + 2, d);
        t6 = t9.buffer;
        t9 = t9.offset;
        if (typeof t9 !== "number")
          return t9.$add();
        J.$indexSet$ax(t6, t9 + 3, 255);
        t9 = t4 - 0;
        t6 = topY.buffer;
        t3 = topY.offset;
        if (typeof t3 !== "number")
          return t3.$add();
        t3 = J.$index$asx(t6, t3 + t9);
        t6 = uv1 & 255;
        t7 = uv1 >>> 16;
        t9 = Z.InputBuffer$from(topDst, _null, t9 * 4);
        if (typeof t3 !== "number")
          return H.iae(t3);
        t3 = 19077 * t3;
        t10 = t3 + 26149 * t7 + -3644112;
        if ((t10 & -4194304) >>> 0 === 0)
          d = C.JSInt_methods._shrOtherPositive$1(t10, 14);
        else
          d = t10 < 0 ? 0 : 255;
        t10 = t9.buffer;
        t11 = t9.offset;
        if (typeof t11 !== "number")
          return t11.$add();
        J.$indexSet$ax(t10, t11, d);
        t7 = t3 - 6419 * t6 - 13320 * t7 + 2229552;
        if ((t7 & -4194304) >>> 0 === 0)
          d = C.JSInt_methods._shrOtherPositive$1(t7, 14);
        else
          d = t7 < 0 ? 0 : 255;
        t7 = t9.buffer;
        t10 = t9.offset;
        if (typeof t10 !== "number")
          return t10.$add();
        J.$indexSet$ax(t7, t10 + 1, d);
        t6 = t3 + 33050 * t6 + -4527440;
        if ((t6 & -4194304) >>> 0 === 0)
          d = C.JSInt_methods._shrOtherPositive$1(t6, 14);
        else
          d = t6 < 0 ? 0 : 255;
        t3 = t9.buffer;
        t6 = t9.offset;
        if (typeof t6 !== "number")
          return t6.$add();
        J.$indexSet$ax(t3, t6 + 2, d);
        t6 = t9.buffer;
        t9 = t9.offset;
        if (typeof t9 !== "number")
          return t9.$add();
        J.$indexSet$ax(t6, t9 + 3, 255);
        if (t2) {
          uv0 = C.JSInt_methods._shrOtherPositive$1(diag_03 + l_uv, 1);
          uv1 = C.JSInt_methods._shrOtherPositive$1(diag_12 + uv, 1);
          t3 = bottomY.buffer;
          t6 = bottomY.offset;
          if (typeof t6 !== "number")
            return t6.$add();
          t5 = J.$index$asx(t3, t6 + t5);
          t6 = uv0 & 255;
          t3 = uv0 >>> 16;
          t8 = Z.InputBuffer$from(bottomDst, _null, t8);
          if (typeof t5 !== "number")
            return H.iae(t5);
          t5 = 19077 * t5;
          t7 = t5 + 26149 * t3 + -3644112;
          if ((t7 & -4194304) >>> 0 === 0)
            d = C.JSInt_methods._shrOtherPositive$1(t7, 14);
          else
            d = t7 < 0 ? 0 : 255;
          t7 = t8.buffer;
          t9 = t8.offset;
          if (typeof t9 !== "number")
            return t9.$add();
          J.$indexSet$ax(t7, t9, d);
          t3 = t5 - 6419 * t6 - 13320 * t3 + 2229552;
          if ((t3 & -4194304) >>> 0 === 0)
            d = C.JSInt_methods._shrOtherPositive$1(t3, 14);
          else
            d = t3 < 0 ? 0 : 255;
          t3 = t8.buffer;
          t7 = t8.offset;
          if (typeof t7 !== "number")
            return t7.$add();
          J.$indexSet$ax(t3, t7 + 1, d);
          t6 = t5 + 33050 * t6 + -4527440;
          if ((t6 & -4194304) >>> 0 === 0)
            d = C.JSInt_methods._shrOtherPositive$1(t6, 14);
          else
            d = t6 < 0 ? 0 : 255;
          t3 = t8.buffer;
          t5 = t8.offset;
          if (typeof t5 !== "number")
            return t5.$add();
          J.$indexSet$ax(t3, t5 + 2, d);
          t5 = t8.buffer;
          t8 = t8.offset;
          if (typeof t8 !== "number")
            return t8.$add();
          J.$indexSet$ax(t5, t8 + 3, 255);
          t8 = bottomY.buffer;
          t5 = bottomY.offset;
          if (typeof t5 !== "number")
            return t5.$add();
          t5 = J.$index$asx(t8, t5 + t4);
          t8 = uv1 & 255;
          t3 = uv1 >>> 16;
          t4 = Z.InputBuffer$from(bottomDst, _null, t4 * 4);
          if (typeof t5 !== "number")
            return H.iae(t5);
          t5 = 19077 * t5;
          t6 = t5 + 26149 * t3 + -3644112;
          if ((t6 & -4194304) >>> 0 === 0)
            d = C.JSInt_methods._shrOtherPositive$1(t6, 14);
          else
            d = t6 < 0 ? 0 : 255;
          t6 = t4.buffer;
          t7 = t4.offset;
          if (typeof t7 !== "number")
            return t7.$add();
          J.$indexSet$ax(t6, t7, d);
          t3 = t5 - 6419 * t8 - 13320 * t3 + 2229552;
          if ((t3 & -4194304) >>> 0 === 0)
            d = C.JSInt_methods._shrOtherPositive$1(t3, 14);
          else
            d = t3 < 0 ? 0 : 255;
          t3 = t4.buffer;
          t6 = t4.offset;
          if (typeof t6 !== "number")
            return t6.$add();
          J.$indexSet$ax(t3, t6 + 1, d);
          t8 = t5 + 33050 * t8 + -4527440;
          if ((t8 & -4194304) >>> 0 === 0)
            d = C.JSInt_methods._shrOtherPositive$1(t8, 14);
          else
            d = t8 < 0 ? 0 : 255;
          t3 = t4.buffer;
          t5 = t4.offset;
          if (typeof t5 !== "number")
            return t5.$add();
          J.$indexSet$ax(t3, t5 + 2, d);
          t5 = t4.buffer;
          t4 = t4.offset;
          if (typeof t4 !== "number")
            return t4.$add();
          J.$indexSet$ax(t5, t4 + 3, 255);
        }
      }
      if ((len & 1) === 0) {
        uv0 = C.JSInt_methods._shrOtherPositive$1(3 * tl_uv + l_uv + 131074, 2);
        t3 = topY.buffer;
        t4 = topY.offset;
        if (typeof t4 !== "number")
          return t4.$add();
        t4 = J.$index$asx(t3, t4 + t1);
        t3 = t1 * 4;
        t5 = Z.InputBuffer$from(topDst, _null, t3);
        _this._yuvToRgb$4(t4, uv0 & 255, uv0 >>> 16, t5);
        t5.$indexSet(0, 3, 255);
        if (t2) {
          uv0 = C.JSInt_methods._shrOtherPositive$1(3 * l_uv + tl_uv + 131074, 2);
          t2 = bottomY.buffer;
          t4 = bottomY.offset;
          if (typeof t4 !== "number")
            return t4.$add();
          t1 = J.$index$asx(t2, t4 + t1);
          t3 = Z.InputBuffer$from(bottomDst, _null, t3);
          _this._yuvToRgb$4(t1, uv0 & 255, uv0 >>> 16, t3);
          t3.$indexSet(0, 3, 255);
        }
      }
    },
    _emitAlphaRGB$3: function(mbY, mbW, mbH) {
      var t2, t3, stride, alpha, numRows, startY, dst, y, x, t4, _this = this,
        t1 = _this._a;
      if (t1 == null)
        return;
      t2 = _this._webp;
      t3 = t2.width;
      if (typeof t3 !== "number")
        return t3.$mul();
      stride = t3 * 4;
      alpha = Z.InputBuffer$from(t1, null, 0);
      if (mbY === 0) {
        numRows = mbH - 1;
        startY = mbY;
      } else {
        startY = mbY - 1;
        t1 = alpha.offset;
        if (typeof t1 !== "number")
          return t1.$sub();
        alpha.offset = t1 - t3;
        numRows = mbH;
      }
      dst = Z.InputBuffer$(_this.output.getBytes$0(), false, null, startY * stride + 3);
      t1 = _this._cropTop;
      if (typeof t1 !== "number")
        return t1.$add();
      t3 = _this._cropBottom;
      if (t1 + mbY + mbH === t3) {
        if (typeof t3 !== "number")
          return t3.$sub();
        numRows = t3 - t1 - startY;
      }
      for (y = 0; y < numRows; ++y) {
        for (x = 0; x < mbW; ++x) {
          t1 = alpha.buffer;
          t3 = alpha.offset;
          if (typeof t3 !== "number")
            return t3.$add();
          t3 = J.$index$asx(t1, t3 + x);
          if (typeof t3 !== "number")
            return t3.$and();
          t1 = dst.buffer;
          t4 = dst.offset;
          if (typeof t4 !== "number")
            return t4.$add();
          J.$indexSet$ax(t1, t4 + 4 * x, t3 & 255);
        }
        t1 = alpha.offset;
        t3 = t2.width;
        if (typeof t1 !== "number")
          return t1.$add();
        if (typeof t3 !== "number")
          return H.iae(t3);
        alpha.offset = t1 + t3;
        t3 = dst.offset;
        if (typeof t3 !== "number")
          return t3.$add();
        dst.offset = t3 + stride;
      }
    },
    _emitFancyRGB$3: function(mbY, mbW, mbH) {
      var dst, curY, curU, curV, yEnd, uvW, stride, topU, topV, numLinesOut, y, t3, t4, _this = this, _null = null,
        t1 = _this.output.getBytes$0(),
        t2 = _this._webp.width;
      if (typeof t2 !== "number")
        return H.iae(t2);
      dst = Z.InputBuffer$(t1, false, _null, mbY * t2 * 4);
      curY = Z.InputBuffer$from(_this._y, _null, 0);
      curU = Z.InputBuffer$from(_this._u, _null, 0);
      curV = Z.InputBuffer$from(_this._v, _null, 0);
      yEnd = mbY + mbH;
      uvW = C.JSInt_methods._shrOtherPositive$1(mbW + 1, 1);
      stride = t2 * 4;
      topU = Z.InputBuffer$from(_this._tmpU, _null, 0);
      topV = Z.InputBuffer$from(_this._tmpV, _null, 0);
      if (mbY === 0) {
        _this._upsample$9(curY, _null, curU, curV, curU, curV, dst, _null, mbW);
        numLinesOut = mbH;
      } else {
        _this._upsample$9(_this._tmpY, curY, topU, topV, curU, curV, Z.InputBuffer$from(dst, _null, -stride), dst, mbW);
        numLinesOut = mbH + 1;
      }
      topU.set$buffer(0, curU.buffer);
      topV.set$buffer(0, curV.buffer);
      for (t1 = 2 * stride, t2 = -stride, y = mbY; y += 2, y < yEnd;) {
        topU.offset = curU.offset;
        topV.offset = curV.offset;
        t3 = curU.offset;
        t4 = _this._cacheUVStride;
        if (typeof t3 !== "number")
          return t3.$add();
        if (typeof t4 !== "number")
          return H.iae(t4);
        curU.offset = t3 + t4;
        t3 = curV.offset;
        if (typeof t3 !== "number")
          return t3.$add();
        curV.offset = t3 + t4;
        t4 = dst.offset;
        if (typeof t4 !== "number")
          return t4.$add();
        dst.offset = t4 + t1;
        t4 = curY.offset;
        t3 = _this._cacheYStride;
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (typeof t4 !== "number")
          return t4.$add();
        curY.offset = t4 + 2 * t3;
        _this._upsample$9(Z.InputBuffer$from(curY, _null, -t3), curY, topU, topV, curU, curV, Z.InputBuffer$from(dst, _null, t2), dst, mbW);
      }
      t1 = curY.offset;
      t2 = _this._cacheYStride;
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      curY.offset = t1 + t2;
      t1 = _this._cropTop;
      if (typeof t1 !== "number")
        return t1.$add();
      t2 = _this._cropBottom;
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (t1 + yEnd < t2) {
        _this._tmpY.memcpy$3(0, mbW, curY);
        _this._tmpU.memcpy$3(0, uvW, curU);
        _this._tmpV.memcpy$3(0, uvW, curV);
        --numLinesOut;
      } else if ((yEnd & 1) === 0)
        _this._upsample$9(curY, _null, curU, curV, curU, curV, Z.InputBuffer$from(dst, _null, stride), _null, mbW);
      return numLinesOut;
    },
    _decompressAlphaRows$2: function(row, numRows) {
      var t2, t3, b, t4, webp, t5, t6, totalNumPixels, _this = this, _null = null,
        t1 = _this._webp,
        width = t1.width,
        height = t1.height;
      if (row >= 0)
        if (numRows > 0) {
          if (typeof height !== "number")
            return H.iae(height);
          t1 = row + numRows > height;
        } else
          t1 = true;
      else
        t1 = true;
      if (t1)
        return _null;
      if (row === 0) {
        if (typeof width !== "number")
          return width.$mul();
        if (typeof height !== "number")
          return H.iae(height);
        t1 = width * height;
        _this._alphaPlane = new Uint8Array(t1);
        t2 = _this._alphaData;
        t3 = new S.WebPAlpha(t2, width, height);
        b = t2.readByte$0();
        if (typeof b !== "number")
          return b.$and();
        t3.method = b & 3;
        t3.filter = C.JSInt_methods._shrOtherPositive$1(b, 2) & 3;
        t3.preProcessing = C.JSInt_methods._shrOtherPositive$1(b, 4) & 3;
        t3.rsrv = C.JSInt_methods._shrOtherPositive$1(b, 6) & 3;
        if (t3.get$isValid()) {
          t4 = t3.method;
          if (t4 === 0) {
            t4 = t2.end;
            t2 = t2.offset;
            if (typeof t2 !== "number")
              return H.iae(t2);
            if (t4 - t2 < t1)
              t3.rsrv = 1;
          } else if (t4 === 1) {
            webp = new D.WebPInfo(H.setRuntimeTypeInfo([], type$.JSArray_legacy_WebPFrame));
            webp.width = width;
            webp.height = height;
            t1 = H.setRuntimeTypeInfo([], type$.JSArray_legacy_HTreeGroup);
            t4 = H.setRuntimeTypeInfo([], type$.JSArray_legacy_VP8LTransform);
            t5 = new Uint32Array(2);
            t6 = new A.VP8LBitReader(t2, t5);
            t5 = t6._buffer8 = H.NativeUint8List_NativeUint8List$view(t5.buffer, 0, _null);
            C.NativeUint8List_methods.$indexSet(t5, 0, t2.readByte$0());
            C.NativeUint8List_methods.$indexSet(t5, 1, t2.readByte$0());
            C.NativeUint8List_methods.$indexSet(t5, 2, t2.readByte$0());
            C.NativeUint8List_methods.$indexSet(t5, 3, t2.readByte$0());
            C.NativeUint8List_methods.$indexSet(t5, 4, t2.readByte$0());
            C.NativeUint8List_methods.$indexSet(t5, 5, t2.readByte$0());
            C.NativeUint8List_methods.$indexSet(t5, 6, t2.readByte$0());
            C.NativeUint8List_methods.$indexSet(t5, 7, t2.readByte$0());
            t4 = t3._vp8l = new S.InternalVP8L(t6, webp, t1, t4);
            t4._ioWidth = width;
            t4._decodeImageStream$3(width, height, true);
            t1 = t3._vp8l;
            t2 = t1._transforms;
            t4 = t2.length;
            if (t4 === 1) {
              if (0 >= t4)
                return H.ioore(t2, 0);
              t1 = t2[0].type === 3 && t1._is8bOptimizable$0();
            } else
              t1 = false;
            if (t1) {
              t3._use8bDecode = true;
              t1 = t3._vp8l;
              t2 = t1.webp;
              t4 = t2.width;
              t2 = t2.height;
              if (typeof t4 !== "number")
                return t4.$mul();
              if (typeof t2 !== "number")
                return H.iae(t2);
              totalNumPixels = t4 * t2;
              t1._argbCache = 0;
              t2 = C.JSInt_methods.$mod(totalNumPixels, 4);
              t2 = new Uint8Array(totalNumPixels + (4 - t2));
              t1._pixels8 = t2;
              t1._pixels = H.NativeUint32List_NativeUint32List$view(t2.buffer, 0, _null);
            } else {
              t3._use8bDecode = false;
              t3._vp8l._allocateInternalBuffers32b$0();
            }
          } else
            t3.rsrv = 1;
        }
        _this._alpha = t3;
      }
      t1 = _this._alpha;
      if (!t1.isAlphaDecoded)
        if (!t1.decode$3(row, numRows, _this._alphaPlane))
          return _null;
      t1 = _this._alphaPlane;
      if (typeof width !== "number")
        return H.iae(width);
      return Z.InputBuffer$(t1, false, _null, row * width);
    },
    _parseResiduals$2: function(mb, tokenBr) {
      var block, dst, leftMb, dc, nz, dc0, i, acProba, first, tnz, lnz, nonZeroY, y, l, nzCoeffs, x, nz_coeffs, outLeftNz, outTopNz, nonZeroUV, ch, _this = this,
        bands = _this._proba.bands,
        q = C.JSArray_methods.$index(_this._dqm, _this._segment),
        t1 = _this._mbData,
        t2 = _this._mbX;
      if (t2 >= t1.length)
        return H.ioore(t1, t2);
      block = t1[t2];
      dst = Z.InputBuffer$(block.coeffs, false, null, 0);
      t2 = _this._mbInfo;
      if (0 >= t2.length)
        return H.ioore(t2, 0);
      leftMb = t2[0];
      t2 = dst.offset;
      if (typeof t2 !== "number")
        return H.iae(t2);
      dst.memset$3(0, dst.end - t2, 0);
      if (!H.boolConversionCheck(block.isIntra4x4)) {
        dc = Z.InputBuffer$(new Int16Array(16), false, null, 0);
        t1 = mb.nzDc;
        t2 = leftMb.nzDc;
        nz = _this._getCoeffs$6(tokenBr, bands[1], t1 + t2, q.y2Mat, 0, dc);
        mb.nzDc = leftMb.nzDc = nz > 0 ? 1 : 0;
        if (nz > 1)
          _this._transformWHT$2(dc, dst);
        else {
          t1 = dc.buffer;
          t2 = dc.offset;
          if (typeof t2 !== "number")
            return t2.$add();
          t2 = J.$index$asx(t1, t2);
          if (typeof t2 !== "number")
            return t2.$add();
          dc0 = C.JSInt_methods._shrOtherPositive$1(t2 + 3, 3);
          for (i = 0; i < 256; i += 16) {
            t1 = dst.buffer;
            t2 = dst.offset;
            if (typeof t2 !== "number")
              return t2.$add();
            J.$indexSet$ax(t1, t2 + i, dc0);
          }
        }
        acProba = bands[0];
        first = 1;
      } else {
        acProba = bands[3];
        first = 0;
      }
      tnz = mb.nz & 15;
      lnz = leftMb.nz & 15;
      for (nonZeroY = 0, y = 0; y < 4; ++y) {
        l = lnz & 1;
        for (nzCoeffs = 0, x = 0; x < 4; ++x, nzCoeffs = nz_coeffs) {
          nz = _this._getCoeffs$6(tokenBr, acProba, l + (tnz & 1), q.y1Mat, first, dst);
          l = nz > first ? 1 : 0;
          tnz = tnz >>> 1 | l << 7;
          t1 = dst.buffer;
          t2 = dst.offset;
          if (typeof t2 !== "number")
            return t2.$add();
          t1 = J.$index$asx(t1, t2) !== 0 ? 1 : 0;
          if (nz > 3)
            t1 = 3;
          else if (nz > 1)
            t1 = 2;
          nz_coeffs = nzCoeffs << 2 | t1;
          t1 = dst.offset;
          if (typeof t1 !== "number")
            return t1.$add();
          dst.offset = t1 + 16;
        }
        tnz = tnz >>> 4;
        lnz = lnz >>> 1 | l << 7;
        nonZeroY = (nonZeroY << 8 | nzCoeffs) >>> 0;
      }
      outLeftNz = lnz >>> 4;
      for (outTopNz = tnz, nonZeroUV = 0, ch = 0; ch < 4; ch += 2) {
        t1 = 4 + ch;
        tnz = C.JSInt_methods._shrBothPositive$1(mb.nz, t1);
        lnz = C.JSInt_methods._shrBothPositive$1(leftMb.nz, t1);
        for (nzCoeffs = 0, y = 0; y < 2; ++y) {
          l = lnz & 1;
          for (x = 0; x < 2; ++x, nzCoeffs = nz_coeffs) {
            nz = _this._getCoeffs$6(tokenBr, bands[2], l + (tnz & 1), q.uvMat, 0, dst);
            l = nz > 0 ? 1 : 0;
            tnz = tnz >>> 1 | l << 3;
            t1 = dst.buffer;
            t2 = dst.offset;
            if (typeof t2 !== "number")
              return t2.$add();
            t1 = J.$index$asx(t1, t2) !== 0 ? 1 : 0;
            if (nz > 3)
              t1 = 3;
            else if (nz > 1)
              t1 = 2;
            nz_coeffs = (nzCoeffs << 2 | t1) >>> 0;
            t1 = dst.offset;
            if (typeof t1 !== "number")
              return t1.$add();
            dst.offset = t1 + 16;
          }
          tnz = tnz >>> 2;
          lnz = lnz >>> 1 | l << 5;
        }
        nonZeroUV = (nonZeroUV | C.JSInt_methods._shlPositive$1(nzCoeffs, 4 * ch)) >>> 0;
        outTopNz = (outTopNz | C.JSInt_methods._shlPositive$1(tnz << 4 >>> 0, ch)) >>> 0;
        outLeftNz = (outLeftNz | C.JSInt_methods._shlPositive$1(lnz & 240, ch)) >>> 0;
      }
      mb.nz = outTopNz;
      leftMb.nz = outLeftNz;
      block.nonZeroY = nonZeroY;
      block.nonZeroUV = nonZeroUV;
      if ((nonZeroUV & 43690) === 0)
        q.toString;
      return (nonZeroY | nonZeroUV) >>> 0 === 0;
    },
    _transformWHT$2: function(src, out) {
      var t1, i, t2, t3, t4, t5, a0, t6, t7, a1, a2, a3, oi, dc,
        tmp = new Int32Array(16);
      for (t1 = tmp.length, i = 0; i < 4; ++i) {
        t2 = src.buffer;
        t3 = src.offset;
        if (typeof t3 !== "number")
          return t3.$add();
        t3 = J.$index$asx(t2, t3 + i);
        t2 = 12 + i;
        t4 = src.buffer;
        t5 = src.offset;
        if (typeof t5 !== "number")
          return t5.$add();
        t5 = J.$index$asx(t4, t5 + t2);
        if (typeof t3 !== "number")
          return t3.$add();
        if (typeof t5 !== "number")
          return H.iae(t5);
        a0 = t3 + t5;
        t5 = 4 + i;
        t3 = src.buffer;
        t4 = src.offset;
        if (typeof t4 !== "number")
          return t4.$add();
        t4 = J.$index$asx(t3, t4 + t5);
        t3 = 8 + i;
        t6 = src.buffer;
        t7 = src.offset;
        if (typeof t7 !== "number")
          return t7.$add();
        t7 = J.$index$asx(t6, t7 + t3);
        if (typeof t4 !== "number")
          return t4.$add();
        if (typeof t7 !== "number")
          return H.iae(t7);
        a1 = t4 + t7;
        t7 = src.buffer;
        t4 = src.offset;
        if (typeof t4 !== "number")
          return t4.$add();
        t4 = J.$index$asx(t7, t4 + t5);
        t7 = src.buffer;
        t6 = src.offset;
        if (typeof t6 !== "number")
          return t6.$add();
        t6 = J.$index$asx(t7, t6 + t3);
        if (typeof t4 !== "number")
          return t4.$sub();
        if (typeof t6 !== "number")
          return H.iae(t6);
        a2 = t4 - t6;
        t6 = src.buffer;
        t4 = src.offset;
        if (typeof t4 !== "number")
          return t4.$add();
        t4 = J.$index$asx(t6, t4 + i);
        t6 = src.buffer;
        t7 = src.offset;
        if (typeof t7 !== "number")
          return t7.$add();
        t7 = J.$index$asx(t6, t7 + t2);
        if (typeof t4 !== "number")
          return t4.$sub();
        if (typeof t7 !== "number")
          return H.iae(t7);
        a3 = t4 - t7;
        if (i >= t1)
          return H.ioore(tmp, i);
        tmp[i] = a0 + a1;
        if (t3 >= t1)
          return H.ioore(tmp, t3);
        tmp[t3] = a0 - a1;
        tmp[t5] = a3 + a2;
        if (t2 >= t1)
          return H.ioore(tmp, t2);
        tmp[t2] = a3 - a2;
      }
      for (oi = 0, i = 0; i < 4; ++i) {
        t2 = i * 4;
        if (t2 >= t1)
          return H.ioore(tmp, t2);
        dc = tmp[t2] + 3;
        t3 = 3 + t2;
        if (t3 >= t1)
          return H.ioore(tmp, t3);
        t3 = tmp[t3];
        a0 = dc + t3;
        t4 = 1 + t2;
        if (t4 >= t1)
          return H.ioore(tmp, t4);
        t4 = tmp[t4];
        t2 = 2 + t2;
        if (t2 >= t1)
          return H.ioore(tmp, t2);
        t2 = tmp[t2];
        a1 = t4 + t2;
        a2 = t4 - t2;
        a3 = dc - t3;
        t3 = C.JSInt_methods._shrOtherPositive$1(a0 + a1, 3);
        t2 = out.buffer;
        t4 = out.offset;
        if (typeof t4 !== "number")
          return t4.$add();
        J.$indexSet$ax(t2, t4 + oi, t3);
        t3 = C.JSInt_methods._shrOtherPositive$1(a3 + a2, 3);
        t4 = out.buffer;
        t2 = out.offset;
        if (typeof t2 !== "number")
          return t2.$add();
        J.$indexSet$ax(t4, t2 + (oi + 16), t3);
        t3 = C.JSInt_methods._shrOtherPositive$1(a0 - a1, 3);
        t2 = out.buffer;
        t4 = out.offset;
        if (typeof t4 !== "number")
          return t4.$add();
        J.$indexSet$ax(t2, t4 + (oi + 32), t3);
        t3 = C.JSInt_methods._shrOtherPositive$1(a3 - a2, 3);
        t4 = out.buffer;
        t2 = out.offset;
        if (typeof t2 !== "number")
          return t2.$add();
        J.$indexSet$ax(t4, t2 + (oi + 48), t3);
        oi += 64;
      }
    },
    _getLargeValue$2: function(br, p) {
      var v, bit1, t1, cat, tab, len, i;
      type$.legacy_List_legacy_int._as(p);
      if (br.getBit$1(p[3]) === 0)
        v = br.getBit$1(p[4]) === 0 ? 2 : 3 + br.getBit$1(p[5]);
      else if (br.getBit$1(p[6]) === 0)
        v = br.getBit$1(p[7]) === 0 ? 5 + br.getBit$1(159) : 7 + 2 * br.getBit$1(165) + br.getBit$1(145);
      else {
        bit1 = br.getBit$1(p[8]);
        t1 = 9 + bit1;
        if (t1 >= 11)
          return H.ioore(p, t1);
        cat = 2 * bit1 + br.getBit$1(p[t1]);
        if (cat >= 4)
          return H.ioore(C.List_sao, cat);
        tab = C.List_sao[cat];
        for (len = tab.length, v = 0, i = 0; i < len; ++i)
          v += v + br.getBit$1(tab[i]);
        v += 3 + C.JSInt_methods._shlPositive$1(8, cat);
      }
      return v;
    },
    _getCoeffs$6: function(br, prob, ctx, dq, n, out) {
      var t1, p, n0, p_ctx, v, bit, t2, shift, t3, t4, t5;
      type$.legacy_List_legacy_VP8BandProbas._as(prob);
      type$.legacy_List_legacy_int._as(dq);
      prob.length;
      if (n >= 8)
        return H.ioore(prob, n);
      t1 = prob[n].probas;
      if (ctx >= 3)
        return H.ioore(t1, ctx);
      p = t1[ctx];
      for (; n < 16; n = n0) {
        if (br.getBit$1(p[0]) === 0)
          return n;
        for (; br.getBit$1(p[1]) === 0;) {
          ++n;
          if (n < 0 || n >= 17)
            return H.ioore(C.List_F1L3, n);
          t1 = C.List_F1L3[n];
          if (t1 >= 8)
            return H.ioore(prob, t1);
          p = prob[t1].probas[0];
          if (n === 16)
            return 16;
        }
        n0 = n + 1;
        if (n0 < 0 || n0 >= 17)
          return H.ioore(C.List_F1L3, n0);
        t1 = C.List_F1L3[n0];
        if (t1 >= 8)
          return H.ioore(prob, t1);
        p_ctx = prob[t1].probas;
        if (br.getBit$1(p[2]) === 0) {
          p = p_ctx[1];
          v = 1;
        } else {
          v = this._getLargeValue$2(br, p);
          p = p_ctx[2];
        }
        if (n < 0 || n >= 16)
          return H.ioore(C.List_cGl1, n);
        t1 = C.List_cGl1[n];
        bit = br._bitUpdate$1(C.JSInt_methods._shrOtherPositive$1(br._range, 1));
        t2 = br._range;
        if (t2 < 0 || t2 >= 128)
          return H.ioore(C.List_8co0, t2);
        shift = C.List_8co0[t2];
        br._range = C.List_wmc[t2];
        br._bits -= shift;
        t2 = bit !== 0 ? -v : v;
        t3 = dq[n > 0 ? 1 : 0];
        t4 = out.buffer;
        t5 = out.offset;
        if (typeof t5 !== "number")
          return t5.$add();
        J.$indexSet$ax(t4, t5 + t1, t2 * t3);
      }
      return 16;
    },
    _parseIntraMode$0: function() {
      var block, ymode, modes, mi, y, x, prob, b, i, mi0, _this = this,
        t1 = _this._mbX,
        ti = 4 * t1,
        $top = _this._intraT,
        left = _this._intraL,
        t2 = _this._mbData;
      if (t1 >= t2.length)
        return H.ioore(t2, t1);
      block = t2[t1];
      t1 = _this.br.getBit$1(145) === 0;
      block.isIntra4x4 = t1;
      block.toString;
      if (!t1) {
        if (_this.br.getBit$1(156) !== 0)
          ymode = _this.br.getBit$1(128) !== 0 ? 1 : 3;
        else
          ymode = _this.br.getBit$1(163) !== 0 ? 2 : 0;
        block.imodes[0] = ymode;
        ($top && C.NativeUint8List_methods).fillRange$3($top, ti, ti + 4, ymode);
        C.NativeUint8List_methods.fillRange$3(left, 0, 4, ymode);
      } else {
        modes = block.imodes;
        for (mi = 0, y = 0; y < 4; ++y, mi = mi0) {
          ymode = left[y];
          for (x = 0; x < 4; ++x) {
            t1 = ti + x;
            if (t1 >= $top.length)
              return H.ioore($top, t1);
            t2 = $top[t1];
            if (t2 >= 10)
              return H.ioore(C.List_799, t2);
            t2 = C.List_799[t2];
            if (ymode < 0 || ymode >= 10)
              return H.ioore(t2, ymode);
            prob = t2[ymode];
            b = _this.br.getBit$1(prob[0]);
            if (b >= 18)
              return H.ioore(C.List_Y3m, b);
            i = C.List_Y3m[b];
            for (; i > 0;) {
              t2 = _this.br;
              if (i >= 9)
                return H.ioore(prob, i);
              t2 = 2 * i + t2.getBit$1(prob[i]);
              if (t2 < 0 || t2 >= 18)
                return H.ioore(C.List_Y3m, t2);
              i = C.List_Y3m[t2];
            }
            ymode = -i;
            $top[t1] = ymode;
          }
          mi0 = mi + 4;
          C.NativeUint8List_methods.setRange$4(modes, mi, mi0, $top, ti);
          if (y >= 4)
            return H.ioore(left, y);
          left[y] = ymode;
        }
      }
      if (_this.br.getBit$1(142) === 0)
        t1 = 0;
      else if (_this.br.getBit$1(114) === 0)
        t1 = 2;
      else
        t1 = _this.br.getBit$1(183) !== 0 ? 1 : 3;
      block.uvmode = t1;
    },
    set$_yuvT: function(_yuvT) {
      this._yuvT = type$.legacy_List_legacy_VP8TopSamples._as(_yuvT);
    },
    set$_mbInfo: function(_mbInfo) {
      this._mbInfo = type$.legacy_List_legacy_VP8MB._as(_mbInfo);
    },
    set$_fInfo: function(_fInfo) {
      this._fInfo = type$.legacy_List_legacy_VP8FInfo._as(_fInfo);
    },
    set$_mbData: function(_mbData) {
      this._mbData = type$.legacy_List_legacy_VP8MBData._as(_mbData);
    },
    set$_fStrengths: function(_fStrengths) {
      this._fStrengths = type$.legacy_List_legacy_List_legacy_VP8FInfo._as(_fStrengths);
    }
  };
  A.VP8__upsample_LOAD_UV.prototype = {
    call$2: function(u, v) {
      if (typeof v !== "number")
        return v.$shl();
      if (typeof u !== "number")
        return u.$or();
      return (u | v << 16) >>> 0;
    },
    $signature: 24
  };
  B.VP8BitReader.prototype = {
    getValue$1: function(bits) {
      var v, bits0;
      for (v = 0; bits0 = bits - 1, bits > 0; bits = bits0)
        v = (v | C.JSInt_methods.$shl(this.getBit$1(128), bits0)) >>> 0;
      return v;
    },
    getSignedValue$1: function(bits) {
      var value = this.getValue$1(bits);
      return this.getValue$1(1) === 1 ? -value : value;
    },
    getBit$1: function(prob) {
      var bit, _this = this,
        t1 = _this._range;
      if (typeof prob !== "number")
        return H.iae(prob);
      bit = _this._bitUpdate$1(C.JSInt_methods._shrOtherPositive$1(t1 * prob, 8));
      if (_this._range <= 126)
        _this._shift$0();
      return bit;
    },
    _bitUpdate$1: function(split) {
      var t2, t3, t4, bits, _this = this,
        t1 = _this._bits;
      if (t1 < 0) {
        t2 = _this.input;
        t3 = t2.end;
        t4 = t2.offset;
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (t3 - t4 >= 1) {
          bits = t2.readByte$0();
          t1 = _this._vp8_bit_reader$_value;
          if (typeof bits !== "number")
            return bits.$or();
          _this._vp8_bit_reader$_value = (bits | t1 << 8) >>> 0;
          t1 = _this._bits += 8;
        } else if (t4 < t3) {
          t1 = t2.readByte$0();
          t2 = _this._vp8_bit_reader$_value;
          if (typeof t1 !== "number")
            return t1.$or();
          _this._vp8_bit_reader$_value = (t1 | t2 << 8) >>> 0;
          t2 = _this._bits += 8;
          t1 = t2;
        } else if (!_this._eof) {
          _this._vp8_bit_reader$_value = _this._vp8_bit_reader$_value << 8 >>> 0;
          t1 += 8;
          _this._bits = t1;
          _this._eof = true;
        }
      }
      t2 = _this._vp8_bit_reader$_value;
      if (C.JSInt_methods.$shr(t2, t1) > split) {
        t3 = split + 1;
        _this._range = _this._range - t3;
        _this._vp8_bit_reader$_value = t2 - C.JSInt_methods.$shl(t3, t1);
        return 1;
      } else {
        _this._range = split;
        return 0;
      }
    },
    _shift$0: function() {
      var shift,
        t1 = this._range;
      if (t1 < 0 || t1 >= 128)
        return H.ioore(C.List_8co0, t1);
      shift = C.List_8co0[t1];
      this._range = C.List_wmc[t1];
      this._bits -= shift;
    }
  };
  V.VP8Filter.prototype = {
    simpleVFilter16$3: function(p, stride, thresh) {
      var i, t1,
        p2 = Z.InputBuffer$from(p, null, 0);
      for (i = 0; i < 16; ++i) {
        t1 = p.offset;
        if (typeof t1 !== "number")
          return t1.$add();
        p2.offset = t1 + i;
        if (this._needsFilter$3(p2, stride, thresh))
          this._doFilter2$2(p2, stride);
      }
    },
    simpleHFilter16$3: function(p, stride, thresh) {
      var i, t1,
        p2 = Z.InputBuffer$from(p, null, 0);
      for (i = 0; i < 16; ++i) {
        t1 = p.offset;
        if (typeof stride !== "number")
          return H.iae(stride);
        if (typeof t1 !== "number")
          return t1.$add();
        p2.offset = t1 + i * stride;
        if (this._needsFilter$3(p2, 1, thresh))
          this._doFilter2$2(p2, 1);
      }
    },
    simpleVFilter16i$3: function(p, stride, thresh) {
      var k, t1,
        p2 = Z.InputBuffer$from(p, null, 0);
      for (k = 3; k > 0; --k) {
        t1 = p2.offset;
        if (typeof stride !== "number")
          return H.iae(stride);
        if (typeof t1 !== "number")
          return t1.$add();
        p2.offset = t1 + 4 * stride;
        this.simpleVFilter16$3(p2, stride, thresh);
      }
    },
    simpleHFilter16i$3: function(p, stride, thresh) {
      var k, t1,
        p2 = Z.InputBuffer$from(p, null, 0);
      for (k = 3; k > 0; --k) {
        t1 = p2.offset;
        if (typeof t1 !== "number")
          return t1.$add();
        p2.offset = t1 + 4;
        this.simpleHFilter16$3(p2, stride, thresh);
      }
    },
    vFilter16i$5: function(p, stride, thresh, ithresh, hev_thresh) {
      var k, t1,
        p2 = Z.InputBuffer$from(p, null, 0);
      for (k = 3; k > 0; --k) {
        t1 = p2.offset;
        if (typeof stride !== "number")
          return H.iae(stride);
        if (typeof t1 !== "number")
          return t1.$add();
        p2.offset = t1 + 4 * stride;
        this._filterLoop24$7(p2, stride, 1, 16, thresh, ithresh, hev_thresh);
      }
    },
    hFilter16i$5: function(p, stride, thresh, ithresh, hev_thresh) {
      var k, t1,
        p2 = Z.InputBuffer$from(p, null, 0);
      for (k = 3; k > 0; --k) {
        t1 = p2.offset;
        if (typeof t1 !== "number")
          return t1.$add();
        p2.offset = t1 + 4;
        this._filterLoop24$7(p2, 1, stride, 16, thresh, ithresh, hev_thresh);
      }
    },
    _filterLoop26$7: function(p, hstride, vstride, size, thresh, ithresh, hev_thresh) {
      var size0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, a, a1, a2, a3,
        p2 = Z.InputBuffer$from(p, null, 0);
      for (; size0 = size - 1, size > 0; size = size0) {
        if (this._needsFilter2$4(p2, hstride, thresh, ithresh))
          if (this._hev$3(p2, hstride, hev_thresh))
            this._doFilter2$2(p2, hstride);
          else {
            if (typeof hstride !== "number")
              return H.iae(hstride);
            t1 = -3 * hstride;
            t2 = p2.buffer;
            t3 = p2.offset;
            if (typeof t3 !== "number")
              return t3.$add();
            t3 = J.$index$asx(t2, t3 + t1);
            t2 = -2 * hstride;
            t4 = p2.buffer;
            t5 = p2.offset;
            if (typeof t5 !== "number")
              return t5.$add();
            t5 = J.$index$asx(t4, t5 + t2);
            t4 = -hstride;
            t6 = p2.buffer;
            t7 = p2.offset;
            if (typeof t7 !== "number")
              return t7.$add();
            t7 = J.$index$asx(t6, t7 + t4);
            t6 = p2.buffer;
            t8 = p2.offset;
            if (typeof t8 !== "number")
              return t8.$add();
            t8 = J.$index$asx(t6, t8);
            t6 = p2.buffer;
            t9 = p2.offset;
            if (typeof t9 !== "number")
              return t9.$add();
            t9 = J.$index$asx(t6, t9 + hstride);
            t6 = 2 * hstride;
            t10 = p2.buffer;
            t11 = p2.offset;
            if (typeof t11 !== "number")
              return t11.$add();
            t11 = J.$index$asx(t10, t11 + t6);
            t10 = $.$get$VP8Filter_sclip1();
            if (typeof t8 !== "number")
              return t8.$sub();
            if (typeof t7 !== "number")
              return H.iae(t7);
            if (typeof t5 !== "number")
              return H.iae(t5);
            if (typeof t9 !== "number")
              return H.iae(t9);
            t12 = 1020 + t5 - t9;
            t10.length;
            if (t12 < 0 || t12 >= 2041)
              return H.ioore(t10, t12);
            t12 = 1020 + 3 * (t8 - t7) + t10[t12];
            if (t12 < 0 || t12 >= 2041)
              return H.ioore(t10, t12);
            a = t10[t12];
            t12 = C.JSInt_methods._shrOtherPositive$1(27 * a + 63, 7);
            a1 = (t12 & 2147483647) - ((t12 & 2147483648) >>> 0);
            t12 = C.JSInt_methods._shrOtherPositive$1(18 * a + 63, 7);
            a2 = (t12 & 2147483647) - ((t12 & 2147483648) >>> 0);
            t12 = C.JSInt_methods._shrOtherPositive$1(9 * a + 63, 7);
            a3 = (t12 & 2147483647) - ((t12 & 2147483648) >>> 0);
            t12 = $.$get$VP8Filter_clip1();
            if (typeof t3 !== "number")
              return H.iae(t3);
            t3 = 255 + t3 + a3;
            t12.length;
            if (t3 < 0 || t3 >= 766)
              return H.ioore(t12, t3);
            t3 = t12[t3];
            t12 = p2.buffer;
            t10 = p2.offset;
            if (typeof t10 !== "number")
              return t10.$add();
            J.$indexSet$ax(t12, t10 + t1, t3);
            t3 = $.$get$VP8Filter_clip1();
            t5 = 255 + t5 + a2;
            t3.length;
            if (t5 < 0 || t5 >= 766)
              return H.ioore(t3, t5);
            t5 = t3[t5];
            t3 = p2.buffer;
            t1 = p2.offset;
            if (typeof t1 !== "number")
              return t1.$add();
            J.$indexSet$ax(t3, t1 + t2, t5);
            t5 = $.$get$VP8Filter_clip1();
            t7 = 255 + t7 + a1;
            t5.length;
            if (t7 < 0 || t7 >= 766)
              return H.ioore(t5, t7);
            t7 = t5[t7];
            t5 = p2.buffer;
            t2 = p2.offset;
            if (typeof t2 !== "number")
              return t2.$add();
            J.$indexSet$ax(t5, t2 + t4, t7);
            t7 = $.$get$VP8Filter_clip1();
            t8 = 255 + t8 - a1;
            t7.length;
            if (t8 < 0 || t8 >= 766)
              return H.ioore(t7, t8);
            t8 = t7[t8];
            t7 = p2.buffer;
            t4 = p2.offset;
            if (typeof t4 !== "number")
              return t4.$add();
            J.$indexSet$ax(t7, t4, t8);
            t8 = $.$get$VP8Filter_clip1();
            t9 = 255 + t9 - a2;
            t8.length;
            if (t9 < 0 || t9 >= 766)
              return H.ioore(t8, t9);
            t9 = t8[t9];
            t8 = p2.buffer;
            t4 = p2.offset;
            if (typeof t4 !== "number")
              return t4.$add();
            J.$indexSet$ax(t8, t4 + hstride, t9);
            t9 = $.$get$VP8Filter_clip1();
            if (typeof t11 !== "number")
              return H.iae(t11);
            t11 = 255 + t11 - a3;
            t9.length;
            if (t11 < 0 || t11 >= 766)
              return H.ioore(t9, t11);
            t11 = t9[t11];
            t9 = p2.buffer;
            t4 = p2.offset;
            if (typeof t4 !== "number")
              return t4.$add();
            J.$indexSet$ax(t9, t4 + t6, t11);
          }
        t1 = p2.offset;
        if (typeof t1 !== "number")
          return t1.$add();
        if (typeof vstride !== "number")
          return H.iae(vstride);
        p2.offset = t1 + vstride;
      }
    },
    _filterLoop24$7: function(p, hstride, vstride, size, thresh, ithresh, hev_thresh) {
      var size0, t1, t2, t3, t4, t5, t6, t7, a, t8, a1, a2, a3,
        p2 = Z.InputBuffer$from(p, null, 0);
      for (; size0 = size - 1, size > 0; size = size0) {
        if (this._needsFilter2$4(p2, hstride, thresh, ithresh))
          if (this._hev$3(p2, hstride, hev_thresh))
            this._doFilter2$2(p2, hstride);
          else {
            if (typeof hstride !== "number")
              return H.iae(hstride);
            t1 = -2 * hstride;
            t2 = p2.buffer;
            t3 = p2.offset;
            if (typeof t3 !== "number")
              return t3.$add();
            t3 = J.$index$asx(t2, t3 + t1);
            t2 = -hstride;
            t4 = p2.buffer;
            t5 = p2.offset;
            if (typeof t5 !== "number")
              return t5.$add();
            t5 = J.$index$asx(t4, t5 + t2);
            t4 = p2.buffer;
            t6 = p2.offset;
            if (typeof t6 !== "number")
              return t6.$add();
            t6 = J.$index$asx(t4, t6);
            t4 = p2.buffer;
            t7 = p2.offset;
            if (typeof t7 !== "number")
              return t7.$add();
            t7 = J.$index$asx(t4, t7 + hstride);
            if (typeof t6 !== "number")
              return t6.$sub();
            if (typeof t5 !== "number")
              return H.iae(t5);
            a = 3 * (t6 - t5);
            t4 = $.$get$VP8Filter_sclip2();
            t8 = C.JSInt_methods._shrOtherPositive$1(a + 4, 3);
            t8 = 112 + ((t8 & 2147483647) - ((t8 & 2147483648) >>> 0));
            t4.length;
            if (t8 < 0 || t8 >= 225)
              return H.ioore(t4, t8);
            a1 = t4[t8];
            t8 = C.JSInt_methods._shrOtherPositive$1(a + 3, 3);
            t8 = 112 + ((t8 & 2147483647) - ((t8 & 2147483648) >>> 0));
            if (t8 < 0 || t8 >= 225)
              return H.ioore(t4, t8);
            a2 = t4[t8];
            t8 = C.JSInt_methods._shrOtherPositive$1(a1 + 1, 1);
            a3 = (t8 & 2147483647) - ((t8 & 2147483648) >>> 0);
            t8 = $.$get$VP8Filter_clip1();
            if (typeof t3 !== "number")
              return H.iae(t3);
            t3 = 255 + t3 + a3;
            t8.length;
            if (t3 < 0 || t3 >= 766)
              return H.ioore(t8, t3);
            t3 = t8[t3];
            t8 = p2.buffer;
            t4 = p2.offset;
            if (typeof t4 !== "number")
              return t4.$add();
            J.$indexSet$ax(t8, t4 + t1, t3);
            t3 = $.$get$VP8Filter_clip1();
            t5 = 255 + t5 + a2;
            t3.length;
            if (t5 < 0 || t5 >= 766)
              return H.ioore(t3, t5);
            t5 = t3[t5];
            t3 = p2.buffer;
            t1 = p2.offset;
            if (typeof t1 !== "number")
              return t1.$add();
            J.$indexSet$ax(t3, t1 + t2, t5);
            t5 = $.$get$VP8Filter_clip1();
            t6 = 255 + t6 - a1;
            t5.length;
            if (t6 < 0 || t6 >= 766)
              return H.ioore(t5, t6);
            t6 = t5[t6];
            t5 = p2.buffer;
            t2 = p2.offset;
            if (typeof t2 !== "number")
              return t2.$add();
            J.$indexSet$ax(t5, t2, t6);
            t6 = $.$get$VP8Filter_clip1();
            if (typeof t7 !== "number")
              return H.iae(t7);
            t7 = 255 + t7 - a3;
            t6.length;
            if (t7 < 0 || t7 >= 766)
              return H.ioore(t6, t7);
            t7 = t6[t7];
            t6 = p2.buffer;
            t2 = p2.offset;
            if (typeof t2 !== "number")
              return t2.$add();
            J.$indexSet$ax(t6, t2 + hstride, t7);
          }
        t1 = p2.offset;
        if (typeof t1 !== "number")
          return t1.$add();
        if (typeof vstride !== "number")
          return H.iae(vstride);
        p2.offset = t1 + vstride;
      }
    },
    _doFilter2$2: function(p, step) {
      var t1, t2, t3, t4, t5, t6, a, a1, a2;
      if (typeof step !== "number")
        return H.iae(step);
      t1 = p.buffer;
      t2 = p.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      t2 = J.$index$asx(t1, t2 + -2 * step);
      t1 = -step;
      t3 = p.buffer;
      t4 = p.offset;
      if (typeof t4 !== "number")
        return t4.$add();
      t4 = J.$index$asx(t3, t4 + t1);
      t3 = p.buffer;
      t5 = p.offset;
      if (typeof t5 !== "number")
        return t5.$add();
      t5 = J.$index$asx(t3, t5);
      t3 = p.buffer;
      t6 = p.offset;
      if (typeof t6 !== "number")
        return t6.$add();
      t6 = J.$index$asx(t3, t6 + step);
      if (typeof t5 !== "number")
        return t5.$sub();
      if (typeof t4 !== "number")
        return H.iae(t4);
      t3 = $.$get$VP8Filter_sclip1();
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (typeof t6 !== "number")
        return H.iae(t6);
      t6 = 1020 + t2 - t6;
      t3.length;
      if (t6 < 0 || t6 >= 2041)
        return H.ioore(t3, t6);
      a = 3 * (t5 - t4) + t3[t6];
      t6 = $.$get$VP8Filter_sclip2();
      t3 = 112 + C.JSInt_methods.toSigned$1(C.JSInt_methods._shrOtherPositive$1(a + 4, 3), 32);
      t6.length;
      if (t3 < 0 || t3 >= 225)
        return H.ioore(t6, t3);
      a1 = t6[t3];
      t3 = $.$get$VP8Filter_sclip2();
      t6 = 112 + C.JSInt_methods.toSigned$1(C.JSInt_methods._shrOtherPositive$1(a + 3, 3), 32);
      t3.length;
      if (t6 < 0 || t6 >= 225)
        return H.ioore(t3, t6);
      a2 = t3[t6];
      t6 = $.$get$VP8Filter_clip1();
      t4 = 255 + t4 + a2;
      t6.length;
      if (t4 < 0 || t4 >= 766)
        return H.ioore(t6, t4);
      p.$indexSet(0, t1, t6[t4]);
      t4 = $.$get$VP8Filter_clip1();
      t5 = 255 + t5 - a1;
      t4.length;
      if (t5 < 0 || t5 >= 766)
        return H.ioore(t4, t5);
      p.$indexSet(0, 0, t4[t5]);
    },
    _hev$3: function(p, step, thresh) {
      var t1, t2, t3, t4, t5;
      if (typeof step !== "number")
        return H.iae(step);
      t1 = p.buffer;
      t2 = p.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      t2 = J.$index$asx(t1, t2 + -2 * step);
      t1 = p.buffer;
      t3 = p.offset;
      if (typeof t3 !== "number")
        return t3.$add();
      t3 = J.$index$asx(t1, t3 + -step);
      t1 = p.buffer;
      t4 = p.offset;
      if (typeof t4 !== "number")
        return t4.$add();
      t4 = J.$index$asx(t1, t4);
      t1 = p.buffer;
      t5 = p.offset;
      if (typeof t5 !== "number")
        return t5.$add();
      t5 = J.$index$asx(t1, t5 + step);
      t1 = $.$get$VP8Filter_abs0();
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (typeof t3 !== "number")
        return H.iae(t3);
      t3 = 255 + t2 - t3;
      t1.length;
      if (t3 < 0 || t3 >= 511)
        return H.ioore(t1, t3);
      if (t1[t3] <= thresh) {
        if (typeof t5 !== "number")
          return H.iae(t5);
        if (typeof t4 !== "number")
          return H.iae(t4);
        t2 = 255 + t5 - t4;
        if (t2 < 0 || t2 >= 511)
          return H.ioore(t1, t2);
        t2 = t1[t2] > thresh;
        t1 = t2;
      } else
        t1 = true;
      return t1;
    },
    _needsFilter$3: function(p, step, thresh) {
      var t1, t2, t3, t4, t5;
      if (typeof step !== "number")
        return H.iae(step);
      t1 = p.buffer;
      t2 = p.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      t2 = J.$index$asx(t1, t2 + -2 * step);
      t1 = p.buffer;
      t3 = p.offset;
      if (typeof t3 !== "number")
        return t3.$add();
      t3 = J.$index$asx(t1, t3 + -step);
      t1 = p.buffer;
      t4 = p.offset;
      if (typeof t4 !== "number")
        return t4.$add();
      t4 = J.$index$asx(t1, t4);
      t1 = p.buffer;
      t5 = p.offset;
      if (typeof t5 !== "number")
        return t5.$add();
      t5 = J.$index$asx(t1, t5 + step);
      t1 = $.$get$VP8Filter_abs0();
      if (typeof t3 !== "number")
        return H.iae(t3);
      if (typeof t4 !== "number")
        return H.iae(t4);
      t4 = 255 + t3 - t4;
      t1.length;
      if (t4 < 0 || t4 >= 511)
        return H.ioore(t1, t4);
      t4 = t1[t4];
      t1 = $.$get$VP8Filter_abs1();
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (typeof t5 !== "number")
        return H.iae(t5);
      t5 = 255 + t2 - t5;
      t1.length;
      if (t5 < 0 || t5 >= 511)
        return H.ioore(t1, t5);
      return 2 * t4 + t1[t5] <= thresh;
    },
    _needsFilter2$4: function(p, step, t, it) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13;
      if (typeof step !== "number")
        return H.iae(step);
      t1 = p.buffer;
      t2 = p.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      t2 = J.$index$asx(t1, t2 + -4 * step);
      t1 = p.buffer;
      t3 = p.offset;
      if (typeof t3 !== "number")
        return t3.$add();
      t3 = J.$index$asx(t1, t3 + -3 * step);
      t1 = p.buffer;
      t4 = p.offset;
      if (typeof t4 !== "number")
        return t4.$add();
      t4 = J.$index$asx(t1, t4 + -2 * step);
      t1 = p.buffer;
      t5 = p.offset;
      if (typeof t5 !== "number")
        return t5.$add();
      t5 = J.$index$asx(t1, t5 + -step);
      t1 = p.buffer;
      t6 = p.offset;
      if (typeof t6 !== "number")
        return t6.$add();
      t6 = J.$index$asx(t1, t6);
      t1 = p.buffer;
      t7 = p.offset;
      if (typeof t7 !== "number")
        return t7.$add();
      t7 = J.$index$asx(t1, t7 + step);
      t1 = p.buffer;
      t8 = p.offset;
      if (typeof t8 !== "number")
        return t8.$add();
      t8 = J.$index$asx(t1, t8 + 2 * step);
      t1 = p.buffer;
      t9 = p.offset;
      if (typeof t9 !== "number")
        return t9.$add();
      t9 = J.$index$asx(t1, t9 + 3 * step);
      t1 = $.$get$VP8Filter_abs0();
      if (typeof t5 !== "number")
        return H.iae(t5);
      if (typeof t6 !== "number")
        return H.iae(t6);
      t10 = 255 + t5 - t6;
      t1.length;
      if (t10 < 0 || t10 >= 511)
        return H.ioore(t1, t10);
      t10 = t1[t10];
      t11 = $.$get$VP8Filter_abs1();
      if (typeof t4 !== "number")
        return H.iae(t4);
      t12 = 255 + t4;
      if (typeof t7 !== "number")
        return H.iae(t7);
      t13 = t12 - t7;
      t11.length;
      if (t13 < 0 || t13 >= 511)
        return H.ioore(t11, t13);
      if (2 * t10 + t11[t13] > t)
        return false;
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (typeof t3 !== "number")
        return H.iae(t3);
      t2 = 255 + t2 - t3;
      if (t2 < 0 || t2 >= 511)
        return H.ioore(t1, t2);
      if (t1[t2] <= it) {
        t2 = 255 + t3 - t4;
        if (t2 < 0 || t2 >= 511)
          return H.ioore(t1, t2);
        if (t1[t2] <= it) {
          t2 = t12 - t5;
          if (t2 < 0 || t2 >= 511)
            return H.ioore(t1, t2);
          if (t1[t2] <= it) {
            if (typeof t9 !== "number")
              return H.iae(t9);
            if (typeof t8 !== "number")
              return H.iae(t8);
            t2 = 255 + t9 - t8;
            if (t2 < 0 || t2 >= 511)
              return H.ioore(t1, t2);
            if (t1[t2] <= it) {
              t2 = 255 + t8 - t7;
              if (t2 < 0 || t2 >= 511)
                return H.ioore(t1, t2);
              if (t1[t2] <= it) {
                t2 = 255 + t7 - t6;
                if (t2 < 0 || t2 >= 511)
                  return H.ioore(t1, t2);
                t2 = t1[t2] <= it;
                t1 = t2;
              } else
                t1 = false;
            } else
              t1 = false;
          } else
            t1 = false;
        } else
          t1 = false;
      } else
        t1 = false;
      return t1;
    },
    transformOne$2: function(src, dst) {
      var t1, si, tmp, i, t2, t3, t4, t5, a, b, t6, c, d, tmp0, di, dc,
        $C = new Int32Array(16);
      for (t1 = $C.length, si = 0, tmp = 0, i = 0; i < 4; ++i) {
        t2 = src.buffer;
        t3 = src.offset;
        if (typeof t3 !== "number")
          return t3.$add();
        t3 = J.$index$asx(t2, t3 + si);
        t2 = si + 8;
        t4 = src.buffer;
        t5 = src.offset;
        if (typeof t5 !== "number")
          return t5.$add();
        t5 = J.$index$asx(t4, t5 + t2);
        if (typeof t3 !== "number")
          return t3.$add();
        if (typeof t5 !== "number")
          return H.iae(t5);
        a = t3 + t5;
        t5 = src.buffer;
        t3 = src.offset;
        if (typeof t3 !== "number")
          return t3.$add();
        t3 = J.$index$asx(t5, t3 + si);
        t5 = src.buffer;
        t4 = src.offset;
        if (typeof t4 !== "number")
          return t4.$add();
        t2 = J.$index$asx(t5, t4 + t2);
        if (typeof t3 !== "number")
          return t3.$sub();
        if (typeof t2 !== "number")
          return H.iae(t2);
        b = t3 - t2;
        t2 = si + 4;
        t3 = src.buffer;
        t4 = src.offset;
        if (typeof t4 !== "number")
          return t4.$add();
        t4 = J.$index$asx(t3, t4 + t2);
        if (typeof t4 !== "number")
          return t4.$mul();
        t4 = C.JSInt_methods._shrOtherPositive$1(t4 * 35468, 16);
        t3 = si + 12;
        t5 = src.buffer;
        t6 = src.offset;
        if (typeof t6 !== "number")
          return t6.$add();
        t6 = J.$index$asx(t5, t6 + t3);
        if (typeof t6 !== "number")
          return t6.$mul();
        t6 = C.JSInt_methods._shrOtherPositive$1(t6 * 85627, 16);
        c = (t4 & 2147483647) - ((t4 & 2147483648) >>> 0) - ((t6 & 2147483647) - ((t6 & 2147483648) >>> 0));
        t6 = src.buffer;
        t4 = src.offset;
        if (typeof t4 !== "number")
          return t4.$add();
        t2 = J.$index$asx(t6, t4 + t2);
        if (typeof t2 !== "number")
          return t2.$mul();
        t2 = C.JSInt_methods._shrOtherPositive$1(t2 * 85627, 16);
        t4 = src.buffer;
        t6 = src.offset;
        if (typeof t6 !== "number")
          return t6.$add();
        t3 = J.$index$asx(t4, t6 + t3);
        if (typeof t3 !== "number")
          return t3.$mul();
        t3 = C.JSInt_methods._shrOtherPositive$1(t3 * 35468, 16);
        d = (t2 & 2147483647) - ((t2 & 2147483648) >>> 0) + ((t3 & 2147483647) - ((t3 & 2147483648) >>> 0));
        tmp0 = tmp + 1;
        if (tmp >= t1)
          return H.ioore($C, tmp);
        $C[tmp] = a + d;
        tmp = tmp0 + 1;
        if (tmp0 >= t1)
          return H.ioore($C, tmp0);
        $C[tmp0] = b + c;
        tmp0 = tmp + 1;
        if (tmp >= t1)
          return H.ioore($C, tmp);
        $C[tmp] = b - c;
        tmp = tmp0 + 1;
        if (tmp0 >= t1)
          return H.ioore($C, tmp0);
        $C[tmp0] = a - d;
        ++si;
      }
      for (di = 0, tmp = 0, i = 0; i < 4; ++i) {
        if (tmp >= t1)
          return H.ioore($C, tmp);
        dc = $C[tmp] + 4;
        t2 = tmp + 8;
        if (t2 >= t1)
          return H.ioore($C, t2);
        t2 = $C[t2];
        a = dc + t2;
        b = dc - t2;
        t2 = tmp + 4;
        if (t2 >= t1)
          return H.ioore($C, t2);
        t2 = $C[t2];
        t3 = C.JSInt_methods._shrOtherPositive$1(t2 * 35468, 16);
        t4 = tmp + 12;
        if (t4 >= t1)
          return H.ioore($C, t4);
        t4 = $C[t4];
        t5 = C.JSInt_methods._shrOtherPositive$1(t4 * 85627, 16);
        c = (t3 & 2147483647) - ((t3 & 2147483648) >>> 0) - ((t5 & 2147483647) - ((t5 & 2147483648) >>> 0));
        t2 = C.JSInt_methods._shrOtherPositive$1(t2 * 85627, 16);
        t4 = C.JSInt_methods._shrOtherPositive$1(t4 * 35468, 16);
        d = (t2 & 2147483647) - ((t2 & 2147483648) >>> 0) + ((t4 & 2147483647) - ((t4 & 2147483648) >>> 0));
        V.VP8Filter__store(dst, di, 0, 0, a + d);
        V.VP8Filter__store(dst, di, 1, 0, b + c);
        V.VP8Filter__store(dst, di, 2, 0, b - c);
        V.VP8Filter__store(dst, di, 3, 0, a - d);
        ++tmp;
        di += 32;
      }
    },
    transform$3: function(src, dst, doTwo) {
      this.transformOne$2(src, dst);
      if (doTwo)
        this.transformOne$2(Z.InputBuffer$from(src, null, 16), Z.InputBuffer$from(dst, null, 4));
    },
    transformDC$2: function(src, dst) {
      var DC, j, i,
        t1 = src.buffer,
        t2 = src.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      t2 = J.$index$asx(t1, t2);
      if (typeof t2 !== "number")
        return t2.$add();
      DC = t2 + 4;
      for (j = 0; j < 4; ++j)
        for (i = 0; i < 4; ++i)
          V.VP8Filter__store(dst, 0, i, j, DC);
    }
  };
  L.VP8FrameHeader.prototype = {};
  L.VP8PictureHeader.prototype = {};
  L.VP8SegmentHeader.prototype = {};
  L.VP8BandProbas.prototype = {
    VP8BandProbas$0: function() {
      var t1, i;
      for (t1 = this.probas, i = 0; i < 3; ++i)
        C.JSArray_methods.$indexSet(t1, i, new Uint8Array(11));
    }
  };
  L.VP8Proba.prototype = {
    VP8Proba$0: function() {
      var t1, t2, t3, i, t4, j, t5;
      for (t1 = this.bands, t2 = type$.JSArray_legacy_Uint8List, t3 = type$.JSArray_legacy_VP8BandProbas, i = 0; i < 4; ++i) {
        t4 = new Array(8);
        t4.fixed$length = Array;
        C.JSArray_methods.$indexSet(t1, i, H.setRuntimeTypeInfo(t4, t3));
        for (j = 0; j < 8; ++j) {
          t4 = t1[i];
          t5 = new Array(3);
          t5.fixed$length = Array;
          t5 = new L.VP8BandProbas(H.setRuntimeTypeInfo(t5, t2));
          t5.VP8BandProbas$0();
          (t4 && C.JSArray_methods).$indexSet(t4, j, t5);
        }
      }
      C.NativeUint8List_methods.fillRange$3(this.segments, 0, 3, 255);
    }
  };
  L.VP8FilterHeader.prototype = {};
  L.VP8FInfo.prototype = {};
  L.VP8MB.prototype = {};
  L.VP8QuantMatrix.prototype = {};
  L.VP8MBData.prototype = {};
  L.VP8TopSamples.prototype = {};
  S.VP8L.prototype = {
    decodeHeader$0: function() {
      var t2,
        t1 = this.br;
      if (t1.readBits$1(8) !== 47)
        return false;
      t2 = this.webp;
      t2.format = 2;
      t2.width = t1.readBits$1(14) + 1;
      t2.height = t1.readBits$1(14) + 1;
      t2.hasAlpha = t1.readBits$1(1) !== 0;
      if (t1.readBits$1(3) !== 0)
        return false;
      return true;
    },
    decode$0: function() {
      var t1, t2, t3, _this = this, _null = null;
      _this._lastPixel = 0;
      if (!_this.decodeHeader$0())
        return _null;
      t1 = _this.webp;
      _this._decodeImageStream$3(t1.width, t1.height, true);
      _this._allocateInternalBuffers32b$0();
      _this.image = U.Image$(t1.width, t1.height, C.Channels_1, _null, _null);
      t2 = _this._pixels;
      t3 = t1.width;
      t1 = t1.height;
      if (!_this._decodeImageData$5(t2, t3, t1, t1, _this.get$_processRows()))
        return _null;
      return _this.image;
    },
    _allocateInternalBuffers32b$0: function() {
      var pixels32, _this = this,
        t1 = _this.webp,
        t2 = t1.width;
      t1 = t1.height;
      if (typeof t2 !== "number")
        return t2.$mul();
      if (typeof t1 !== "number")
        return H.iae(t1);
      t1 = t2 * t1 + t2;
      pixels32 = new Uint32Array(t1 + t2 * 16);
      _this._pixels = pixels32;
      _this._pixels8 = H.NativeUint8List_NativeUint8List$view(pixels32.buffer, 0, null);
      _this._argbCache = t1;
      return true;
    },
    _readTransform$1: function(transformSize) {
      var t1, type, t2, t3, transform, numColors, bits, _this = this;
      type$.legacy_List_legacy_int._as(transformSize);
      t1 = _this.br;
      type = t1.readBits$1(2);
      t2 = _this._transformsSeen;
      t3 = C.JSInt_methods._shlPositive$1(1, type);
      if ((t2 & t3) >>> 0 !== 0)
        return false;
      _this._transformsSeen = (t2 | t3) >>> 0;
      transform = new R.VP8LTransform();
      C.JSArray_methods.add$1(_this._transforms, transform);
      transform.type = type;
      transform.xsize = transformSize[0];
      transform.ysize = transformSize[1];
      switch (type) {
        case 0:
        case 1:
          t1 = transform.bits = t1.readBits$1(3) + 2;
          transform.data = _this._decodeImageStream$3(S.VP8L__subSampleSize(transform.xsize, t1), S.VP8L__subSampleSize(transform.ysize, t1), false);
          break;
        case 3:
          numColors = t1.readBits$1(8) + 1;
          if (numColors > 16)
            bits = 0;
          else if (numColors > 4)
            bits = 1;
          else {
            t1 = numColors > 2 ? 2 : 3;
            bits = t1;
          }
          C.JSArray_methods.$indexSet(transformSize, 0, S.VP8L__subSampleSize(transform.xsize, bits));
          transform.bits = bits;
          transform.data = _this._decodeImageStream$3(numColors, 1, false);
          _this._expandColorMap$2(numColors, transform);
          break;
        case 2:
          break;
        default:
          throw H.wrapException(K.ImageException$("Invalid WebP tranform type: " + type));
      }
      return true;
    },
    _decodeImageStream$3: function(xsize, ysize, isLevel0) {
      var t1, t2, transformYsize, transformXsize, sizes, colorCacheBits, numBits, data, _this = this;
      if (isLevel0) {
        for (t1 = _this.br, t2 = type$.JSArray_legacy_int, transformYsize = ysize, transformXsize = xsize; t1.readBits$1(1) !== 0;) {
          sizes = H.setRuntimeTypeInfo([transformXsize, transformYsize], t2);
          if (!_this._readTransform$1(sizes))
            throw H.wrapException(K.ImageException$("Invalid Transform"));
          transformXsize = sizes[0];
          transformYsize = sizes[1];
        }
        isLevel0 = true;
      } else {
        transformYsize = ysize;
        transformXsize = xsize;
      }
      t1 = _this.br;
      if (t1.readBits$1(1) !== 0) {
        colorCacheBits = t1.readBits$1(4);
        if (!(colorCacheBits >= 1 && colorCacheBits <= 11))
          throw H.wrapException(K.ImageException$("Invalid Color Cache"));
      } else
        colorCacheBits = 0;
      if (!_this._readHuffmanCodes$4(transformXsize, transformYsize, colorCacheBits, isLevel0))
        throw H.wrapException(K.ImageException$("Invalid Huffman Codes"));
      if (colorCacheBits > 0) {
        t1 = C.JSInt_methods._shlPositive$1(1, colorCacheBits);
        _this._colorCacheSize = t1;
        _this._colorCache = new Y.VP8LColorCache(new Uint32Array(t1), 32 - colorCacheBits);
      } else
        _this._colorCacheSize = 0;
      t1 = _this.webp;
      t1.width = transformXsize;
      t1.height = transformYsize;
      numBits = _this._huffmanSubsampleBits;
      _this._huffmanXsize = S.VP8L__subSampleSize(transformXsize, numBits);
      _this._huffmanMask = numBits === 0 ? 4294967295 : C.JSInt_methods._shlPositive$1(1, numBits) - 1;
      if (isLevel0) {
        _this._lastPixel = 0;
        return null;
      }
      if (typeof transformXsize !== "number")
        return transformXsize.$mul();
      if (typeof transformYsize !== "number")
        return H.iae(transformYsize);
      data = new Uint32Array(transformXsize * transformYsize);
      if (!_this._decodeImageData$5(data, transformXsize, transformYsize, transformYsize, null))
        throw H.wrapException(K.ImageException$("Failed to decode image data."));
      _this._lastPixel = 0;
      return data;
    },
    _decodeImageData$5: function(data, width, height, lastRow, processFunc) {
      var row, col, htreeGroup, src, srcEnd, srcLast, colorCacheLimit, colorCache, mask, t2, lastCached, t3, t4, t5, code, red, blue, t6, t7, key, $length, distSymbol, dist, i, key0, _this = this,
        t1 = _this._lastPixel;
      if (typeof width !== "number")
        return H.iae(width);
      row = C.JSInt_methods.$tdiv(t1, width);
      col = C.JSInt_methods.$mod(t1, width);
      htreeGroup = _this._getHtreeGroupForPos$2(col, row);
      src = _this._lastPixel;
      if (typeof height !== "number")
        return H.iae(height);
      srcEnd = width * height;
      if (typeof lastRow !== "number")
        return H.iae(lastRow);
      srcLast = width * lastRow;
      t1 = _this._colorCacheSize;
      colorCacheLimit = 280 + t1;
      colorCache = t1 > 0 ? _this._colorCache : null;
      mask = _this._huffmanMask;
      t1 = _this.br;
      t2 = processFunc != null;
      lastCached = src;
      while (true) {
        t3 = t1._vp8l_bit_reader$_input;
        t4 = t3.offset;
        t5 = t3.end;
        if (typeof t4 !== "number")
          return t4.$ge();
        if (!(!(t4 >= t5 && t1.bitPos >= 64) && src < srcLast))
          break;
        if ((col & mask) >>> 0 === 0)
          htreeGroup = _this._getHtreeGroupForPos$2(col, row);
        if (t1.bitPos >= 32)
          t1._shiftBytes$0();
        t3 = htreeGroup.htrees;
        code = t3[0].readSymbol$1(t1);
        if (code < 256) {
          red = t3[1].readSymbol$1(t1);
          if (t1.bitPos >= 32)
            t1._shiftBytes$0();
          blue = t3[2].readSymbol$1(t1);
          t3 = C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(t3[3].readSymbol$1(t1), 0, 255));
          t4 = C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(blue, 0, 255));
          t5 = C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(code, 0, 255));
          t6 = C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(red, 0, 255));
          t7 = data.length;
          if (src < 0 || src >= t7)
            return H.ioore(data, src);
          data[src] = (t3 << 24 | t4 << 16 | t5 << 8 | t6) >>> 0;
          ++src;
          ++col;
          if (col >= width) {
            ++row;
            if (C.JSInt_methods.$mod(row, 16) === 0 && t2)
              processFunc.call$1(row);
            if (colorCache != null)
              for (t3 = colorCache.hashShift, t4 = colorCache.colors, t5 = t4.length; lastCached < src;) {
                if (lastCached < 0)
                  return H.ioore(data, lastCached);
                t6 = data[lastCached];
                key = C.JSInt_methods._shrReceiverPositive$1((t6 * 506832829 & 4294967295) >>> 0, t3);
                if (key >= t5)
                  return H.ioore(t4, key);
                t4[key] = t6;
                ++lastCached;
              }
            col = 0;
          }
        } else if (code < 280) {
          $length = _this._getCopyDistance$1(code - 256);
          distSymbol = t3[4].readSymbol$1(t1);
          if (t1.bitPos >= 32)
            t1._shiftBytes$0();
          dist = _this._planeCodeToDistance$2(width, _this._getCopyDistance$1(distSymbol));
          if (src < dist || srcEnd - src < $length)
            return false;
          else {
            for (i = 0; i < $length; ++i) {
              t3 = src + i;
              t4 = src + (i - dist);
              t5 = data.length;
              if (t4 < 0 || t4 >= t5)
                return H.ioore(data, t4);
              t4 = data[t4];
              if (t3 < 0 || t3 >= t5)
                return H.ioore(data, t3);
              data[t3] = t4;
            }
            src += $length;
          }
          col += $length;
          for (; col >= width;) {
            col -= width;
            ++row;
            if (C.JSInt_methods.$mod(row, 16) === 0 && t2)
              processFunc.call$1(row);
          }
          if (src < srcLast) {
            if ((col & mask) >>> 0 !== 0)
              htreeGroup = _this._getHtreeGroupForPos$2(col, row);
            if (colorCache != null)
              for (t3 = colorCache.hashShift, t4 = colorCache.colors, t5 = t4.length; lastCached < src;) {
                if (lastCached < 0 || lastCached >= data.length)
                  return H.ioore(data, lastCached);
                t6 = data[lastCached];
                key = C.JSInt_methods._shrReceiverPositive$1((t6 * 506832829 & 4294967295) >>> 0, t3);
                if (key >= t5)
                  return H.ioore(t4, key);
                t4[key] = t6;
                ++lastCached;
              }
          }
        } else if (code < colorCacheLimit) {
          key = code - 280;
          for (; lastCached < src;) {
            if (lastCached < 0 || lastCached >= data.length)
              return H.ioore(data, lastCached);
            t3 = data[lastCached];
            key0 = C.JSInt_methods._shrReceiverPositive$1((t3 * 506832829 & 4294967295) >>> 0, colorCache.hashShift);
            t4 = colorCache.colors;
            if (key0 >= t4.length)
              return H.ioore(t4, key0);
            t4[key0] = t3;
            ++lastCached;
          }
          t3 = colorCache.colors;
          t4 = t3.length;
          if (key >= t4)
            return H.ioore(t3, key);
          t5 = t3[key];
          t6 = data.length;
          if (src < 0 || src >= t6)
            return H.ioore(data, src);
          data[src] = t5;
          ++src;
          ++col;
          if (col >= width) {
            ++row;
            if (C.JSInt_methods.$mod(row, 16) === 0 && t2)
              processFunc.call$1(row);
            for (t5 = colorCache.hashShift; lastCached < src;) {
              if (lastCached < 0)
                return H.ioore(data, lastCached);
              t7 = data[lastCached];
              key = C.JSInt_methods._shrReceiverPositive$1((t7 * 506832829 & 4294967295) >>> 0, t5);
              if (key >= t4)
                return H.ioore(t3, key);
              t3[key] = t7;
              ++lastCached;
            }
            col = 0;
          }
        } else
          return false;
      }
      if (t2)
        processFunc.call$1(row);
      t2 = t3.offset;
      if (typeof t2 !== "number")
        return t2.$ge();
      if (t2 >= t5 && t1.bitPos >= 64 && src < srcEnd)
        return false;
      _this._lastPixel = src;
      return true;
    },
    _is8bOptimizable$0: function() {
      var t1, t2, t3, i, htrees;
      if (this._colorCacheSize > 0)
        return false;
      for (t1 = this._numHtreeGroups, t2 = this._htreeGroups, t3 = t2.length, i = 0; i < t1; ++i) {
        if (i >= t3)
          return H.ioore(t2, i);
        htrees = t2[i].htrees;
        if (htrees[1].numNodes > 1)
          return false;
        if (htrees[2].numNodes > 1)
          return false;
        if (htrees[3].numNodes > 1)
          return false;
      }
      return true;
    },
    _extractAlphaRows$1: function(row) {
      var t2, t3, width, cachePixs, di, src, i, t4, _this = this,
        t1 = _this._lastRow,
        numRows = row - t1;
      if (numRows <= 0)
        return;
      t2 = _this.webp;
      t3 = t2.width;
      if (typeof t3 !== "number")
        return t3.$mul();
      _this._applyInverseTransforms$2(numRows, t3 * t1);
      width = t2.width;
      if (typeof width !== "number")
        return width.$mul();
      cachePixs = width * numRows;
      di = width * _this._lastRow;
      src = Z.InputBuffer$(_this._pixels, false, null, _this._argbCache);
      for (i = 0; i < cachePixs; ++i) {
        t1 = _this._opaque;
        t2 = di + i;
        t3 = src.buffer;
        t4 = src.offset;
        if (typeof t4 !== "number")
          return t4.$add();
        t4 = J.$index$asx(t3, t4 + i);
        if (typeof t4 !== "number")
          return t4.$shr();
        t4 = C.JSInt_methods._shrOtherPositive$1(t4, 8);
        if (t2 < 0 || t2 >= t1.length)
          return H.ioore(t1, t2);
        t1[t2] = t4 & 255;
      }
      _this._lastRow = row;
    },
    _decodeAlphaData$3: function(width, height, lastRow) {
      var row, col, htreeGroup, pos, end, last, mask, t2, t3, code, $length, distSymbol, dist, i, t4, t5, _this = this,
        t1 = _this._lastPixel;
      if (typeof width !== "number")
        return H.iae(width);
      row = C.JSInt_methods.$tdiv(t1, width);
      col = C.JSInt_methods.$mod(t1, width);
      htreeGroup = _this._getHtreeGroupForPos$2(col, row);
      pos = _this._lastPixel;
      if (typeof height !== "number")
        return H.iae(height);
      end = width * height;
      last = width * lastRow;
      mask = _this._huffmanMask;
      t1 = _this.br;
      while (true) {
        t2 = t1._vp8l_bit_reader$_input;
        t3 = t2.offset;
        t2 = t2.end;
        if (typeof t3 !== "number")
          return t3.$ge();
        if (!(!(t3 >= t2 && t1.bitPos >= 64) && pos < last))
          break;
        if ((col & mask) >>> 0 === 0)
          htreeGroup = _this._getHtreeGroupForPos$2(col, row);
        if (t1.bitPos >= 32)
          t1._shiftBytes$0();
        t2 = htreeGroup.htrees;
        code = t2[0].readSymbol$1(t1);
        if (code < 256) {
          t2 = _this._pixels8;
          if (pos < 0 || pos >= t2.length)
            return H.ioore(t2, pos);
          t2[pos] = code;
          ++pos;
          ++col;
          if (col >= width) {
            ++row;
            if (C.JSInt_methods.$mod(row, 16) === 0)
              _this._extractPalettedAlphaRows$1(row);
            col = 0;
          }
        } else if (code < 280) {
          $length = _this._getCopyDistance$1(code - 256);
          distSymbol = t2[4].readSymbol$1(t1);
          if (t1.bitPos >= 32)
            t1._shiftBytes$0();
          dist = _this._planeCodeToDistance$2(width, _this._getCopyDistance$1(distSymbol));
          if (pos >= dist && end - pos >= $length)
            for (t2 = _this._pixels8, i = 0; i < $length; ++i) {
              t3 = pos + i;
              t4 = t3 - dist;
              t5 = t2.length;
              if (t4 < 0 || t4 >= t5)
                return H.ioore(t2, t4);
              t4 = t2[t4];
              if (t3 < 0 || t3 >= t5)
                return H.ioore(t2, t3);
              t2[t3] = t4;
            }
          else {
            _this._lastPixel = pos;
            return true;
          }
          pos += $length;
          col += $length;
          for (; col >= width;) {
            col -= width;
            ++row;
            if (C.JSInt_methods.$mod(row, 16) === 0)
              _this._extractPalettedAlphaRows$1(row);
          }
          if (pos < last && (col & mask) >>> 0 !== 0)
            htreeGroup = _this._getHtreeGroupForPos$2(col, row);
        } else
          return false;
      }
      _this._extractPalettedAlphaRows$1(row);
      _this._lastPixel = pos;
      return true;
    },
    _extractPalettedAlphaRows$1: function(row) {
      var pIn, rowsOut, _this = this,
        t1 = _this._lastRow,
        numRows = row - t1,
        t2 = _this._pixels8,
        t3 = _this.webp.width;
      if (typeof t3 !== "number")
        return t3.$mul();
      pIn = Z.InputBuffer$(t2, false, null, t3 * t1);
      if (numRows > 0) {
        t2 = _this._opaque;
        t3 = _this._ioWidth;
        if (typeof t3 !== "number")
          return t3.$mul();
        rowsOut = Z.InputBuffer$(t2, false, null, t3 * t1);
        t3 = _this._transforms;
        if (0 >= t3.length)
          return H.ioore(t3, 0);
        t3[0].colorIndexInverseTransformAlpha$4(t1, t1 + numRows, pIn, rowsOut);
      }
      _this._lastRow = row;
    },
    _processRows$1: function(row) {
      var numRows, pi, dy, y, x, c, t4, t5, t6, t7, _this = this,
        t1 = _this.webp,
        t2 = t1.width,
        t3 = _this._lastRow;
      if (typeof t2 !== "number")
        return t2.$mul();
      numRows = row - t3;
      if (numRows <= 0)
        return;
      _this._applyInverseTransforms$2(numRows, t2 * t3);
      for (pi = _this._argbCache, dy = _this._lastRow, y = 0; y < numRows; ++y, ++dy) {
        x = 0;
        while (true) {
          t2 = t1.width;
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (!(x < t2))
            break;
          t2 = _this._pixels;
          c = (t2 && C.NativeUint32List_methods).$index(t2, pi);
          t2 = _this.image;
          t3 = C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(c >>> 24 & 255, 0, 255));
          t4 = C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(c >>> 16 & 255, 0, 255));
          t5 = C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(c >>> 8 & 255, 0, 255));
          t6 = C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(c & 255, 0, 255));
          t7 = t2.data;
          t2 = t2.width;
          if (typeof t2 !== "number")
            return H.iae(t2);
          t2 = dy * t2 + x;
          if (t2 < 0 || t2 >= t7.length)
            return H.ioore(t7, t2);
          t7[t2] = (t3 << 24 | t4 << 16 | t5 << 8 | t6) >>> 0;
          ++x;
          if (typeof pi !== "number")
            return pi.$add();
          ++pi;
        }
      }
      _this._lastRow = row;
    },
    _applyInverseTransforms$2: function(numRows, rows) {
      var startRow, endRow, rowsOut, t3, rowsIn, n0, transform, inData, width, start, t4, inStride, src, _this = this,
        t1 = _this._transforms,
        n = t1.length,
        t2 = _this.webp.width;
      if (typeof t2 !== "number")
        return t2.$mul();
      startRow = _this._lastRow;
      endRow = startRow + numRows;
      rowsOut = _this._argbCache;
      t3 = _this._pixels;
      if (typeof rowsOut !== "number")
        return rowsOut.$add();
      (t3 && C.NativeUint32List_methods).setRange$4(t3, rowsOut, rowsOut + t2 * numRows, t3, rows);
      for (t2 = endRow - startRow, t3 = t2 - 1, rowsIn = rows; n0 = n - 1, n > 0; rowsIn = rowsOut, n = n0) {
        if (n0 < 0 || n0 >= t1.length)
          return H.ioore(t1, n0);
        transform = t1[n0];
        inData = _this._pixels;
        width = transform.xsize;
        switch (transform.type) {
          case 2:
            if (typeof width !== "number")
              return H.iae(width);
            transform.addGreenToBlueAndRed$3(inData, rowsOut, rowsOut + t2 * width);
            break;
          case 0:
            transform.predictorInverseTransform$4(startRow, endRow, inData, rowsOut);
            if (endRow !== transform.ysize) {
              if (typeof width !== "number")
                return H.iae(width);
              start = rowsOut - width;
              (inData && C.NativeUint32List_methods).setRange$4(inData, start, start + width, inData, rowsOut + t3 * width);
            }
            break;
          case 1:
            transform.colorSpaceInverseTransform$4(startRow, endRow, inData, rowsOut);
            break;
          case 3:
            if (rowsIn === rowsOut && transform.bits > 0) {
              if (typeof width !== "number")
                return H.iae(width);
              t4 = transform.bits;
              inStride = t2 * C.JSInt_methods._shrOtherPositive$1(width + C.JSInt_methods._shlPositive$1(1, t4) - 1, t4);
              src = rowsOut + t2 * width - inStride;
              (inData && C.NativeUint32List_methods).setRange$4(inData, src, src + inStride, inData, rowsOut);
              transform.colorIndexInverseTransform$6(startRow, endRow, inData, src, inData, rowsOut);
            } else
              transform.colorIndexInverseTransform$6(startRow, endRow, inData, rowsIn, inData, rowsOut);
            break;
        }
      }
    },
    _readHuffmanCodes$4: function(xsize, ysize, colorCacheBits, allowRecursion) {
      var huffmanPrecision, huffmanXsize, huffmanYsize, huffmanPixs, huffmanImage, numHtreeGroups, i, group, t1, htreeGroups, t2, t3, j, alphabetSize, _this = this;
      if (allowRecursion && _this.br.readBits$1(1) !== 0) {
        huffmanPrecision = _this.br.readBits$1(3) + 2;
        huffmanXsize = S.VP8L__subSampleSize(xsize, huffmanPrecision);
        huffmanYsize = S.VP8L__subSampleSize(ysize, huffmanPrecision);
        huffmanPixs = huffmanXsize * huffmanYsize;
        huffmanImage = _this._decodeImageStream$3(huffmanXsize, huffmanYsize, false);
        _this._huffmanSubsampleBits = huffmanPrecision;
        for (numHtreeGroups = 1, i = 0; i < huffmanPixs; ++i) {
          if (i >= huffmanImage.length)
            return H.ioore(huffmanImage, i);
          group = huffmanImage[i] >>> 8 & 65535;
          huffmanImage[i] = group;
          if (group >= numHtreeGroups)
            numHtreeGroups = group + 1;
        }
      } else {
        huffmanImage = null;
        numHtreeGroups = 1;
      }
      t1 = new Array(numHtreeGroups);
      t1.fixed$length = Array;
      htreeGroups = H.setRuntimeTypeInfo(t1, type$.JSArray_legacy_HTreeGroup);
      for (t1 = colorCacheBits > 0, t2 = type$.JSArray_legacy_HuffmanTree, i = 0; i < numHtreeGroups; ++i) {
        t3 = new Array(5);
        t3.fixed$length = Array;
        t3 = new B.HTreeGroup(H.setRuntimeTypeInfo(t3, t2));
        t3.HTreeGroup$0();
        C.JSArray_methods.$indexSet(htreeGroups, i, t3);
        for (j = 0; j < 5; ++j) {
          alphabetSize = C.List_yTu[j];
          if (j === 0 && t1)
            alphabetSize += C.JSInt_methods._shlPositive$1(1, colorCacheBits);
          if (i >= numHtreeGroups)
            return H.ioore(htreeGroups, i);
          if (!_this._readHuffmanCode$2(alphabetSize, htreeGroups[i].htrees[j]))
            return false;
        }
      }
      _this._huffmanImage = huffmanImage;
      _this._numHtreeGroups = numHtreeGroups;
      _this.set$_htreeGroups(htreeGroups);
      return true;
    },
    _readHuffmanCode$2: function(alphabetSize, tree) {
      var t2, symbols, codes, codeLengths, numSymbols, ok, codeLengthCodeLengths, numCodes, i, t3, t4,
        t1 = this.br;
      if (t1.readBits$1(1) !== 0) {
        t2 = type$.JSArray_legacy_int;
        symbols = H.setRuntimeTypeInfo([0, 0], t2);
        codes = H.setRuntimeTypeInfo([0, 0], t2);
        codeLengths = H.setRuntimeTypeInfo([0, 0], t2);
        numSymbols = t1.readBits$1(1) + 1;
        C.JSArray_methods.$indexSet(symbols, 0, t1.readBits$1(t1.readBits$1(1) === 0 ? 1 : 8));
        C.JSArray_methods.$indexSet(codes, 0, 0);
        t2 = numSymbols - 1;
        C.JSArray_methods.$indexSet(codeLengths, 0, t2);
        if (numSymbols === 2) {
          C.JSArray_methods.$indexSet(symbols, 1, t1.readBits$1(8));
          C.JSArray_methods.$indexSet(codes, 1, 1);
          C.JSArray_methods.$indexSet(codeLengths, 1, t2);
        }
        ok = tree.buildExplicit$5(codeLengths, codes, symbols, alphabetSize, numSymbols);
      } else {
        codeLengthCodeLengths = new Int32Array(19);
        numCodes = t1.readBits$1(4) + 4;
        if (numCodes > 19)
          return false;
        codeLengths = new Int32Array(alphabetSize);
        for (t2 = codeLengthCodeLengths.length, i = 0; i < numCodes; ++i) {
          t3 = C.List_uSC0[i];
          t4 = t1.readBits$1(3);
          if (t3 >= t2)
            return H.ioore(codeLengthCodeLengths, t3);
          codeLengthCodeLengths[t3] = t4;
        }
        ok = this._readHuffmanCodeLengths$3(codeLengthCodeLengths, alphabetSize, codeLengths);
        if (ok)
          ok = tree.buildImplicit$2(codeLengths, alphabetSize);
      }
      return ok;
    },
    _readHuffmanCodeLengths$3: function(codeLengthCodeLengths, numSymbols, codeLengths) {
      var tree, max_symbol, t2, symbol, prev_code_len, max_symbol0, code_len, symbol0, slot, extra_bits, repeat_offset, repeat, $length, repeat0,
        t1 = type$.legacy_List_legacy_int;
      t1._as(codeLengthCodeLengths);
      t1._as(codeLengths);
      tree = B.HuffmanTree$();
      if (!tree.buildImplicit$2(codeLengthCodeLengths, 19))
        return false;
      t1 = this.br;
      if (t1.readBits$1(1) !== 0) {
        max_symbol = 2 + t1.readBits$1(2 + 2 * t1.readBits$1(3));
        if (max_symbol > numSymbols)
          return false;
      } else
        max_symbol = numSymbols;
      for (t2 = codeLengths.length, symbol = 0, prev_code_len = 8; symbol < numSymbols; max_symbol = max_symbol0) {
        max_symbol0 = max_symbol - 1;
        if (max_symbol === 0)
          break;
        if (t1.bitPos >= 32)
          t1._shiftBytes$0();
        code_len = tree.readSymbol$1(t1);
        if (code_len < 16) {
          symbol0 = symbol + 1;
          if (symbol < 0 || symbol >= t2)
            return H.ioore(codeLengths, symbol);
          codeLengths[symbol] = code_len;
          if (code_len !== 0)
            prev_code_len = code_len;
          symbol = symbol0;
        } else {
          slot = code_len - 16;
          if (slot >= 3)
            return H.ioore(C.List_2_3_7, slot);
          extra_bits = C.List_2_3_7[slot];
          repeat_offset = C.List_3_3_11[slot];
          repeat = t1.readBits$1(extra_bits) + repeat_offset;
          if (symbol + repeat > numSymbols)
            return false;
          else {
            $length = code_len === 16 ? prev_code_len : 0;
            for (; repeat0 = repeat - 1, repeat > 0; repeat = repeat0, symbol = symbol0) {
              symbol0 = symbol + 1;
              if (symbol < 0 || symbol >= t2)
                return H.ioore(codeLengths, symbol);
              codeLengths[symbol] = $length;
            }
          }
        }
      }
      return true;
    },
    _getCopyDistance$1: function(distanceSymbol) {
      var extraBits;
      if (distanceSymbol < 4)
        return distanceSymbol + 1;
      extraBits = C.JSInt_methods._shrOtherPositive$1(distanceSymbol - 2, 1);
      return C.JSInt_methods._shlPositive$1(2 + (distanceSymbol & 1), extraBits) + this.br.readBits$1(extraBits) + 1;
    },
    _planeCodeToDistance$2: function(xsize, planeCode) {
      var t1, distCode, dist;
      if (planeCode > 120)
        return planeCode - 120;
      else {
        t1 = planeCode - 1;
        if (t1 < 0)
          return H.ioore(C.List_AYZ, t1);
        distCode = C.List_AYZ[t1];
        dist = (distCode >>> 4) * xsize + (8 - (distCode & 15));
        return dist >= 1 ? dist : 1;
      }
    },
    _expandColorMap$2: function(numColors, transform) {
      var len, t2, i, t3, t4,
        finalNumColors = C.JSInt_methods._shlPositive$1(1, C.JSInt_methods._shrBothPositive$1(8, transform.bits)),
        newColorMap = new Uint32Array(finalNumColors),
        data = H.NativeUint8List_NativeUint8List$view(transform.data.buffer, 0, null),
        newData = H.NativeUint8List_NativeUint8List$view(newColorMap.buffer, 0, null),
        t1 = transform.data;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1 = t1[0];
      if (0 >= newColorMap.length)
        return H.ioore(newColorMap, 0);
      newColorMap[0] = t1;
      len = 4 * numColors;
      for (t1 = data.length, t2 = newData.length, i = 4; i < len; ++i) {
        if (i >= t1)
          return H.ioore(data, i);
        t3 = data[i];
        t4 = i - 4;
        if (t4 >= t2)
          return H.ioore(newData, t4);
        t4 = newData[t4];
        if (i >= t2)
          return H.ioore(newData, i);
        newData[i] = t3 + t4 & 255;
      }
      for (len = 4 * finalNumColors; i < len; ++i) {
        if (i >= t2)
          return H.ioore(newData, i);
        newData[i] = 0;
      }
      transform.data = newColorMap;
      return true;
    },
    _getMetaIndex$5: function(image, xsize, bits, x, y) {
      var t1;
      if (bits === 0)
        return 0;
      t1 = xsize * C.JSInt_methods._shrOtherPositive$1(y, bits) + C.JSInt_methods._shrOtherPositive$1(x, bits);
      if (t1 >= image.length)
        return H.ioore(image, t1);
      return image[t1];
    },
    _getHtreeGroupForPos$2: function(x, y) {
      var _this = this,
        metaIndex = _this._getMetaIndex$5(_this._huffmanImage, _this._huffmanXsize, _this._huffmanSubsampleBits, x, y),
        t1 = _this._htreeGroups;
      if (metaIndex >= t1.length)
        return H.ioore(t1, metaIndex);
      if (t1[metaIndex] == null)
        C.JSArray_methods.$indexSet(t1, metaIndex, B.HTreeGroup$());
      t1 = _this._htreeGroups;
      if (metaIndex >= t1.length)
        return H.ioore(t1, metaIndex);
      return t1[metaIndex];
    },
    set$_htreeGroups: function(_htreeGroups) {
      this._htreeGroups = type$.legacy_List_legacy_HTreeGroup._as(_htreeGroups);
    }
  };
  S.InternalVP8L.prototype = {
    extractAlphaRows$1: function(row) {
      return this._extractAlphaRows$1(row);
    }
  };
  A.VP8LBitReader.prototype = {
    prefetchBits$0: function() {
      var t2, t3, b2,
        t1 = this.bitPos;
      if (t1 < 32) {
        t2 = this._vp8l_bit_reader$_buffer;
        t3 = C.JSInt_methods._shrReceiverPositive$1(t2[0], t1);
        t2 = t2[1];
        if (t1 < 0)
          return H.ioore(C.List_DKo, t1);
        b2 = t3 + ((t2 & C.List_DKo[t1]) >>> 0) * (C.List_DKo[32 - t1] + 1);
      } else {
        t2 = this._vp8l_bit_reader$_buffer;
        b2 = t1 === 32 ? t2[1] : C.JSInt_methods._shrReceiverPositive$1(t2[1], t1 - 32);
      }
      return b2;
    },
    readBits$1: function(numBits) {
      var _this = this,
        t1 = _this._vp8l_bit_reader$_input,
        t2 = t1.offset;
      t1 = t1.end;
      if (typeof t2 !== "number")
        return t2.$ge();
      if (!(t2 >= t1 && _this.bitPos >= 64) && numBits < 25) {
        t1 = _this.prefetchBits$0();
        if (numBits >= 33)
          return H.ioore(C.List_DKo, numBits);
        t2 = C.List_DKo[numBits];
        _this.bitPos += numBits;
        _this._shiftBytes$0();
        return (t1 & t2) >>> 0;
      } else
        throw H.wrapException(K.ImageException$("Not enough data in input."));
    },
    _shiftBytes$0: function() {
      var t3, t4, t5, _this = this,
        t1 = _this._vp8l_bit_reader$_input,
        t2 = _this._vp8l_bit_reader$_buffer;
      while (true) {
        if (_this.bitPos >= 8) {
          t3 = t1.offset;
          t4 = t1.end;
          if (typeof t3 !== "number")
            return t3.$ge();
          t4 = t3 < t4;
          t3 = t4;
        } else
          t3 = false;
        if (!t3)
          break;
        t3 = t1.buffer;
        t4 = t1.offset;
        if (typeof t4 !== "number")
          return t4.$add();
        t1.offset = t4 + 1;
        t4 = J.$index$asx(t3, t4);
        t3 = t2[0];
        t5 = t2[1];
        t2[0] = (t3 >>> 8) + (t5 & 255) * 16777216;
        t2[1] = t5 >>> 8;
        t5 = t2[1];
        if (typeof t4 !== "number")
          return t4.$mul();
        t2[1] = (t5 | t4 * 16777216) >>> 0;
        _this.bitPos -= 8;
      }
    }
  };
  Y.VP8LColorCache.prototype = {};
  R.VP8LTransform.prototype = {
    colorIndexInverseTransformAlpha$4: function(yStart, yEnd, src, dst) {
      var countMask, bit_mask, y, packed_pixels, x, t2, t3, t4,
        t1 = this.bits,
        bitsPerPixel = C.JSInt_methods._shrBothPositive$1(8, t1),
        width = this.xsize,
        colorMap = this.data;
      if (bitsPerPixel < 8) {
        countMask = C.JSInt_methods._shlPositive$1(1, t1) - 1;
        bit_mask = C.JSInt_methods._shlPositive$1(1, bitsPerPixel) - 1;
        for (y = yStart; y < yEnd; ++y) {
          if (typeof width !== "number")
            return H.iae(width);
          packed_pixels = 0;
          x = 0;
          for (; x < width; ++x) {
            if ((x & countMask) >>> 0 === 0) {
              t1 = src.buffer;
              t2 = src.offset;
              if (typeof t2 !== "number")
                return t2.$add();
              packed_pixels = J.$index$asx(t1, t2);
              t2 = src.offset;
              if (typeof t2 !== "number")
                return t2.$add();
              src.offset = t2 + 1;
            }
            if (typeof packed_pixels !== "number")
              return packed_pixels.$and();
            t1 = (packed_pixels & bit_mask) >>> 0;
            if (t1 < 0 || t1 >= colorMap.length)
              return H.ioore(colorMap, t1);
            t1 = colorMap[t1];
            t2 = dst.buffer;
            t3 = dst.offset;
            if (typeof t3 !== "number")
              return t3.$add();
            J.$indexSet$ax(t2, t3, t1 >>> 8 & 255);
            t1 = dst.offset;
            if (typeof t1 !== "number")
              return t1.$add();
            dst.offset = t1 + 1;
            packed_pixels = C.JSInt_methods._shrOtherPositive$1(packed_pixels, bitsPerPixel);
          }
        }
      } else
        for (t1 = colorMap && C.NativeUint32List_methods, y = yStart; y < yEnd; ++y) {
          if (typeof width !== "number")
            return H.iae(width);
          x = 0;
          for (; x < width; ++x) {
            t2 = src.buffer;
            t3 = src.offset;
            if (typeof t3 !== "number")
              return t3.$add();
            t3 = J.$index$asx(t2, t3);
            t2 = src.offset;
            if (typeof t2 !== "number")
              return t2.$add();
            src.offset = t2 + 1;
            t3 = t1.$index(colorMap, t3);
            t2 = dst.buffer;
            t4 = dst.offset;
            if (typeof t4 !== "number")
              return t4.$add();
            J.$indexSet$ax(t2, t4, t3 >>> 8 & 255);
            t3 = dst.offset;
            if (typeof t3 !== "number")
              return t3.$add();
            dst.offset = t3 + 1;
          }
        }
    },
    colorIndexInverseTransform$6: function(yStart, yEnd, inData, src, outData, dst) {
      var countMask, bit_mask, y, packed_pixels, x, src0, dst0,
        t1 = this.bits,
        bitsPerPixel = C.JSInt_methods._shrBothPositive$1(8, t1),
        width = this.xsize,
        colorMap = this.data;
      if (bitsPerPixel < 8) {
        countMask = C.JSInt_methods._shlPositive$1(1, t1) - 1;
        bit_mask = C.JSInt_methods._shlPositive$1(1, bitsPerPixel) - 1;
        for (y = yStart; y < yEnd; ++y) {
          if (typeof width !== "number")
            return H.iae(width);
          packed_pixels = 0;
          x = 0;
          for (; x < width; ++x, dst = dst0) {
            if ((x & countMask) >>> 0 === 0) {
              src0 = src + 1;
              if (src < 0 || src >= inData.length)
                return H.ioore(inData, src);
              packed_pixels = inData[src] >>> 8 & 255;
              src = src0;
            }
            dst0 = dst + 1;
            t1 = packed_pixels & bit_mask;
            if (t1 < 0 || t1 >= colorMap.length)
              return H.ioore(colorMap, t1);
            t1 = colorMap[t1];
            if (dst < 0 || dst >= outData.length)
              return H.ioore(outData, dst);
            outData[dst] = t1;
            packed_pixels = C.JSInt_methods._shrBothPositive$1(packed_pixels, bitsPerPixel);
          }
        }
      } else
        for (y = yStart; y < yEnd; ++y) {
          if (typeof width !== "number")
            return H.iae(width);
          x = 0;
          for (; x < width; ++x, dst = dst0, src = src0) {
            dst0 = dst + 1;
            src0 = src + 1;
            if (src < 0 || src >= inData.length)
              return H.ioore(inData, src);
            t1 = inData[src] >>> 8 & 255;
            if (t1 >= colorMap.length)
              return H.ioore(colorMap, t1);
            t1 = colorMap[t1];
            if (dst < 0 || dst >= outData.length)
              return H.ioore(outData, dst);
            outData[dst] = t1;
          }
        }
    },
    colorSpaceInverseTransform$4: function(yStart, yEnd, outData, data) {
      var y, pred, x, t2, pred0, t3, green, t4, t5, t6, a, b, t7, newRed, d, newBlue,
        width = this.xsize,
        t1 = this.bits,
        mask = C.JSInt_methods._shlPositive$1(1, t1) - 1,
        tilesPerRow = S.VP8L__subSampleSize(width, t1),
        predRow = C.JSInt_methods._shrOtherPositive$1(yStart, t1) * tilesPerRow;
      for (y = yStart; y < yEnd;) {
        t1 = new Uint8Array(3);
        if (typeof width !== "number")
          return H.iae(width);
        pred = predRow;
        x = 0;
        for (; x < width; ++x) {
          if ((x & mask) >>> 0 === 0) {
            t2 = this.data;
            pred0 = pred + 1;
            if (pred >= t2.length)
              return H.ioore(t2, pred);
            t2 = t2[pred];
            t1[0] = t2 >>> 0 & 255;
            t1[1] = t2 >>> 8 & 255;
            t1[2] = t2 >>> 16 & 255;
            pred = pred0;
          }
          t2 = data + x;
          if (t2 < 0 || t2 >= outData.length)
            return H.ioore(outData, t2);
          t3 = outData[t2];
          green = t3 >>> 8 & 255;
          t4 = t1[0];
          t5 = $.$get$__uint8();
          t5[0] = t4;
          t4 = $.$get$__uint8ToInt8();
          t6 = t4.length;
          if (0 >= t6)
            return H.ioore(t4, 0);
          a = t4[0];
          t5[0] = green;
          b = t4[0];
          t6 = $.$get$__int32();
          t6[0] = a * b;
          t7 = $.$get$__int32ToUint32();
          if (0 >= t7.length)
            return H.ioore(t7, 0);
          newRed = (t3 >>> 16 & 255) + (t7[0] >>> 5) & 4294967295 & 255;
          t5[0] = t1[1];
          a = t4[0];
          t5[0] = green;
          t6[0] = a * t4[0];
          d = t7[0];
          t5[0] = t1[2];
          a = t4[0];
          t5[0] = newRed;
          t6[0] = a * t4[0];
          newBlue = (((t3 & 255) + (d >>> 5) & 4294967295) >>> 0) + (t7[0] >>> 5) & 4294967295 & 255;
          outData[t2] = (t3 & 4278255360 | newRed << 16 & 4294967295 | newBlue) >>> 0;
        }
        data += width;
        ++y;
        if ((y & mask) >>> 0 === 0)
          predRow += tilesPerRow;
      }
    },
    predictorInverseTransform$4: function(yStart, yEnd, outData, data) {
      var t1, t2, x, t3, mask, tilesPerRow, predModeBase, y, predModeSrc, predFunc, predModeSrc0, _this = this,
        width = _this.xsize;
      if (yStart === 0) {
        t1 = data - 1;
        t2 = outData.length;
        if (t1 < 0 || t1 >= t2)
          return H.ioore(outData, t1);
        outData[t1];
        R.VP8LTransform__addPixelsEq(outData, data, 4278190080);
        if (typeof width !== "number")
          return H.iae(width);
        x = 1;
        for (; x < width; ++x) {
          t1 = data + x;
          t3 = t1 - 1;
          if (t3 < 0 || t3 >= t2)
            return H.ioore(outData, t3);
          R.VP8LTransform__addPixelsEq(outData, t1, outData[t3]);
        }
        data += width;
        ++yStart;
      }
      t1 = _this.bits;
      mask = C.JSInt_methods._shlPositive$1(1, t1) - 1;
      tilesPerRow = S.VP8L__subSampleSize(width, t1);
      predModeBase = C.JSInt_methods._shrOtherPositive$1(yStart, t1) * tilesPerRow;
      for (y = yStart; y < yEnd;) {
        t1 = data - 1;
        t2 = outData.length;
        if (t1 < 0 || t1 >= t2)
          return H.ioore(outData, t1);
        outData[t1];
        if (typeof width !== "number")
          return H.iae(width);
        t1 = data - width;
        if (t1 < 0 || t1 >= t2)
          return H.ioore(outData, t1);
        R.VP8LTransform__addPixelsEq(outData, data, outData[t1]);
        t1 = _this.data;
        predModeSrc = predModeBase + 1;
        if (predModeBase >= t1.length)
          return H.ioore(t1, predModeBase);
        predFunc = $.VP8LTransform_PREDICTORS[t1[predModeBase] >>> 8 & 15];
        for (x = 1; x < width; ++x) {
          if ((x & mask) >>> 0 === 0) {
            t1 = _this.data;
            predModeSrc0 = predModeSrc + 1;
            if (predModeSrc >= t1.length)
              return H.ioore(t1, predModeSrc);
            predFunc = $.VP8LTransform_PREDICTORS[t1[predModeSrc] >>> 8 & 15];
            predModeSrc = predModeSrc0;
          }
          t1 = data + x;
          t3 = t1 - 1;
          if (t3 < 0 || t3 >= t2)
            return H.ioore(outData, t3);
          R.VP8LTransform__addPixelsEq(outData, t1, predFunc.call$3(outData, outData[t3], t1 - width));
        }
        data += width;
        ++y;
        if ((y & mask) >>> 0 === 0)
          predModeBase += tilesPerRow;
      }
    },
    addGreenToBlueAndRed$3: function(pixels, data, dataEnd) {
      var argb, green, data0;
      for (; data < dataEnd; data = data0) {
        if (data < 0 || data >= pixels.length)
          return H.ioore(pixels, data);
        argb = pixels[data];
        green = argb >>> 8 & 255;
        data0 = data + 1;
        pixels[data] = (argb & 4278255360 | (argb & 16711935) + (green << 16 | green) & 16711935) >>> 0;
      }
    }
  };
  S.WebPAlpha.prototype = {
    get$isValid: function() {
      var _this = this,
        t1 = _this.method;
      t1 = t1 > 1 || _this.filter >= 4 || _this.preProcessing > 1 || _this.rsrv !== 0;
      if (t1)
        return false;
      return true;
    },
    decode$3: function(row, numRows, output) {
      var t1, unfilterFunc, offset, t2, t3, t4, _this = this;
      if (!_this.get$isValid())
        return false;
      t1 = _this.filter;
      if (t1 >= 4)
        return H.ioore(C.List_HHa, t1);
      unfilterFunc = C.List_HHa[t1];
      if (_this.method === 0) {
        t1 = _this.width;
        offset = row * t1;
        t2 = _this.input;
        t3 = t2.buffer;
        t4 = t2.offset;
        t2 = t2.start;
        if (typeof t4 !== "number")
          return t4.$sub();
        if (typeof t2 !== "number")
          return H.iae(t2);
        (output && C.NativeUint8List_methods).setRange$4(output, offset, numRows * t1, t3, t4 - t2 + offset);
      } else {
        t1 = row + numRows;
        t2 = _this._vp8l;
        t2._opaque = output;
        t3 = _this._use8bDecode;
        t4 = t2.webp;
        if (!(t3 ? t2._decodeAlphaData$3(t4.width, t4.height, t1) : t2._decodeImageData$5(t2._pixels, t4.width, t4.height, t1, t2.get$extractAlphaRows())))
          return false;
      }
      if (unfilterFunc != null) {
        t1 = _this.width;
        unfilterFunc.call$6(t1, _this.height, t1, row, numRows, output);
      }
      if (_this.preProcessing === 1)
        if (!_this._dequantizeLevels$5(output, _this.width, _this.height, row, numRows))
          return false;
      if (row + numRows === _this.height)
        _this.isAlphaDecoded = true;
      return true;
    },
    _dequantizeLevels$5: function(data, width, height, row, num_rows) {
      var t1;
      if (data != null)
        if (width > 0) {
          if (typeof height !== "number")
            return height.$le();
          t1 = height <= 0 || row < 0 || num_rows < 0 || row + num_rows > height;
        } else
          t1 = true;
      else
        t1 = true;
      if (t1)
        return false;
      return true;
    }
  };
  X.WebPFrame.prototype = {
    WebPFrame$2: function(input, size) {
      var b, t1, t2;
      input.readUint24$0();
      input.readUint24$0();
      input.readUint24$0();
      input.readUint24$0();
      input.readUint24$0();
      b = input.readByte$0();
      if (typeof b !== "number")
        return b.$and();
      this._reserved = (b & 127) >>> 7;
      t1 = input.offset;
      t2 = input.start;
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      this._framePosition = t1 - t2;
      this._frameSize = size - 16;
    }
  };
  X.InternalWebPFrame.prototype = {};
  B.HuffmanTree.prototype = {
    _init$1: function(numLeaves) {
      var t1, _this = this;
      if (numLeaves === 0)
        return false;
      t1 = (numLeaves << 1 >>> 0) - 1;
      _this.maxNodes = t1;
      t1 = _this.tree = new Int32Array(t1 << 1 >>> 0);
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      t1[1] = -1;
      _this.numNodes = 1;
      C.NativeUint8List_methods.fillRange$3(_this.lutBits, 0, 128, 255);
      return true;
    },
    buildImplicit$2: function(codeLengths, codeLengthsSize) {
      var t1, numSymbols, rootSymbol, symbol, codes, t2, t3, _this = this;
      type$.legacy_List_legacy_int._as(codeLengths);
      for (t1 = codeLengths.length, numSymbols = 0, rootSymbol = 0, symbol = 0; symbol < codeLengthsSize; ++symbol) {
        if (symbol >= t1)
          return H.ioore(codeLengths, symbol);
        if (codeLengths[symbol] > 0) {
          ++numSymbols;
          rootSymbol = symbol;
        }
      }
      if (!_this._init$1(numSymbols))
        return false;
      if (numSymbols === 1) {
        if (rootSymbol < 0 || rootSymbol >= codeLengthsSize)
          return false;
        return _this._addSymbol$3(rootSymbol, 0, 0);
      }
      codes = new Int32Array(codeLengthsSize);
      if (!_this._huffmanCodeLengthsToCodes$3(codeLengths, codeLengthsSize, codes))
        return false;
      for (t2 = codes.length, symbol = 0; symbol < codeLengthsSize; ++symbol) {
        if (symbol >= t1)
          return H.ioore(codeLengths, symbol);
        t3 = codeLengths[symbol];
        if (t3 > 0) {
          if (symbol >= t2)
            return H.ioore(codes, symbol);
          if (!_this._addSymbol$3(symbol, codes[symbol], t3))
            return false;
        }
      }
      return _this.numNodes === _this.maxNodes;
    },
    buildExplicit$5: function(codeLengths, codes, symbols, maxSymbol, numSymbols) {
      var i, t2, _this = this,
        t1 = type$.legacy_List_legacy_int;
      t1._as(codeLengths);
      t1._as(codes);
      t1._as(symbols);
      if (!_this._init$1(numSymbols))
        return false;
      for (i = 0; i < numSymbols; ++i) {
        if (i >= 2)
          return H.ioore(codes, i);
        t1 = codes[i];
        if (t1 !== -1) {
          t2 = symbols[i];
          if (t2 >= maxSymbol)
            return _this.numNodes === _this.maxNodes;
          if (!_this._addSymbol$3(t2, t1, codeLengths[i]))
            return _this.numNodes === _this.maxNodes;
        }
      }
      return _this.numNodes === _this.maxNodes;
    },
    readSymbol$1: function(br) {
      var node, t1, t2, _this = this,
        bits = br.prefetchBits$0(),
        newBitPos = br.bitPos,
        lut_ix = bits & 127,
        lut_bits = _this.lutBits[lut_ix];
      if (lut_bits <= 7) {
        br.bitPos = newBitPos + lut_bits;
        return _this.lutSymbol[lut_ix];
      }
      node = _this.lutJump[lut_ix];
      newBitPos += 7;
      bits = bits >>> 7;
      do {
        t1 = _this.tree;
        t2 = (node << 1 >>> 0) + 1;
        if (t2 >= t1.length)
          return H.ioore(t1, t2);
        node = node + t1[t2] + (bits & 1);
        bits = bits >>> 1;
        ++newBitPos;
      } while (_this._nodeIsNotLeaf$1(node));
      br.bitPos = newBitPos;
      t1 = _this.tree;
      t2 = node << 1 >>> 0;
      if (t2 >= t1.length)
        return H.ioore(t1, t2);
      return t1[t2];
    },
    _addSymbol$3: function(symbol, code, codeLength) {
      var baseCode, t1, t2, t3, i, idx, step, node, codeLength0, t4, t5, t6, _this = this;
      if (codeLength <= 7) {
        baseCode = _this._reverseBitsShort$2(code, codeLength);
        for (t1 = C.JSInt_methods.$shl(1, 7 - codeLength), t2 = _this.lutSymbol, t3 = _this.lutBits, i = 0; i < t1; ++i) {
          idx = (baseCode | C.JSInt_methods.$shl(i, codeLength)) >>> 0;
          if (idx >= 128)
            return H.ioore(t2, idx);
          t2[idx] = symbol;
          t3[idx] = codeLength;
        }
      } else
        baseCode = _this._reverseBitsShort$2(C.JSInt_methods.$shr(code, codeLength - 7), 7);
      for (t1 = _this.lutJump, step = 7, node = 0; codeLength0 = codeLength - 1, codeLength > 0; codeLength = codeLength0) {
        t2 = _this.maxNodes;
        if (node >= t2)
          return false;
        t3 = _this.tree;
        t4 = (node << 1 >>> 0) + 1;
        t5 = t3.length;
        if (t4 >= t5)
          return H.ioore(t3, t4);
        t6 = t3[t4];
        if (t6 < 0) {
          t6 = _this.numNodes;
          if (t6 === t2)
            return false;
          t3[t4] = t6 - node;
          _this.numNodes = t6 + 2;
          t2 = (t6 << 1 >>> 0) + 1;
          if (t2 >= t5)
            return H.ioore(t3, t2);
          t3[t2] = -1;
          t6 = (t6 + 1 << 1 >>> 0) + 1;
          if (t6 >= t5)
            return H.ioore(t3, t6);
          t3[t6] = -1;
        } else if (t6 === 0)
          return false;
        node += t3[t4] + (C.JSInt_methods.$shr(code, codeLength0) & 1);
        --step;
        if (step === 0) {
          if (baseCode >= 128)
            return H.ioore(t1, baseCode);
          t1[baseCode] = node;
        }
      }
      if (_this._nodeIsEmpty$1(node))
        _this._nodeSetChildren$2(node, 0);
      else if (_this._nodeIsNotLeaf$1(node))
        return false;
      t1 = _this.tree;
      t2 = node << 1 >>> 0;
      if (t2 >= t1.length)
        return H.ioore(t1, t2);
      t1[t2] = symbol;
      return true;
    },
    _reverseBitsShort$2: function(bits, numBits) {
      var t1 = C.List_cGl[bits & 15],
        t2 = C.JSInt_methods._shrOtherPositive$1(bits, 4);
      if (t2 >= 16)
        return H.ioore(C.List_cGl, t2);
      return C.JSInt_methods._shrReceiverPositive$1((t1 << 4 | C.List_cGl[t2]) >>> 0, 8 - numBits);
    },
    _nodeSetChildren$2: function(node, children) {
      var t1 = this.tree,
        t2 = (node << 1 >>> 0) + 1;
      if (t2 >= t1.length)
        return H.ioore(t1, t2);
      t1[t2] = children;
    },
    _nodeIsNotLeaf$1: function(node) {
      var t1 = this.tree,
        t2 = (node << 1 >>> 0) + 1;
      if (t2 >= t1.length)
        return H.ioore(t1, t2);
      return t1[t2] !== 0;
    },
    _nodeIsEmpty$1: function(node) {
      var t1 = this.tree,
        t2 = (node << 1 >>> 0) + 1;
      if (t2 >= t1.length)
        return H.ioore(t1, t2);
      return t1[t2] < 0;
    },
    _huffmanCodeLengthsToCodes$3: function(codeLengths, codeLengthsSize, huffCodes) {
      var codeLengthHist, nextCodes, symbol, maxCodeLength, maxCodeLength0, t2, t3, codeLen, currCode, t4, t5,
        t1 = type$.legacy_List_legacy_int;
      t1._as(codeLengths);
      t1._as(huffCodes);
      codeLengthHist = new Int32Array(16);
      nextCodes = new Int32Array(16);
      for (t1 = codeLengths.length, symbol = 0, maxCodeLength = 0; symbol < codeLengthsSize; ++symbol) {
        if (symbol >= t1)
          return H.ioore(codeLengths, symbol);
        maxCodeLength0 = codeLengths[symbol];
        if (maxCodeLength0 > maxCodeLength)
          maxCodeLength = maxCodeLength0;
      }
      if (maxCodeLength > 15)
        return false;
      for (t2 = codeLengthHist.length, symbol = 0; symbol < codeLengthsSize; ++symbol) {
        if (symbol >= t1)
          return H.ioore(codeLengths, symbol);
        t3 = codeLengths[symbol];
        if (t3 < 0 || t3 >= t2)
          return H.ioore(codeLengthHist, t3);
        codeLengthHist[t3] = codeLengthHist[t3] + 1;
      }
      if (0 >= t2)
        return H.ioore(codeLengthHist, 0);
      codeLengthHist[0] = 0;
      t3 = nextCodes.length;
      if (0 >= t3)
        return H.ioore(nextCodes, 0);
      nextCodes[0] = -1;
      for (codeLen = 1, currCode = 0; codeLen <= maxCodeLength; ++codeLen) {
        t4 = codeLen - 1;
        if (t4 >= t2)
          return H.ioore(codeLengthHist, t4);
        currCode = currCode + codeLengthHist[t4] << 1 >>> 0;
        if (codeLen >= t3)
          return H.ioore(nextCodes, codeLen);
        nextCodes[codeLen] = currCode;
      }
      for (t2 = huffCodes.length, symbol = 0; symbol < codeLengthsSize; ++symbol) {
        if (symbol >= t1)
          return H.ioore(codeLengths, symbol);
        t4 = codeLengths[symbol];
        if (t4 > 0) {
          if (t4 >= t3)
            return H.ioore(nextCodes, t4);
          t5 = nextCodes[t4];
          nextCodes[t4] = t5 + 1;
          if (symbol >= t2)
            return H.ioore(huffCodes, symbol);
          huffCodes[symbol] = t5;
        } else {
          if (symbol >= t2)
            return H.ioore(huffCodes, symbol);
          huffCodes[symbol] = -1;
        }
      }
      return true;
    }
  };
  B.HTreeGroup.prototype = {
    HTreeGroup$0: function() {
      var t1, i, t2, t3;
      for (t1 = this.htrees, i = 0; i < 5; ++i) {
        t2 = new Uint8Array(128);
        t3 = new Int16Array(128);
        t2 = new B.HuffmanTree(t2, t3, new Int16Array(128));
        t2._init$1(0);
        C.JSArray_methods.$indexSet(t1, i, t2);
      }
    },
    $index: function(_, index) {
      var t1 = this.htrees;
      if (C.JSArray_methods.$index(t1, index) == null)
        C.JSArray_methods.$indexSet(t1, index, B.HuffmanTree$());
      return C.JSArray_methods.$index(t1, index);
    }
  };
  D.WebPInfo.prototype = {};
  D.InternalWebPInfo.prototype = {};
  E.WebPDecoder.prototype = {
    isValidFile$1: function(bytes) {
      var t1 = Z.InputBuffer$(type$.legacy_List_legacy_int._as(bytes), false, null, 0);
      this._webp_decoder$_input = t1;
      if (!this._getHeader$1(t1))
        return false;
      return true;
    },
    startDecode$1: function(bytes) {
      var t2, _this = this, _null = null,
        t1 = Z.InputBuffer$(type$.legacy_List_legacy_int._as(bytes), false, _null, 0);
      _this._webp_decoder$_input = t1;
      if (!_this._getHeader$1(t1))
        return _null;
      t1 = new D.InternalWebPInfo(H.setRuntimeTypeInfo([], type$.JSArray_legacy_WebPFrame));
      _this._info = t1;
      if (!_this._webp_decoder$_getInfo$2(_this._webp_decoder$_input, t1))
        return _null;
      t1 = _this._info;
      switch (t1.format) {
        case 3:
          t1._numFrames = t1.frames.length;
          return t1;
        case 2:
          t2 = _this._webp_decoder$_input;
          t2.offset = t1._vp8Position;
          if (!S.VP8L$(t2, t1).decodeHeader$0())
            return _null;
          t1 = _this._info;
          t1._numFrames = t1.frames.length;
          return t1;
        case 1:
          t2 = _this._webp_decoder$_input;
          t2.offset = t1._vp8Position;
          if (!A.VP8$(t2, t1).decodeHeader$0())
            return _null;
          t1 = _this._info;
          t1._numFrames = t1.frames.length;
          return t1;
      }
      return _null;
    },
    decodeFrame$1: function(frame) {
      var t2, t3, f, _this = this,
        t1 = _this._webp_decoder$_input;
      if (t1 == null || _this._info == null)
        return null;
      t2 = _this._info;
      if (t2.hasAnimation) {
        t2 = t2.frames;
        t3 = t2.length;
        if (frame >= t3 || false)
          return null;
        if (frame >= t3)
          return H.ioore(t2, frame);
        f = t2[frame];
        return _this._decodeFrame$2$frame(t1.subset$2$position(f._frameSize, f._framePosition), frame);
      }
      t3 = t2.format;
      if (t3 === 2)
        return S.VP8L$(t1.subset$2$position(t2._vp8Size, t2._vp8Position), _this._info).decode$0();
      else if (t3 === 1)
        return A.VP8$(t1.subset$2$position(t2._vp8Size, t2._vp8Position), _this._info).decode$0();
      return null;
    },
    decodeImage$1: function(bytes) {
      var t1;
      this.startDecode$1(type$.legacy_List_legacy_int._as(bytes));
      t1 = this._info;
      t1._frame = 0;
      t1._numFrames = 1;
      return this.decodeFrame$1(0);
    },
    _decodeFrame$2$frame: function(input, frame) {
      var t2, f, data, _null = null,
        t1 = H.setRuntimeTypeInfo([], type$.JSArray_legacy_WebPFrame),
        webp = new D.InternalWebPInfo(t1);
      if (!this._webp_decoder$_getInfo$2(input, webp))
        return _null;
      if (webp.format === 0)
        return _null;
      t2 = this._info;
      webp._frame = t2._frame;
      webp._numFrames = t2._numFrames;
      if (webp.hasAnimation) {
        t2 = t1.length;
        if (frame >= t2 || false)
          return _null;
        if (frame >= t2)
          return H.ioore(t1, frame);
        f = t1[frame];
        return this._decodeFrame$2$frame(input.subset$2$position(f._frameSize, f._framePosition), frame);
      } else {
        data = input.subset$2$position(webp._vp8Size, webp._vp8Position);
        t1 = webp.format;
        if (t1 === 2)
          return S.VP8L$(data, webp).decode$0();
        else if (t1 === 1)
          return A.VP8$(data, webp).decode$0();
      }
      return _null;
    },
    _getHeader$1: function(input) {
      if (input.readString$1(4) !== "RIFF")
        return false;
      input.readUint32$0();
      if (input.readString$1(4) !== "WEBP")
        return false;
      return true;
    },
    _webp_decoder$_getInfo$2: function(input, webp) {
      var t3, tag, size, diskSize, p, t4, t5, c, remainder,
        t1 = input.end,
        t2 = input.start,
        found = false;
      while (true) {
        t3 = input.offset;
        if (typeof t3 !== "number")
          return t3.$ge();
        if (!(t3 < t1 && !found))
          break;
        tag = input.readString$1(4);
        size = input.readUint32$0();
        diskSize = size + 1 >>> 1 << 1 >>> 0;
        t3 = input.offset;
        if (typeof t3 !== "number")
          return t3.$sub();
        if (typeof t2 !== "number")
          return H.iae(t2);
        p = t3 - t2;
        switch (tag) {
          case "VP8X":
            if (!this._getVp8xInfo$2(input, webp))
              return false;
            break;
          case "VP8 ":
            webp._vp8Position = p;
            webp._vp8Size = size;
            webp.format = 1;
            found = true;
            break;
          case "VP8L":
            webp._vp8Position = p;
            webp._vp8Size = size;
            webp.format = 2;
            found = true;
            break;
          case "ALPH":
            t3 = input.buffer;
            t4 = input.bigEndian;
            t5 = J.get$length$asx(t3);
            t3 = new Z.InputBuffer(t3, 0, t5, 0, t4);
            webp._webp_info$_alphaData = t3;
            t3.offset = input.offset;
            t3 = input.offset;
            if (typeof t3 !== "number")
              return t3.$add();
            input.offset = t3 + diskSize;
            break;
          case "ANIM":
            webp.format = 3;
            c = input.readUint32$0();
            input.readUint16$0();
            C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(c & 255, 0, 255));
            C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(c >>> 24 & 255, 0, 255));
            C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(c >>> 16 & 255, 0, 255));
            C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(c >>> 8 & 255, 0, 255));
            break;
          case "ANMF":
            if (!this._getAnimFrameInfo$3(input, webp, size))
              return false;
            break;
          case "ICCP":
            input.readString$1(size);
            break;
          case "EXIF":
            input.readString$1(size);
            break;
          case "XMP ":
            input.readString$1(size);
            break;
          default:
            H.printString("UNKNOWN WEBP TAG: " + tag);
            t3 = input.offset;
            if (typeof t3 !== "number")
              return t3.$add();
            input.offset = t3 + diskSize;
            break;
        }
        t3 = input.offset;
        if (typeof t3 !== "number")
          return t3.$sub();
        remainder = diskSize - (t3 - t2 - p);
        if (remainder > 0)
          input.offset = t3 + remainder;
      }
      if (!webp.hasAlpha)
        webp.hasAlpha = webp._webp_info$_alphaData != null;
      return webp.format !== 0;
    },
    _getVp8xInfo$2: function(input, webp) {
      var t1, t2, t3, t4,
        b = input.readByte$0();
      if (typeof b !== "number")
        return b.$and();
      if ((b & 192) !== 0)
        return false;
      t1 = C.JSInt_methods._shrOtherPositive$1(b, 4);
      t2 = C.JSInt_methods._shrOtherPositive$1(b, 1);
      if ((b & 1) !== 0)
        return false;
      if (input.readUint24$0() !== 0)
        return false;
      t3 = input.readUint24$0();
      t4 = input.readUint24$0();
      webp.width = t3 + 1;
      webp.height = t4 + 1;
      webp.hasAnimation = (t2 & 1) !== 0;
      webp.hasAlpha = (t1 & 1) !== 0;
      return true;
    },
    _getAnimFrameInfo$3: function(input, webp, size) {
      var frame = new X.InternalWebPFrame();
      frame.WebPFrame$2(input, size);
      if (frame._reserved !== 0)
        return false;
      C.JSArray_methods.add$1(webp.frames, frame);
      return true;
    }
  };
  F.HdrImage.prototype = {
    HdrImage$fromImage$1: function(other) {
      var rgb, t3, y, si, x, t4, si0, _this = this,
        t1 = other.width,
        t2 = other.height;
      _this.addSlice$1(K.HdrSlice$("R", t1, t2, 1));
      _this.addSlice$1(K.HdrSlice$("G", t1, t2, 1));
      _this.addSlice$1(K.HdrSlice$("B", t1, t2, 1));
      if (other.channels === C.Channels_1)
        _this.addSlice$1(K.HdrSlice$("A", t1, t2, 1));
      rgb = other.getBytes$0();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = rgb.length;
      y = 0;
      si = 0;
      for (; y < t2; ++y) {
        if (typeof t1 !== "number")
          return H.iae(t1);
        x = 0;
        for (; x < t1; ++x) {
          t4 = _this.red;
          si0 = si + 1;
          if (si < 0 || si >= t3)
            return H.ioore(rgb, si);
          t4.setFloat$3(x, y, rgb[si] / 255);
          t4 = _this.green;
          si = si0 + 1;
          if (si0 < 0 || si0 >= t3)
            return H.ioore(rgb, si0);
          t4.setFloat$3(x, y, rgb[si0] / 255);
          t4 = _this.blue;
          si0 = si + 1;
          if (si < 0 || si >= t3)
            return H.ioore(rgb, si);
          t4.setFloat$3(x, y, rgb[si] / 255);
          t4 = _this.alpha;
          if (t4 != null) {
            si = si0 + 1;
            if (si0 < 0 || si0 >= t3)
              return H.ioore(rgb, si0);
            t4.setFloat$3(x, y, rgb[si0] / 255);
          } else
            si = si0;
        }
      }
    },
    get$width: function(_) {
      var t1 = this.slices;
      if (t1.get$isEmpty(t1))
        t1 = 0;
      else {
        t1 = t1.get$values();
        t1 = t1.get$first(t1).width;
      }
      return t1;
    },
    get$height: function(_) {
      var t1 = this.slices;
      if (t1.get$isEmpty(t1))
        t1 = 0;
      else {
        t1 = t1.get$values();
        t1 = t1.get$first(t1).height;
      }
      return t1;
    },
    $index: function(_, ch) {
      return this.slices.$index(0, H._asStringS(ch));
    },
    addSlice$1: function(slice) {
      var _this = this,
        ch = slice.name;
      _this.slices.$indexSet(0, ch, slice);
      switch (ch) {
        case "R":
          _this.red = slice;
          break;
        case "G":
          _this.green = slice;
          break;
        case "B":
          _this.blue = slice;
          break;
        case "A":
          _this.alpha = slice;
          break;
        case "Z":
          break;
      }
    }
  };
  K.HdrSlice.prototype = {
    getFloat$2: function(x, y) {
      var pi, t2, s,
        t1 = this.width;
      if (typeof t1 !== "number")
        return H.iae(t1);
      pi = y * t1 + x;
      t1 = this.data;
      t2 = t1.length;
      if (this.type === 1) {
        if (pi < 0 || pi >= t2)
          return H.ioore(t1, pi);
        s = Q.Half_HalfToDouble(H._asIntS(t1[pi]));
      } else {
        if (pi < 0 || pi >= t2)
          return H.ioore(t1, pi);
        s = t1[pi];
      }
      return s;
    },
    setFloat$3: function(x, y, v) {
      var pi, _this = this,
        t1 = _this.width;
      if (typeof t1 !== "number")
        return H.iae(t1);
      pi = y * t1 + x;
      t1 = _this.type;
      if (t1 === 2 || t1 === 3)
        J.$indexSet$ax(_this.data, pi, v);
      else if (t1 === 1)
        J.$indexSet$ax(_this.data, pi, Q.Half_DoubleToHalf(v));
    }
  };
  A.hdrToImage__knee.prototype = {
    call$2: function(x, f) {
      return Math.log(x * f + 1) / f;
    },
    $signature: 13
  };
  A.hdrToImage__gamma.prototype = {
    call$2: function(h, m) {
      var t1,
        x = Math.max(0, h * m);
      if (x > 1) {
        t1 = this._knee.call$2(x - 1, 0.184874);
        if (typeof t1 !== "number")
          return H.iae(t1);
        x = 1 + t1;
      }
      return Math.pow(x, 0.4545) * 84.66;
    },
    $signature: 13
  };
  D.ICCProfileData.prototype = {};
  U.Format.prototype = {
    toString$0: function(_) {
      return this._image$_name;
    }
  };
  U.Channels.prototype = {
    toString$0: function(_) {
      return this._image$_name;
    }
  };
  U.BlendMode.prototype = {
    toString$0: function(_) {
      return "BlendMode.over";
    }
  };
  U.DisposeMode.prototype = {
    toString$0: function(_) {
      return "DisposeMode.clear";
    }
  };
  U.Image.prototype = {
    getBytes$0: function() {
      var t2, bytes, len, i, t3, t4, t5, j, _this = this,
        t1 = _this.data,
        rgba = H.NativeUint8List_NativeUint8List$view(t1.buffer, 0, null);
      switch (C.Format_2) {
        case C.Format_2:
          return rgba;
        case C.Format_3:
          t1 = _this.width;
          t2 = _this.height;
          if (typeof t1 !== "number")
            return t1.$mul();
          if (typeof t2 !== "number")
            return H.iae(t2);
          bytes = new Uint8Array(t1 * t2 * 4);
          for (len = bytes.length, t1 = rgba.length, i = 0; i < len; i += 4) {
            t2 = i + 2;
            if (t2 >= t1)
              return H.ioore(rgba, t2);
            bytes[i] = rgba[t2];
            t3 = i + 1;
            if (t3 >= t1)
              return H.ioore(rgba, t3);
            t4 = rgba[t3];
            if (t3 >= len)
              return H.ioore(bytes, t3);
            bytes[t3] = t4;
            if (i >= t1)
              return H.ioore(rgba, i);
            t4 = rgba[i];
            if (t2 >= len)
              return H.ioore(bytes, t2);
            bytes[t2] = t4;
            t4 = i + 3;
            if (t4 >= t1)
              return H.ioore(rgba, t4);
            t2 = rgba[t4];
            if (t4 >= len)
              return H.ioore(bytes, t4);
            bytes[t4] = t2;
          }
          return bytes;
        case C.Format_1:
          t1 = _this.width;
          t2 = _this.height;
          if (typeof t1 !== "number")
            return t1.$mul();
          if (typeof t2 !== "number")
            return H.iae(t2);
          bytes = new Uint8Array(t1 * t2 * 4);
          for (len = bytes.length, t1 = rgba.length, i = 0; i < len; i += 4) {
            t2 = i + 3;
            if (t2 >= t1)
              return H.ioore(rgba, t2);
            bytes[i] = rgba[t2];
            t3 = i + 1;
            t4 = i + 2;
            if (t4 >= t1)
              return H.ioore(rgba, t4);
            t5 = rgba[t4];
            if (t3 >= len)
              return H.ioore(bytes, t3);
            bytes[t3] = t5;
            if (t3 >= t1)
              return H.ioore(rgba, t3);
            t3 = rgba[t3];
            if (t4 >= len)
              return H.ioore(bytes, t4);
            bytes[t4] = t3;
            if (i >= t1)
              return H.ioore(rgba, i);
            t3 = rgba[i];
            if (t2 >= len)
              return H.ioore(bytes, t2);
            bytes[t2] = t3;
          }
          return bytes;
        case C.Format_0:
          t1 = _this.width;
          t2 = _this.height;
          if (typeof t1 !== "number")
            return t1.$mul();
          if (typeof t2 !== "number")
            return H.iae(t2);
          bytes = new Uint8Array(t1 * t2 * 4);
          for (len = bytes.length, t1 = rgba.length, i = 0; i < len; i += 4) {
            t2 = i + 3;
            if (t2 >= t1)
              return H.ioore(rgba, t2);
            bytes[i] = rgba[t2];
            t3 = i + 1;
            if (i >= t1)
              return H.ioore(rgba, i);
            t4 = rgba[i];
            if (t3 >= len)
              return H.ioore(bytes, t3);
            bytes[t3] = t4;
            t4 = i + 2;
            if (t3 >= t1)
              return H.ioore(rgba, t3);
            t3 = rgba[t3];
            if (t4 >= len)
              return H.ioore(bytes, t4);
            bytes[t4] = t3;
            if (t4 >= t1)
              return H.ioore(rgba, t4);
            t4 = rgba[t4];
            if (t2 >= len)
              return H.ioore(bytes, t2);
            bytes[t2] = t4;
          }
          return bytes;
        case C.Format_4:
          t1 = _this.width;
          t2 = _this.height;
          if (typeof t1 !== "number")
            return t1.$mul();
          if (typeof t2 !== "number")
            return H.iae(t2);
          bytes = new Uint8Array(t1 * t2 * 3);
          for (len = bytes.length, t1 = rgba.length, i = 0, j = 0; j < len; i += 4, j += 3) {
            if (i >= t1)
              return H.ioore(rgba, i);
            bytes[j] = rgba[i];
            t2 = j + 1;
            t3 = i + 1;
            if (t3 >= t1)
              return H.ioore(rgba, t3);
            t3 = rgba[t3];
            if (t2 >= len)
              return H.ioore(bytes, t2);
            bytes[t2] = t3;
            t3 = j + 2;
            t2 = i + 2;
            if (t2 >= t1)
              return H.ioore(rgba, t2);
            t2 = rgba[t2];
            if (t3 >= len)
              return H.ioore(bytes, t3);
            bytes[t3] = t2;
          }
          return bytes;
        case C.Format_5:
          t1 = _this.width;
          t2 = _this.height;
          if (typeof t1 !== "number")
            return t1.$mul();
          if (typeof t2 !== "number")
            return H.iae(t2);
          bytes = new Uint8Array(t1 * t2 * 3);
          for (len = bytes.length, t1 = rgba.length, i = 0, j = 0; j < len; i += 4, j += 3) {
            t2 = i + 2;
            if (t2 >= t1)
              return H.ioore(rgba, t2);
            bytes[j] = rgba[t2];
            t2 = j + 1;
            t3 = i + 1;
            if (t3 >= t1)
              return H.ioore(rgba, t3);
            t3 = rgba[t3];
            if (t2 >= len)
              return H.ioore(bytes, t2);
            bytes[t2] = t3;
            t3 = j + 2;
            if (i >= t1)
              return H.ioore(rgba, i);
            t2 = rgba[i];
            if (t3 >= len)
              return H.ioore(bytes, t3);
            bytes[t3] = t2;
          }
          return bytes;
        case C.Format_6:
          t2 = _this.width;
          t3 = _this.height;
          if (typeof t2 !== "number")
            return t2.$mul();
          if (typeof t3 !== "number")
            return H.iae(t3);
          bytes = new Uint8Array(t2 * t3);
          for (len = t1.length, t2 = bytes.length, i = 0; i < len; ++i) {
            t3 = t1[i];
            t3 = C.JSDouble_methods.round$0(0.299 * (t3 & 255) + 0.587 * (t3 >>> 8 & 255) + 0.114 * (t3 >>> 16 & 255));
            if (i >= t2)
              return H.ioore(bytes, i);
            bytes[i] = t3;
          }
          return bytes;
      }
      return rgba;
    },
    get$length: function(_) {
      return this.data.length;
    },
    $index: function(_, index) {
      return C.NativeUint32List_methods.$index(this.data, index);
    },
    boundsSafe$2: function(x, y) {
      var t1;
      if (x >= 0) {
        t1 = this.width;
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (x < t1)
          if (y >= 0) {
            t1 = this.height;
            if (typeof t1 !== "number")
              return H.iae(t1);
            t1 = y < t1;
          } else
            t1 = false;
        else
          t1 = false;
      } else
        t1 = false;
      return t1;
    },
    getPixelSafe$2: function(x, y) {
      var t1, t2;
      if (this.boundsSafe$2(x, y)) {
        t1 = this.data;
        t2 = this.width;
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = y * t2 + x;
        if (t2 < 0 || t2 >= t1.length)
          return H.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
      } else
        t1 = 0;
      return t1;
    },
    getPixelInterpolate$3: function(fx, fy, interpolation) {
      if (interpolation === C.Interpolation_2)
        return this.getPixelCubic$2(fx, fy);
      else if (interpolation === C.Interpolation_1)
        return this.getPixelLinear$2(fx, fy);
      return this.getPixelSafe$2(C.JSNumber_methods.toInt$0(fx), C.JSNumber_methods.toInt$0(fy));
    },
    getPixelLinear$2: function(fx, fy) {
      var y, ny, Icc, Inc, Icn, Inn, _this = this,
        t1 = C.JSNumber_methods.toInt$0(fx),
        x = t1 - (fx >= 0 ? 0 : 1),
        nx = x + 1;
      t1 = C.JSNumber_methods.toInt$0(fy);
      y = t1 - (fy >= 0 ? 0 : 1);
      ny = y + 1;
      t1 = new U.Image_getPixelLinear__linear(fx - x, fy - y);
      Icc = _this.getPixelSafe$2(x, y);
      Inc = _this.getPixelSafe$2(nx, y);
      Icn = _this.getPixelSafe$2(x, ny);
      Inn = _this.getPixelSafe$2(nx, ny);
      return K.getColor(t1.call$4(Icc & 255, Inc & 255, Icn & 255, Inn & 255), t1.call$4(Icc >>> 8 & 255, Inc >>> 8 & 255, Icn >>> 8 & 255, Inn >>> 8 & 255), t1.call$4(Icc >>> 16 & 255, Inc >>> 16 & 255, Icn >>> 16 & 255, Inn >>> 16 & 255), t1.call$4(Icc >>> 24 & 255, Inc >>> 24 & 255, Icn >>> 24 & 255, Inn >>> 24 & 255));
    },
    getPixelCubic$2: function(fx, fy) {
      var y, py, ny, ay, dx, dy, Ipp, Icp, Inp, Iap, Ip0, Ip1, Ip2, Ip3, Ipc, Icc, Inc, Iac, Ic0, Ic1, Ic2, Ic3, Ipn, Icn, Inn, Ian, In0, In1, In2, In3, Ipa, Ica, Ina, Iaa, Ia0, Ia1, Ia2, Ia3, c0, c1, c2, c3, _this = this,
        t1 = C.JSNumber_methods.toInt$0(fx),
        x = t1 - (fx >= 0 ? 0 : 1),
        px = x - 1,
        nx = x + 1,
        ax = x + 2;
      t1 = C.JSNumber_methods.toInt$0(fy);
      y = t1 - (fy >= 0 ? 0 : 1);
      py = y - 1;
      ny = y + 1;
      ay = y + 2;
      dx = fx - x;
      dy = fy - y;
      t1 = new U.Image_getPixelCubic__cubic();
      Ipp = _this.getPixelSafe$2(px, py);
      Icp = _this.getPixelSafe$2(x, py);
      Inp = _this.getPixelSafe$2(nx, py);
      Iap = _this.getPixelSafe$2(ax, py);
      Ip0 = t1.call$5(dx, Ipp & 255, Icp & 255, Inp & 255, Iap & 255);
      Ip1 = t1.call$5(dx, Ipp >>> 8 & 255, Icp >>> 8 & 255, Inp >>> 8 & 255, Iap >>> 8 & 255);
      Ip2 = t1.call$5(dx, Ipp >>> 16 & 255, Icp >>> 16 & 255, Inp >>> 16 & 255, Iap >>> 16 & 255);
      Ip3 = t1.call$5(dx, Ipp >>> 24 & 255, Icp >>> 24 & 255, Inp >>> 24 & 255, Iap >>> 24 & 255);
      Ipc = _this.getPixelSafe$2(px, y);
      Icc = _this.getPixelSafe$2(x, y);
      Inc = _this.getPixelSafe$2(nx, y);
      Iac = _this.getPixelSafe$2(ax, y);
      Ic0 = t1.call$5(dx, Ipc & 255, Icc & 255, Inc & 255, Iac & 255);
      Ic1 = t1.call$5(dx, Ipc >>> 8 & 255, Icc >>> 8 & 255, Inc >>> 8 & 255, Iac >>> 8 & 255);
      Ic2 = t1.call$5(dx, Ipc >>> 16 & 255, Icc >>> 16 & 255, Inc >>> 16 & 255, Iac >>> 16 & 255);
      Ic3 = t1.call$5(dx, Ipc >>> 24 & 255, Icc >>> 24 & 255, Inc >>> 24 & 255, Iac >>> 24 & 255);
      Ipn = _this.getPixelSafe$2(px, ny);
      Icn = _this.getPixelSafe$2(x, ny);
      Inn = _this.getPixelSafe$2(nx, ny);
      Ian = _this.getPixelSafe$2(ax, ny);
      In0 = t1.call$5(dx, Ipn & 255, Icn & 255, Inn & 255, Ian & 255);
      In1 = t1.call$5(dx, Ipn >>> 8 & 255, Icn >>> 8 & 255, Inn >>> 8 & 255, Ian >>> 8 & 255);
      In2 = t1.call$5(dx, Ipn >>> 16 & 255, Icn >>> 16 & 255, Inn >>> 16 & 255, Ian >>> 16 & 255);
      In3 = t1.call$5(dx, Ipn >>> 24 & 255, Icn >>> 24 & 255, Inn >>> 24 & 255, Ian >>> 24 & 255);
      Ipa = _this.getPixelSafe$2(px, ay);
      Ica = _this.getPixelSafe$2(x, ay);
      Ina = _this.getPixelSafe$2(nx, ay);
      Iaa = _this.getPixelSafe$2(ax, ay);
      Ia0 = t1.call$5(dx, Ipa & 255, Ica & 255, Ina & 255, Iaa & 255);
      Ia1 = t1.call$5(dx, Ipa >>> 8 & 255, Ica >>> 8 & 255, Ina >>> 8 & 255, Iaa >>> 8 & 255);
      Ia2 = t1.call$5(dx, Ipa >>> 16 & 255, Ica >>> 16 & 255, Ina >>> 16 & 255, Iaa >>> 16 & 255);
      Ia3 = t1.call$5(dx, Ipa >>> 24 & 255, Ica >>> 24 & 255, Ina >>> 24 & 255, Iaa >>> 24 & 255);
      c0 = t1.call$5(dy, Ip0, Ic0, In0, Ia0);
      c1 = t1.call$5(dy, Ip1, Ic1, In1, Ia1);
      c2 = t1.call$5(dy, Ip2, Ic2, In2, Ia2);
      c3 = t1.call$5(dy, Ip3, Ic3, In3, Ia3);
      return K.getColor(J.toInt$0$n(c0), J.toInt$0$n(c1), J.toInt$0$n(c2), J.toInt$0$n(c3));
    },
    setPixel$3: function(x, y, color) {
      var t1 = this.width;
      if (typeof t1 !== "number")
        return H.iae(t1);
      C.NativeUint32List_methods.$indexSet(this.data, y * t1 + x, color);
    }
  };
  U.Image_getPixelLinear__linear.prototype = {
    call$4: function(Icc, Inc, Icn, Inn) {
      var t1 = this.dy;
      return C.JSNumber_methods.toInt$0(Icc + this.dx * (Inc - Icc + t1 * (Icc + Inn - Icn - Inc)) + t1 * (Icn - Icc));
    },
    $signature: 25
  };
  U.Image_getPixelCubic__cubic.prototype = {
    call$5: function(dx, Ipp, Icp, Inp, Iap) {
      var t1 = -Ipp,
        t2 = dx * dx;
      return Icp + 0.5 * (dx * (t1 + Inp) + t2 * (2 * Ipp - 5 * Icp + 4 * Inp - Iap) + t2 * dx * (t1 + 3 * Icp - 3 * Inp + Iap));
    },
    $signature: 26
  };
  K.ImageException.prototype = {
    toString$0: function(_) {
      return "ImageException: " + this.message;
    }
  };
  N.Flip.prototype = {
    toString$0: function(_) {
      return this._flip$_name;
    }
  };
  Z.InputBuffer.prototype = {
    get$length: function(_) {
      var t1 = this.offset;
      if (typeof t1 !== "number")
        return H.iae(t1);
      return this.end - t1;
    },
    $index: function(_, index) {
      var t1 = this.buffer,
        t2 = this.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      if (typeof index !== "number")
        return H.iae(index);
      return J.$index$asx(t1, t2 + index);
    },
    $indexSet: function(_, index, value) {
      var t1 = this.buffer,
        t2 = this.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      J.$indexSet$ax(t1, t2 + index, value);
      return value;
    },
    memcpy$4: function(start, $length, other, offset) {
      var t3, t4,
        t1 = this.buffer,
        t2 = this.offset;
      if (other instanceof Z.InputBuffer) {
        if (typeof t2 !== "number")
          return t2.$add();
        t2 += start;
        t3 = other.buffer;
        t4 = other.offset;
        if (typeof t4 !== "number")
          return t4.$add();
        J.setRange$4$ax(t1, t2, t2 + $length, t3, t4 + offset);
      } else {
        if (typeof t2 !== "number")
          return t2.$add();
        t2 += start;
        J.setRange$4$ax(t1, t2, t2 + $length, type$.legacy_List_legacy_int._as(other), offset);
      }
    },
    memcpy$3: function(start, $length, other) {
      return this.memcpy$4(start, $length, other, 0);
    },
    memset$3: function(start, $length, value) {
      var t1 = this.buffer,
        t2 = this.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      t2 += start;
      J.fillRange$3$ax(t1, t2, t2 + $length, value);
    },
    subset$3$offset$position: function(count, offset, position) {
      var t1, pos, _this = this;
      if (position != null) {
        t1 = _this.start;
        if (typeof t1 !== "number")
          return t1.$add();
        pos = t1 + position;
      } else
        pos = _this.offset;
      if (typeof pos !== "number")
        return pos.$add();
      return Z.InputBuffer$(_this.buffer, _this.bigEndian, count, pos + offset);
    },
    subset$1: function(count) {
      return this.subset$3$offset$position(count, 0, null);
    },
    subset$2$position: function(count, position) {
      return this.subset$3$offset$position(count, 0, position);
    },
    subset$2$offset: function(count, offset) {
      return this.subset$3$offset$position(count, offset, null);
    },
    readByte$0: function() {
      var t1 = this.buffer,
        t2 = this.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      this.offset = t2 + 1;
      return J.$index$asx(t1, t2);
    },
    readBytes$1: function(count) {
      var bytes = this.subset$1(count),
        t1 = this.offset,
        t2 = bytes.offset;
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (typeof t1 !== "number")
        return t1.$add();
      this.offset = t1 + (bytes.end - t2);
      return bytes;
    },
    readString$1: function(len) {
      var codes, t1, t2, t3, _this = this;
      if (len == null) {
        codes = H.setRuntimeTypeInfo([], type$.JSArray_legacy_int);
        t1 = _this.end;
        while (true) {
          t2 = _this.offset;
          if (typeof t2 !== "number")
            return t2.$ge();
          if (!(t2 < t1))
            break;
          t3 = _this.buffer;
          _this.offset = t2 + 1;
          t2 = J.$index$asx(t3, t2);
          if (t2 === 0)
            return P.String_String$fromCharCodes(codes);
          C.JSArray_methods.add$1(codes, t2);
        }
        throw H.wrapException(K.ImageException$("EOF reached without finding string terminator"));
      }
      return P.String_String$fromCharCodes(_this.readBytes$1(len).toUint8List$0());
    },
    readString$0: function() {
      return this.readString$1(null);
    },
    readUint16$0: function() {
      var b1, b2, _this = this,
        t1 = _this.buffer,
        t2 = _this.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      _this.offset = t2 + 1;
      t2 = J.$index$asx(t1, t2);
      if (typeof t2 !== "number")
        return t2.$and();
      b1 = t2 & 255;
      t2 = _this.buffer;
      t1 = _this.offset;
      if (typeof t1 !== "number")
        return t1.$add();
      _this.offset = t1 + 1;
      t1 = J.$index$asx(t2, t1);
      if (typeof t1 !== "number")
        return t1.$and();
      b2 = t1 & 255;
      if (_this.bigEndian)
        return b1 << 8 | b2;
      return b2 << 8 | b1;
    },
    readUint24$0: function() {
      var b1, b2, b3, _this = this,
        t1 = _this.buffer,
        t2 = _this.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      _this.offset = t2 + 1;
      t2 = J.$index$asx(t1, t2);
      if (typeof t2 !== "number")
        return t2.$and();
      b1 = t2 & 255;
      t2 = _this.buffer;
      t1 = _this.offset;
      if (typeof t1 !== "number")
        return t1.$add();
      _this.offset = t1 + 1;
      t1 = J.$index$asx(t2, t1);
      if (typeof t1 !== "number")
        return t1.$and();
      b2 = t1 & 255;
      t1 = _this.buffer;
      t2 = _this.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      _this.offset = t2 + 1;
      t2 = J.$index$asx(t1, t2);
      if (typeof t2 !== "number")
        return t2.$and();
      b3 = t2 & 255;
      if (_this.bigEndian)
        return b3 | b2 << 8 | b1 << 16;
      return b1 | b2 << 8 | b3 << 16;
    },
    readUint32$0: function() {
      var b1, b2, b3, b4, _this = this,
        t1 = _this.buffer,
        t2 = _this.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      _this.offset = t2 + 1;
      t2 = J.$index$asx(t1, t2);
      if (typeof t2 !== "number")
        return t2.$and();
      b1 = t2 & 255;
      t2 = _this.buffer;
      t1 = _this.offset;
      if (typeof t1 !== "number")
        return t1.$add();
      _this.offset = t1 + 1;
      t1 = J.$index$asx(t2, t1);
      if (typeof t1 !== "number")
        return t1.$and();
      b2 = t1 & 255;
      t1 = _this.buffer;
      t2 = _this.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      _this.offset = t2 + 1;
      t2 = J.$index$asx(t1, t2);
      if (typeof t2 !== "number")
        return t2.$and();
      b3 = t2 & 255;
      t2 = _this.buffer;
      t1 = _this.offset;
      if (typeof t1 !== "number")
        return t1.$add();
      _this.offset = t1 + 1;
      t1 = J.$index$asx(t2, t1);
      if (typeof t1 !== "number")
        return t1.$and();
      b4 = t1 & 255;
      if (_this.bigEndian)
        return (b1 << 24 | b2 << 16 | b3 << 8 | b4) >>> 0;
      return (b4 << 24 | b3 << 16 | b2 << 8 | b1) >>> 0;
    },
    readFloat64$0: function() {
      return Z.uint64ToFloat64(this.readUint64$0());
    },
    readUint64$0: function() {
      var b1, b2, b3, b4, b5, b6, b7, b8, _this = this,
        t1 = _this.buffer,
        t2 = _this.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      _this.offset = t2 + 1;
      t2 = J.$index$asx(t1, t2);
      if (typeof t2 !== "number")
        return t2.$and();
      b1 = t2 & 255;
      t2 = _this.buffer;
      t1 = _this.offset;
      if (typeof t1 !== "number")
        return t1.$add();
      _this.offset = t1 + 1;
      t1 = J.$index$asx(t2, t1);
      if (typeof t1 !== "number")
        return t1.$and();
      b2 = t1 & 255;
      t1 = _this.buffer;
      t2 = _this.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      _this.offset = t2 + 1;
      t2 = J.$index$asx(t1, t2);
      if (typeof t2 !== "number")
        return t2.$and();
      b3 = t2 & 255;
      t2 = _this.buffer;
      t1 = _this.offset;
      if (typeof t1 !== "number")
        return t1.$add();
      _this.offset = t1 + 1;
      t1 = J.$index$asx(t2, t1);
      if (typeof t1 !== "number")
        return t1.$and();
      b4 = t1 & 255;
      t1 = _this.buffer;
      t2 = _this.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      _this.offset = t2 + 1;
      t2 = J.$index$asx(t1, t2);
      if (typeof t2 !== "number")
        return t2.$and();
      b5 = t2 & 255;
      t2 = _this.buffer;
      t1 = _this.offset;
      if (typeof t1 !== "number")
        return t1.$add();
      _this.offset = t1 + 1;
      t1 = J.$index$asx(t2, t1);
      if (typeof t1 !== "number")
        return t1.$and();
      b6 = t1 & 255;
      t1 = _this.buffer;
      t2 = _this.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      _this.offset = t2 + 1;
      t2 = J.$index$asx(t1, t2);
      if (typeof t2 !== "number")
        return t2.$and();
      b7 = t2 & 255;
      t2 = _this.buffer;
      t1 = _this.offset;
      if (typeof t1 !== "number")
        return t1.$add();
      _this.offset = t1 + 1;
      t1 = J.$index$asx(t2, t1);
      if (typeof t1 !== "number")
        return t1.$and();
      b8 = t1 & 255;
      if (_this.bigEndian)
        return (C.JSInt_methods._shlPositive$1(b1, 56) | C.JSInt_methods._shlPositive$1(b2, 48) | C.JSInt_methods._shlPositive$1(b3, 40) | C.JSInt_methods._shlPositive$1(b4, 32) | b5 << 24 | b6 << 16 | b7 << 8 | b8) >>> 0;
      return (C.JSInt_methods._shlPositive$1(b8, 56) | C.JSInt_methods._shlPositive$1(b7, 48) | C.JSInt_methods._shlPositive$1(b6, 40) | C.JSInt_methods._shlPositive$1(b5, 32) | b4 << 24 | b3 << 16 | b2 << 8 | b1) >>> 0;
    },
    toList$2: function(_, offset, $length) {
      var t2, s, _this = this,
        t1 = _this.buffer;
      if (type$.legacy_Uint8List._is(t1))
        return _this.toUint8List$2(offset, $length);
      t2 = _this.start;
      if (typeof t2 !== "number")
        return t2.$add();
      s = t2 + offset + offset;
      if (typeof $length !== "number")
        return $length.$le();
      return J.sublist$2$ax(t1, s, $length <= 0 ? _this.end : s + $length);
    },
    toUint8List$2: function(offset, $length) {
      var t1, len, t2, t3, _this = this;
      if ($length == null) {
        t1 = _this.offset;
        if (typeof t1 !== "number")
          return H.iae(t1);
        len = _this.end - t1 - offset;
      } else
        len = $length;
      t1 = _this.buffer;
      if (type$.legacy_Uint8List._is(t1)) {
        t2 = t1.buffer;
        t1 = t1.byteOffset;
        t3 = _this.offset;
        if (typeof t1 !== "number")
          return t1.$add();
        if (typeof t3 !== "number")
          return H.iae(t3);
        return H.NativeUint8List_NativeUint8List$view(t2, t1 + t3 + offset, len);
      }
      t2 = _this.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      t2 += offset;
      t2 = new Uint8Array(H._ensureNativeList(J.sublist$2$ax(t1, t2, t2 + len)));
      t1 = t2;
      return t1;
    },
    toUint8List$0: function() {
      return this.toUint8List$2(0, null);
    },
    toUint32List$0: function() {
      var t2, t3,
        t1 = this.buffer;
      if (type$.legacy_Uint8List._is(t1)) {
        t2 = t1.buffer;
        t1 = t1.byteOffset;
        t3 = this.offset;
        if (typeof t1 !== "number")
          return t1.$add();
        if (typeof t3 !== "number")
          return H.iae(t3);
        return H.NativeUint32List_NativeUint32List$view(t2, t1 + t3, null);
      }
      return H.NativeUint32List_NativeUint32List$view(this.toUint8List$0().buffer, 0, null);
    },
    set$buffer: function(_, buffer) {
      this.buffer = type$.legacy_List_legacy_int._as(buffer);
    }
  };
  X.Interpolation.prototype = {
    toString$0: function(_) {
      return this._interpolation$_name;
    }
  };
  G.OutputBuffer.prototype = {
    writeByte$1: function(value) {
      var t1, t2, _this = this;
      if (_this.length === _this._buffer.length)
        _this._expandBuffer$0();
      t1 = _this._buffer;
      t2 = _this.length++;
      if (typeof value !== "number")
        return value.$and();
      if (t2 < 0 || t2 >= t1.length)
        return H.ioore(t1, t2);
      t1[t2] = value & 255;
    },
    writeBytes$1: function(bytes) {
      var len, t1, t2, t3, t4, _this = this;
      type$.legacy_List_legacy_int._as(bytes);
      len = bytes.length;
      for (; t1 = _this.length, t2 = t1 + len, t3 = _this._buffer, t4 = t3.length, t2 > t4;)
        _this._expandBuffer$1(t2 - t4);
      C.NativeUint8List_methods.setRange$3(t3, t1, t2, bytes);
      _this.length += len;
    },
    writeUint16$1: function(value) {
      var _this = this;
      if (_this.bigEndian) {
        if (typeof value !== "number")
          return value.$shr();
        _this.writeByte$1(C.JSInt_methods._shrOtherPositive$1(value, 8) & 255);
        _this.writeByte$1(value & 255);
        return;
      }
      if (typeof value !== "number")
        return value.$and();
      _this.writeByte$1(value & 255);
      _this.writeByte$1(C.JSInt_methods._shrOtherPositive$1(value, 8) & 255);
    },
    writeUint32$1: function(value) {
      var _this = this;
      if (_this.bigEndian) {
        _this.writeByte$1(value >>> 24 & 255);
        _this.writeByte$1(value >>> 16 & 255);
        _this.writeByte$1(value >>> 8 & 255);
        _this.writeByte$1(value & 255);
        return;
      }
      _this.writeByte$1(value & 255);
      _this.writeByte$1(value >>> 8 & 255);
      _this.writeByte$1(value >>> 16 & 255);
      _this.writeByte$1(value >>> 24 & 255);
    },
    _expandBuffer$1: function(required) {
      var blockSize, t1, newBuffer, _this = this;
      if (required != null)
        blockSize = required;
      else {
        t1 = _this._buffer.length;
        blockSize = t1 === 0 ? 8192 : t1 * 2;
      }
      t1 = _this._buffer;
      newBuffer = new Uint8Array(t1.length + blockSize);
      t1 = _this._buffer;
      C.NativeUint8List_methods.setRange$3(newBuffer, 0, t1.length, t1);
      _this._buffer = newBuffer;
    },
    _expandBuffer$0: function() {
      return this._expandBuffer$1(null);
    },
    get$length: function(receiver) {
      return this.length;
    }
  };
  B.main_closure.prototype = {
    call$1: function(e) {
      var imageOriginal, height, wight, imageResized, t3, t4, t5, t6, t7, t8, t9, t10, t11, resizedBytes,
        t1 = type$.legacy_MessageEvent._as(e).data,
        t2 = new P._AcceptStructuredCloneDart2Js([], []);
      t2.mustCopy = true;
      imageOriginal = N.decodeImage(type$.legacy_List_legacy_int._as(t2.walk$1(t1)));
      height = imageOriginal.height;
      wight = imageOriginal.width;
      if (typeof height !== "number")
        return height.$lt();
      if (typeof wight !== "number")
        return H.iae(wight);
      imageResized = height < wight ? K.copyResize(imageOriginal, 100, null) : K.copyResize(imageOriginal, null, 100);
      P.print(J.toString$0$(imageResized.height) + " " + J.toString$0$(imageResized.width));
      t1 = new Uint8Array(64);
      t2 = new Uint8Array(64);
      t3 = new Float32Array(64);
      t4 = new Float32Array(64);
      t5 = new Array(65535);
      t5.fixed$length = Array;
      t5 = H.setRuntimeTypeInfo(t5, type$.JSArray_legacy_List_legacy_int);
      t6 = new Array(65535);
      t6.fixed$length = Array;
      t7 = type$.JSArray_legacy_int;
      t6 = H.setRuntimeTypeInfo(t6, t7);
      t8 = new Array(64);
      t8.fixed$length = Array;
      t8 = H.setRuntimeTypeInfo(t8, t7);
      t9 = new Array(64);
      t9.fixed$length = Array;
      t7 = H.setRuntimeTypeInfo(t9, t7);
      t9 = new Float32Array(64);
      t10 = new Float32Array(64);
      t11 = new Float32Array(64);
      t1 = new Z.JpegEncoder(t1, t2, t3, t4, t5, t6, t8, t7, t9, t10, t11, new Int32Array(2048));
      t1.set$YDC_HT(t1._computeHuffmanTbl$2(C.List_F1L, C.List_UiL));
      t1.set$UVDC_HT(t1._computeHuffmanTbl$2(C.List_F1L0, C.List_UiL));
      t1.set$YAC_HT(t1._computeHuffmanTbl$2(C.List_F1L1, C.List_G61));
      t1.set$UVAC_HT(t1._computeHuffmanTbl$2(C.List_F1L2, C.List_AKW));
      t1._initCategoryNumber$0();
      t1._initRGBYUVTable$0();
      t1.setQuality$1(100);
      resizedBytes = t1.encodeImage$1(imageResized);
      J.postMessage$2$x(self.self, resizedBytes, null);
    },
    $signature: 27
  };
  (function aliases() {
    var _ = J.JavaScriptObject.prototype;
    _.super$JavaScriptObject$toString = _.toString$0;
    _ = P.ListMixin.prototype;
    _.super$ListMixin$setRange = _.setRange$4;
  })();
  (function installTearOffs() {
    var _static_1 = hunkHelpers._static_1,
      _static_0 = hunkHelpers._static_0,
      _instance_2_u = hunkHelpers._instance_2u,
      _instance_1_u = hunkHelpers._instance_1u,
      _static = hunkHelpers.installStaticTearOff;
    _static_1(P, "async__AsyncRun__scheduleImmediateJsOverride$closure", "_AsyncRun__scheduleImmediateJsOverride", 8);
    _static_1(P, "async__AsyncRun__scheduleImmediateWithSetImmediate$closure", "_AsyncRun__scheduleImmediateWithSetImmediate", 8);
    _static_1(P, "async__AsyncRun__scheduleImmediateWithTimer$closure", "_AsyncRun__scheduleImmediateWithTimer", 8);
    _static_0(P, "async___startMicrotaskLoop$closure", "_startMicrotaskLoop", 3);
    _static_1(P, "convert___defaultToEncodable$closure", "_defaultToEncodable", 10);
    var _;
    _instance_2_u(_ = R.JpegScan.prototype, "get$_decodeBaseline", "_decodeBaseline$2", 4);
    _instance_2_u(_, "get$_decodeDCFirst", "_decodeDCFirst$2", 4);
    _instance_2_u(_, "get$_decodeDCSuccessive", "_decodeDCSuccessive$2", 4);
    _instance_2_u(_, "get$_decodeACFirst", "_decodeACFirst$2", 4);
    _instance_2_u(_, "get$_decodeACSuccessive", "_decodeACSuccessive$2", 23);
    _static_1(V, "vp8_filter_VP8Filter_VE4$closure", "VP8Filter_VE4", 0);
    _static_1(V, "vp8_filter_VP8Filter_HE4$closure", "VP8Filter_HE4", 0);
    _static_1(V, "vp8_filter_VP8Filter_DC4$closure", "VP8Filter_DC4", 0);
    _static_1(V, "vp8_filter_VP8Filter_TM4$closure", "VP8Filter_TM4", 0);
    _static_1(V, "vp8_filter_VP8Filter_TM8uv$closure", "VP8Filter_TM8uv", 0);
    _static_1(V, "vp8_filter_VP8Filter_TM16$closure", "VP8Filter_TM16", 0);
    _static_1(V, "vp8_filter_VP8Filter_RD4$closure", "VP8Filter_RD4", 0);
    _static_1(V, "vp8_filter_VP8Filter_LD4$closure", "VP8Filter_LD4", 0);
    _static_1(V, "vp8_filter_VP8Filter_VR4$closure", "VP8Filter_VR4", 0);
    _static_1(V, "vp8_filter_VP8Filter_VL4$closure", "VP8Filter_VL4", 0);
    _static_1(V, "vp8_filter_VP8Filter_HU4$closure", "VP8Filter_HU4", 0);
    _static_1(V, "vp8_filter_VP8Filter_HD4$closure", "VP8Filter_HD4", 0);
    _static_1(V, "vp8_filter_VP8Filter_VE16$closure", "VP8Filter_VE16", 0);
    _static_1(V, "vp8_filter_VP8Filter_HE16$closure", "VP8Filter_HE16", 0);
    _static_1(V, "vp8_filter_VP8Filter_DC16$closure", "VP8Filter_DC16", 0);
    _static_1(V, "vp8_filter_VP8Filter_DC16NoTop$closure", "VP8Filter_DC16NoTop", 0);
    _static_1(V, "vp8_filter_VP8Filter_DC16NoLeft$closure", "VP8Filter_DC16NoLeft", 0);
    _static_1(V, "vp8_filter_VP8Filter_DC16NoTopLeft$closure", "VP8Filter_DC16NoTopLeft", 0);
    _static_1(V, "vp8_filter_VP8Filter_VE8uv$closure", "VP8Filter_VE8uv", 0);
    _static_1(V, "vp8_filter_VP8Filter_HE8uv$closure", "VP8Filter_HE8uv", 0);
    _static_1(V, "vp8_filter_VP8Filter_DC8uv$closure", "VP8Filter_DC8uv", 0);
    _static_1(V, "vp8_filter_VP8Filter_DC8uvNoLeft$closure", "VP8Filter_DC8uvNoLeft", 0);
    _static_1(V, "vp8_filter_VP8Filter_DC8uvNoTop$closure", "VP8Filter_DC8uvNoTop", 0);
    _static_1(V, "vp8_filter_VP8Filter_DC8uvNoTopLeft$closure", "VP8Filter_DC8uvNoTopLeft", 0);
    _instance_1_u(S.VP8L.prototype, "get$_processRows", "_processRows$1", 7);
    _instance_1_u(S.InternalVP8L.prototype, "get$extractAlphaRows", "extractAlphaRows$1", 7);
    _static(R, "vp8l_transform_VP8LTransform__predictor0$closure", 3, null, ["call$3"], ["VP8LTransform__predictor0"], 1, 0);
    _static(R, "vp8l_transform_VP8LTransform__predictor1$closure", 3, null, ["call$3"], ["VP8LTransform__predictor1"], 1, 0);
    _static(R, "vp8l_transform_VP8LTransform__predictor2$closure", 3, null, ["call$3"], ["VP8LTransform__predictor2"], 1, 0);
    _static(R, "vp8l_transform_VP8LTransform__predictor3$closure", 3, null, ["call$3"], ["VP8LTransform__predictor3"], 1, 0);
    _static(R, "vp8l_transform_VP8LTransform__predictor4$closure", 3, null, ["call$3"], ["VP8LTransform__predictor4"], 1, 0);
    _static(R, "vp8l_transform_VP8LTransform__predictor5$closure", 3, null, ["call$3"], ["VP8LTransform__predictor5"], 1, 0);
    _static(R, "vp8l_transform_VP8LTransform__predictor6$closure", 3, null, ["call$3"], ["VP8LTransform__predictor6"], 1, 0);
    _static(R, "vp8l_transform_VP8LTransform__predictor7$closure", 3, null, ["call$3"], ["VP8LTransform__predictor7"], 1, 0);
    _static(R, "vp8l_transform_VP8LTransform__predictor8$closure", 3, null, ["call$3"], ["VP8LTransform__predictor8"], 1, 0);
    _static(R, "vp8l_transform_VP8LTransform__predictor9$closure", 3, null, ["call$3"], ["VP8LTransform__predictor9"], 1, 0);
    _static(R, "vp8l_transform_VP8LTransform__predictor10$closure", 3, null, ["call$3"], ["VP8LTransform__predictor10"], 1, 0);
    _static(R, "vp8l_transform_VP8LTransform__predictor11$closure", 3, null, ["call$3"], ["VP8LTransform__predictor11"], 1, 0);
    _static(R, "vp8l_transform_VP8LTransform__predictor12$closure", 3, null, ["call$3"], ["VP8LTransform__predictor12"], 1, 0);
    _static(R, "vp8l_transform_VP8LTransform__predictor13$closure", 3, null, ["call$3"], ["VP8LTransform__predictor13"], 1, 0);
    _static(N, "webp_filters_WebPFilters_horizontalUnfilter$closure", 6, null, ["call$6"], ["WebPFilters_horizontalUnfilter"], 9, 0);
    _static(N, "webp_filters_WebPFilters_verticalUnfilter$closure", 6, null, ["call$6"], ["WebPFilters_verticalUnfilter"], 9, 0);
    _static(N, "webp_filters_WebPFilters_gradientUnfilter$closure", 6, null, ["call$6"], ["WebPFilters_gradientUnfilter"], 9, 0);
  })();
  (function inheritance() {
    var _mixin = hunkHelpers.mixin,
      _inherit = hunkHelpers.inherit,
      _inheritMany = hunkHelpers.inheritMany;
    _inherit(P.Object, null);
    _inheritMany(P.Object, [H.JS_CONST, J.Interceptor, J.ArrayIterator, P.Error, P._ListBase_Object_ListMixin, P.Iterable, H.ListIterator, P.Iterator, H.EmptyIterator, H.FixedLengthListMixin, H.UnmodifiableListMixin, H.ConstantMap, H.TypeErrorDecoder, H.NullThrownFromJavaScriptException, H._StackTrace, H.Closure, P.MapMixin, H.LinkedHashMapCell, H.LinkedHashMapKeyIterator, H.Rti, H._FunctionParameters, P._TimerImpl, P._Completer, P._FutureListener, P._Future, P._AsyncCallbackEntry, P.Stream, P.StreamSubscription, P.AsyncError, P._Zone, P.ListMixin, P._JsonStringifier, P._JsonPrettyPrintMixin, P.DateTime, P.OutOfMemoryError, P.StackOverflowError, P._Exception, P.FormatException, P.Null, P._StringStackTrace, P.StringBuffer, W.EventStreamProvider, P._StructuredClone, P._AcceptStructuredClone, T.InputStreamBase, Q.OutputStreamBase, Z.ZLibDecoderBase, Y.HuffmanTable, S.Inflate, Z.ZLibDecoder, G.ExifData, L.BitmapCompression, L.BitmapFileHeader, A.DecodeInfo, B.Decoder, E.Encoder, U.ExrAttribute, B.ExrCompressor, D.ExrChannel, Y.ExrHufDec, S.ExrPart, G._PizChannelData, M.GifColorMap, A.GifImageDesc, X.IcoInfoImage, U.ComponentData, D.JpegAdobe, R.JpegComponent, Y.JpegData, Y._JpegHuffman, L.JpegFrame, S.JpegJfif, R.JpegScan, D.PngFrame, V.PsdEffect, Q.PsdLayerData, O.PsdBlendingRanges, N.PsdChannel, S.PsdImageResource, S.PsdLayer, A.TiffBitReader, G.TiffEntry, A.TiffFaxDecoder, U.TiffImage, G.LzwDecoder, A.VP8, B.VP8BitReader, V.VP8Filter, L.VP8FrameHeader, L.VP8PictureHeader, L.VP8SegmentHeader, L.VP8BandProbas, L.VP8Proba, L.VP8FilterHeader, L.VP8FInfo, L.VP8MB, L.VP8QuantMatrix, L.VP8MBData, L.VP8TopSamples, S.VP8L, A.VP8LBitReader, Y.VP8LColorCache, R.VP8LTransform, S.WebPAlpha, X.WebPFrame, B.HuffmanTree, B.HTreeGroup, F.HdrImage, K.HdrSlice, D.ICCProfileData, U.Format, U.Channels, U.BlendMode, U.DisposeMode, U.Image, K.ImageException, N.Flip, Z.InputBuffer, X.Interpolation, G.OutputBuffer]);
    _inheritMany(J.Interceptor, [J.JSBool, J.JSNull, J.JavaScriptObject, J.JSArray, J.JSNumber, J.JSString, H.NativeByteBuffer, H.NativeTypedData, W.Blob, W.EventTarget, W.DomException, W.Event]);
    _inheritMany(J.JavaScriptObject, [J.PlainJavaScriptObject, J.UnknownJavaScriptObject, J.JavaScriptFunction]);
    _inherit(J.JSUnmodifiableArray, J.JSArray);
    _inheritMany(J.JSNumber, [J.JSInt, J.JSDouble]);
    _inheritMany(P.Error, [H.LateInitializationErrorImpl, P.TypeError, H.JsNoSuchMethodError, H.UnknownJsTypeError, H.RuntimeError, P.AssertionError, H._Error, P.JsonUnsupportedObjectError, P.NullThrownError, P.ArgumentError, P.UnsupportedError, P.UnimplementedError, P.StateError, P.ConcurrentModificationError, P.CyclicInitializationError]);
    _inherit(P.ListBase, P._ListBase_Object_ListMixin);
    _inherit(H.UnmodifiableListBase, P.ListBase);
    _inherit(H.CodeUnits, H.UnmodifiableListBase);
    _inheritMany(P.Iterable, [H.EfficientLengthIterable, H.MappedIterable, H.SkipIterable]);
    _inheritMany(H.EfficientLengthIterable, [H.ListIterable, H.EmptyIterable, H.LinkedHashMapKeyIterable]);
    _inheritMany(H.ListIterable, [H.SubListIterable, P._GeneratorIterable]);
    _inherit(H.EfficientLengthMappedIterable, H.MappedIterable);
    _inheritMany(P.Iterator, [H.MappedIterator, H.SkipIterator]);
    _inherit(H.EfficientLengthSkipIterable, H.SkipIterable);
    _inherit(H.GeneralConstantMap, H.ConstantMap);
    _inherit(H.NullError, P.TypeError);
    _inheritMany(H.Closure, [H.TearOffClosure, H.JsLinkedHashMap_values_closure, H.initHooks_closure, H.initHooks_closure0, H.initHooks_closure1, P._AsyncRun__initializeScheduleImmediate_internalCallback, P._AsyncRun__initializeScheduleImmediate_closure, P._AsyncRun__scheduleImmediateJsOverride_internalCallback, P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback, P._TimerImpl_internalCallback, P._Future__addListener_closure, P._Future__prependListeners_closure, P._Future__chainForeignFuture_closure, P._Future__chainForeignFuture_closure0, P._Future__chainForeignFuture_closure1, P._Future__asyncCompleteWithValue_closure, P._Future__chainFuture_closure, P._Future__asyncCompleteError_closure, P._Future__propagateToListeners_handleWhenCompleteCallback, P._Future__propagateToListeners_handleWhenCompleteCallback_closure, P._Future__propagateToListeners_handleValueCallback, P._Future__propagateToListeners_handleError, P.Stream_length_closure, P.Stream_length_closure0, P._rootHandleUncaughtError_closure, P._RootZone_bindCallback_closure, P._RootZone_bindCallbackGuarded_closure, P._RootZone_bindUnaryCallbackGuarded_closure, P.LinkedHashMap_LinkedHashMap$from_closure, P.MapBase_mapToString_closure, P._JsonStringifier_writeMap_closure, P._JsonPrettyPrintMixin_writeMap_closure, W._EventStreamSubscription_closure, P._StructuredClone_walk_closure, P._StructuredClone_walk_closure0, P._AcceptStructuredClone_walk_closure, P.promiseToFuture_closure, P.promiseToFuture_closure0, L.BmpInfo_readPalette_closure, E.BmpDecoder_decodeFrame_closure, X.IcoInfo__read_closure, A.VP8__upsample_LOAD_UV, A.hdrToImage__knee, A.hdrToImage__gamma, U.Image_getPixelLinear__linear, U.Image_getPixelCubic__cubic, B.main_closure]);
    _inheritMany(H.TearOffClosure, [H.StaticClosure, H.BoundClosure]);
    _inherit(H._AssertionError, P.AssertionError);
    _inherit(P.MapBase, P.MapMixin);
    _inherit(H.JsLinkedHashMap, P.MapBase);
    _inherit(H.NativeTypedArray, H.NativeTypedData);
    _inheritMany(H.NativeTypedArray, [H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin]);
    _inherit(H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin);
    _inherit(H.NativeTypedArrayOfDouble, H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inherit(H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin);
    _inherit(H.NativeTypedArrayOfInt, H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inheritMany(H.NativeTypedArrayOfDouble, [H.NativeFloat32List, H.NativeFloat64List]);
    _inheritMany(H.NativeTypedArrayOfInt, [H.NativeInt16List, H.NativeInt32List, H.NativeInt8List, H.NativeUint16List, H.NativeUint32List, H.NativeUint8ClampedList, H.NativeUint8List]);
    _inherit(H._TypeError, H._Error);
    _inherit(P._AsyncCompleter, P._Completer);
    _inherit(P._RootZone, P._Zone);
    _inherit(P.JsonCyclicError, P.JsonUnsupportedObjectError);
    _inherit(P._JsonStringStringifier, P._JsonStringifier);
    _inherit(P.__JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin, P._JsonStringStringifier);
    _inherit(P._JsonStringStringifierPretty, P.__JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin);
    _inheritMany(P.ArgumentError, [P.RangeError, P.IndexError]);
    _inheritMany(W.EventTarget, [W.WorkerGlobalScope, W.MessagePort]);
    _inherit(W.DedicatedWorkerGlobalScope, W.WorkerGlobalScope);
    _inherit(W.File, W.Blob);
    _inherit(W.MessageEvent, W.Event);
    _inherit(W._EventStream, P.Stream);
    _inherit(W._EventStreamSubscription, P.StreamSubscription);
    _inherit(P._StructuredCloneDart2Js, P._StructuredClone);
    _inherit(P._AcceptStructuredCloneDart2Js, P._AcceptStructuredClone);
    _inherit(R.ArchiveException, P.FormatException);
    _inherit(T.InputStream, T.InputStreamBase);
    _inherit(Q.OutputStream, Q.OutputStreamBase);
    _inherit(G._ZLibDecoder, Z.ZLibDecoderBase);
    _inheritMany(A.DecodeInfo, [L.BmpInfo, Y.ExrImage, K.GifInfo, X.IcoInfo, Q.PngInfo, L.PsdImage, R.TgaInfo, A.TiffInfo, D.WebPInfo]);
    _inheritMany(B.Decoder, [E.BmpDecoder, U.ExrDecoder, F.GifDecoder, X.IcoDecoder, Z.JpegDecoder, G.PngDecoder, V.PsdDecoder, B.TgaDecoder, N.TiffDecoder, E.WebPDecoder]);
    _inherit(E.DibDecoder, E.BmpDecoder);
    _inherit(B.InternalExrCompressor, B.ExrCompressor);
    _inheritMany(B.InternalExrCompressor, [D.InternalExrB44Compressor, G.InternalExrPizCompressor, O.InternalExrPxr24Compressor, Y.InternalExrRleCompressor, R.InternalExrZipCompressor]);
    _inherit(S.InternalExrPart, S.ExrPart);
    _inherit(A.InternalGifImageDesc, A.GifImageDesc);
    _inherit(X.IcoBmpInfo, L.BmpInfo);
    _inherit(Z.JpegEncoder, E.Encoder);
    _inherit(D.InternalPngFrame, D.PngFrame);
    _inherit(Q.InternalPngInfo, Q.PngInfo);
    _inheritMany(V.PsdEffect, [U.PsdBevelEffect, M.PsdDropShadowEffect, D.PsdInnerGlowEffect, L.PsdInnerShadowEffect, N.PsdOuterGlowEffect, F.PsdSolidFillEffect]);
    _inheritMany(Q.PsdLayerData, [K.PsdLayerAdditionalData, Y.PsdLayerSectionDivider]);
    _inherit(S.InternalVP8L, S.VP8L);
    _inherit(X.InternalWebPFrame, X.WebPFrame);
    _inherit(D.InternalWebPInfo, D.WebPInfo);
    _mixin(H.UnmodifiableListBase, H.UnmodifiableListMixin);
    _mixin(H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, P.ListMixin);
    _mixin(H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, H.FixedLengthListMixin);
    _mixin(H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin, P.ListMixin);
    _mixin(H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, H.FixedLengthListMixin);
    _mixin(P._ListBase_Object_ListMixin, P.ListMixin);
    _mixin(P.__JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin, P._JsonPrettyPrintMixin);
  })();
  var init = {
    typeUniverse: {eC: new Map(), tR: {}, eT: {}, tPV: {}, sEA: []},
    mangledGlobalNames: {int: "int", double: "double", num: "num", String: "String", bool: "bool", Null: "Null", List: "List"},
    mangledNames: {},
    getTypeFromName: getGlobalFromName,
    metadata: [],
    types: ["~(InputBuffer*)", "int*(Uint32List*,int*,int*)", "Null()", "~()", "~(JpegComponent*,List<@>*)", "Null(@,@)", "Null(Object?,Object?)", "~(int*)", "~(~())", "~(int*,int*,int*,int*,int*,Uint8List*)", "@(@)", "Null(@)", "~(@)", "num*(num*,num*)", "@(@,String)", "@(String)", "Null(~())", "Null(Object,StackTrace)", "_Future<@>(@)", "@(Event)", "@(@,@)", "int*(int*)", "IcoInfoImage*(int*)", "~(JpegComponent*,@)", "int*(int*,int*)", "int*(int*,int*,int*,int*)", "num*(num*,num*,num*,num*,num*)", "Null(MessageEvent*)"],
    interceptorsByTag: null,
    leafTags: null,
    arrayRti: typeof Symbol == "function" && typeof Symbol() == "symbol" ? Symbol("$ti") : "$ti"
  };
  H._Universe_addRules(init.typeUniverse, JSON.parse('{"JavaScriptFunction":"JavaScriptObject","PlainJavaScriptObject":"JavaScriptObject","UnknownJavaScriptObject":"JavaScriptObject","AbortPaymentEvent":"Event","ExtendableEvent":"Event","NativeByteData":"NativeTypedData","JSBool":{"bool":[]},"JSNull":{"Null":[]},"JavaScriptObject":{"JSObject":[],"Function":[]},"JSArray":{"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"JSIndexable":["1"]},"JSUnmodifiableArray":{"JSArray":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"JSIndexable":["1"]},"ArrayIterator":{"Iterator":["1"]},"JSNumber":{"double":[],"num":[]},"JSInt":{"double":[],"int":[],"num":[]},"JSDouble":{"double":[],"num":[]},"JSString":{"String":[],"JSIndexable":["@"]},"LateInitializationErrorImpl":{"Error":[]},"CodeUnits":{"ListMixin":["int"],"UnmodifiableListMixin":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"ListMixin.E":"int","UnmodifiableListMixin.E":"int"},"EfficientLengthIterable":{"Iterable":["1"]},"ListIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"]},"SubListIterable":{"ListIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"ListIterator":{"Iterator":["1"]},"MappedIterable":{"Iterable":["2"],"Iterable.E":"2"},"EfficientLengthMappedIterable":{"MappedIterable":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2"},"MappedIterator":{"Iterator":["2"]},"SkipIterable":{"Iterable":["1"],"Iterable.E":"1"},"EfficientLengthSkipIterable":{"SkipIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"SkipIterator":{"Iterator":["1"]},"EmptyIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"EmptyIterator":{"Iterator":["1"]},"UnmodifiableListBase":{"ListMixin":["1"],"UnmodifiableListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"ConstantMap":{"Map":["1","2"]},"GeneralConstantMap":{"ConstantMap":["1","2"],"Map":["1","2"]},"NullError":{"Error":[]},"JsNoSuchMethodError":{"Error":[]},"UnknownJsTypeError":{"Error":[]},"_StackTrace":{"StackTrace":[]},"Closure":{"Function":[]},"TearOffClosure":{"Function":[]},"StaticClosure":{"Function":[]},"BoundClosure":{"Function":[]},"RuntimeError":{"Error":[]},"_AssertionError":{"Error":[]},"JsLinkedHashMap":{"MapMixin":["1","2"],"LinkedHashMap":["1","2"],"Map":["1","2"]},"LinkedHashMapKeyIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"LinkedHashMapKeyIterator":{"Iterator":["1"]},"NativeTypedData":{"TypedData":[]},"NativeTypedArray":{"JavaScriptIndexingBehavior":["1"],"NativeTypedData":[],"TypedData":[],"JSIndexable":["1"]},"NativeTypedArrayOfDouble":{"NativeTypedArray":["double"],"ListMixin":["double"],"JavaScriptIndexingBehavior":["double"],"List":["double"],"NativeTypedData":[],"EfficientLengthIterable":["double"],"TypedData":[],"JSIndexable":["double"],"Iterable":["double"],"FixedLengthListMixin":["double"]},"NativeTypedArrayOfInt":{"NativeTypedArray":["int"],"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"NativeTypedData":[],"EfficientLengthIterable":["int"],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"]},"NativeFloat32List":{"NativeTypedArrayOfDouble":[],"NativeTypedArray":["double"],"ListMixin":["double"],"Float32List":[],"JavaScriptIndexingBehavior":["double"],"List":["double"],"NativeTypedData":[],"EfficientLengthIterable":["double"],"TypedData":[],"JSIndexable":["double"],"Iterable":["double"],"FixedLengthListMixin":["double"],"ListMixin.E":"double"},"NativeFloat64List":{"NativeTypedArrayOfDouble":[],"NativeTypedArray":["double"],"ListMixin":["double"],"JavaScriptIndexingBehavior":["double"],"List":["double"],"NativeTypedData":[],"EfficientLengthIterable":["double"],"TypedData":[],"JSIndexable":["double"],"Iterable":["double"],"FixedLengthListMixin":["double"],"ListMixin.E":"double"},"NativeInt16List":{"NativeTypedArrayOfInt":[],"NativeTypedArray":["int"],"ListMixin":["int"],"Int16List":[],"JavaScriptIndexingBehavior":["int"],"List":["int"],"NativeTypedData":[],"EfficientLengthIterable":["int"],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int"},"NativeInt32List":{"NativeTypedArrayOfInt":[],"NativeTypedArray":["int"],"ListMixin":["int"],"Int32List":[],"JavaScriptIndexingBehavior":["int"],"List":["int"],"NativeTypedData":[],"EfficientLengthIterable":["int"],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int"},"NativeInt8List":{"NativeTypedArrayOfInt":[],"NativeTypedArray":["int"],"ListMixin":["int"],"Int8List":[],"JavaScriptIndexingBehavior":["int"],"List":["int"],"NativeTypedData":[],"EfficientLengthIterable":["int"],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int"},"NativeUint16List":{"NativeTypedArrayOfInt":[],"NativeTypedArray":["int"],"ListMixin":["int"],"Uint16List":[],"JavaScriptIndexingBehavior":["int"],"List":["int"],"NativeTypedData":[],"EfficientLengthIterable":["int"],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int"},"NativeUint32List":{"NativeTypedArrayOfInt":[],"NativeTypedArray":["int"],"ListMixin":["int"],"Uint32List":[],"JavaScriptIndexingBehavior":["int"],"List":["int"],"NativeTypedData":[],"EfficientLengthIterable":["int"],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int"},"NativeUint8ClampedList":{"NativeTypedArrayOfInt":[],"NativeTypedArray":["int"],"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"NativeTypedData":[],"EfficientLengthIterable":["int"],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int"},"NativeUint8List":{"NativeTypedArrayOfInt":[],"NativeTypedArray":["int"],"ListMixin":["int"],"Uint8List":[],"JavaScriptIndexingBehavior":["int"],"List":["int"],"NativeTypedData":[],"EfficientLengthIterable":["int"],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int"},"_Error":{"Error":[]},"_TypeError":{"Error":[]},"_AsyncCompleter":{"_Completer":["1"]},"_Future":{"Future":["1"]},"AsyncError":{"Error":[]},"_Zone":{"Zone":[]},"_RootZone":{"_Zone":[],"Zone":[]},"ListBase":{"ListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"MapBase":{"MapMixin":["1","2"],"Map":["1","2"]},"MapMixin":{"Map":["1","2"]},"JsonUnsupportedObjectError":{"Error":[]},"JsonCyclicError":{"Error":[]},"double":{"num":[]},"int":{"num":[]},"List":{"EfficientLengthIterable":["1"],"Iterable":["1"]},"AssertionError":{"Error":[]},"TypeError":{"Error":[]},"NullThrownError":{"Error":[]},"ArgumentError":{"Error":[]},"RangeError":{"Error":[]},"IndexError":{"Error":[]},"UnsupportedError":{"Error":[]},"UnimplementedError":{"Error":[]},"StateError":{"Error":[]},"ConcurrentModificationError":{"Error":[]},"OutOfMemoryError":{"Error":[]},"StackOverflowError":{"Error":[]},"CyclicInitializationError":{"Error":[]},"_GeneratorIterable":{"ListIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"_StringStackTrace":{"StackTrace":[]},"StringBuffer":{"StringSink":[]},"DedicatedWorkerGlobalScope":{"EventTarget":[]},"File":{"Blob":[]},"MessageEvent":{"Event":[]},"MessagePort":{"EventTarget":[]},"WorkerGlobalScope":{"EventTarget":[]},"_EventStream":{"Stream":["1"]},"_EventStreamSubscription":{"StreamSubscription":["1"]},"InputStream":{"InputStreamBase":[]},"InternalExrB44Compressor":{"ExrCompressor":[]},"InternalExrCompressor":{"ExrCompressor":[]},"InternalExrPart":{"ExrPart":[]},"InternalExrPizCompressor":{"ExrCompressor":[]},"InternalExrPxr24Compressor":{"ExrCompressor":[]},"InternalExrRleCompressor":{"ExrCompressor":[]},"InternalExrZipCompressor":{"ExrCompressor":[]},"InternalGifImageDesc":{"GifImageDesc":[]},"IcoBmpInfo":{"BmpInfo":[]},"InternalPngFrame":{"PngFrame":[]},"PsdBevelEffect":{"PsdEffect":[]},"PsdDropShadowEffect":{"PsdEffect":[]},"PsdInnerGlowEffect":{"PsdEffect":[]},"PsdInnerShadowEffect":{"PsdEffect":[]},"PsdOuterGlowEffect":{"PsdEffect":[]},"PsdSolidFillEffect":{"PsdEffect":[]},"PsdLayerAdditionalData":{"PsdLayerData":[]},"PsdLayerSectionDivider":{"PsdLayerData":[]},"InternalWebPFrame":{"WebPFrame":[]},"InternalWebPInfo":{"WebPInfo":[]},"Uint8List":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"TypedData":[]},"Int16List":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"TypedData":[]},"Uint32List":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"TypedData":[]}}'));
  H._Universe_addErasedTypes(init.typeUniverse, JSON.parse('{"EfficientLengthIterable":1,"UnmodifiableListBase":1,"NativeTypedArray":1,"ListBase":1,"MapBase":2,"_ListBase_Object_ListMixin":1}'));
  0;
  var type$ = (function rtii() {
    var findType = H.findType;
    return {
      AsyncError: findType("AsyncError"),
      Blob: findType("Blob"),
      EfficientLengthIterable_dynamic: findType("EfficientLengthIterable<@>"),
      Error: findType("Error"),
      Event: findType("Event"),
      File: findType("File"),
      Function: findType("Function"),
      Future_dynamic: findType("Future<@>"),
      Iterable_double: findType("Iterable<double>"),
      Iterable_dynamic: findType("Iterable<@>"),
      Iterable_int: findType("Iterable<int>"),
      JSArray_String: findType("JSArray<String>"),
      JSArray_dynamic: findType("JSArray<@>"),
      JSArray_int: findType("JSArray<int>"),
      JSArray_legacy_ComponentData: findType("JSArray<ComponentData*>"),
      JSArray_legacy_ExrChannel: findType("JSArray<ExrChannel*>"),
      JSArray_legacy_ExrHufDec: findType("JSArray<ExrHufDec*>"),
      JSArray_legacy_GifImageDesc: findType("JSArray<GifImageDesc*>"),
      JSArray_legacy_HTreeGroup: findType("JSArray<HTreeGroup*>"),
      JSArray_legacy_HuffmanTree: findType("JSArray<HuffmanTree*>"),
      JSArray_legacy_Int16List: findType("JSArray<Int16List*>"),
      JSArray_legacy_InternalExrPart: findType("JSArray<InternalExrPart*>"),
      JSArray_legacy_JpegFrame: findType("JSArray<JpegFrame*>"),
      JSArray_legacy_List_legacy_List_legacy_List_legacy_int: findType("JSArray<List<List<List<int*>*>*>*>"),
      JSArray_legacy_List_legacy_List_legacy_int: findType("JSArray<List<List<int*>*>*>"),
      JSArray_legacy_List_legacy_VP8BandProbas: findType("JSArray<List<VP8BandProbas*>*>"),
      JSArray_legacy_List_legacy_VP8FInfo: findType("JSArray<List<VP8FInfo*>*>"),
      JSArray_legacy_List_legacy_int: findType("JSArray<List<int*>*>"),
      JSArray_legacy_PngFrame: findType("JSArray<PngFrame*>"),
      JSArray_legacy_PsdChannel: findType("JSArray<PsdChannel*>"),
      JSArray_legacy_PsdEffect: findType("JSArray<PsdEffect*>"),
      JSArray_legacy_PsdLayer: findType("JSArray<PsdLayer*>"),
      JSArray_legacy_TiffImage: findType("JSArray<TiffImage*>"),
      JSArray_legacy_Uint32List: findType("JSArray<Uint32List*>"),
      JSArray_legacy_Uint8List: findType("JSArray<Uint8List*>"),
      JSArray_legacy_VP8BandProbas: findType("JSArray<VP8BandProbas*>"),
      JSArray_legacy_VP8BitReader: findType("JSArray<VP8BitReader*>"),
      JSArray_legacy_VP8FInfo: findType("JSArray<VP8FInfo*>"),
      JSArray_legacy_VP8LTransform: findType("JSArray<VP8LTransform*>"),
      JSArray_legacy_VP8MB: findType("JSArray<VP8MB*>"),
      JSArray_legacy_VP8MBData: findType("JSArray<VP8MBData*>"),
      JSArray_legacy_VP8QuantMatrix: findType("JSArray<VP8QuantMatrix*>"),
      JSArray_legacy_VP8TopSamples: findType("JSArray<VP8TopSamples*>"),
      JSArray_legacy_WebPFrame: findType("JSArray<WebPFrame*>"),
      JSArray_legacy__PizChannelData: findType("JSArray<_PizChannelData*>"),
      JSArray_legacy_int: findType("JSArray<int*>"),
      JSArray_of_legacy_void_Function_legacy_InputBuffer: findType("JSArray<~(InputBuffer*)*>"),
      JSIndexable_dynamic: findType("JSIndexable<@>"),
      JSNull: findType("JSNull"),
      JSObject: findType("JSObject"),
      JavaScriptFunction: findType("JavaScriptFunction"),
      JavaScriptIndexingBehavior_dynamic: findType("JavaScriptIndexingBehavior<@>"),
      List_dynamic: findType("List<@>"),
      Map_dynamic_dynamic: findType("Map<@,@>"),
      MessagePort: findType("MessagePort"),
      NativeByteBuffer: findType("NativeByteBuffer"),
      NativeTypedArrayOfDouble: findType("NativeTypedArrayOfDouble"),
      NativeTypedArrayOfInt: findType("NativeTypedArrayOfInt"),
      NativeTypedData: findType("NativeTypedData"),
      NativeUint8List: findType("NativeUint8List"),
      Null: findType("Null"),
      Object: findType("Object"),
      StackTrace: findType("StackTrace"),
      String: findType("String"),
      UnknownJavaScriptObject: findType("UnknownJavaScriptObject"),
      _Future_dynamic: findType("_Future<@>"),
      _Future_int: findType("_Future<int>"),
      bool: findType("bool"),
      bool_Function_Object: findType("bool(Object)"),
      double: findType("double"),
      dynamic: findType("@"),
      dynamic_Function: findType("@()"),
      dynamic_Function_Object: findType("@(Object)"),
      dynamic_Function_Object_StackTrace: findType("@(Object,StackTrace)"),
      dynamic_Function_dynamic_dynamic: findType("@(@,@)"),
      int: findType("int"),
      legacy_BitmapCompression: findType("BitmapCompression*"),
      legacy_ExrAttribute: findType("ExrAttribute*"),
      legacy_HdrSlice: findType("HdrSlice*"),
      legacy_IcoInfoImage: findType("IcoInfoImage*"),
      legacy_Iterable_dynamic: findType("Iterable<@>*"),
      legacy_JpegComponent: findType("JpegComponent*"),
      legacy_List_legacy_HTreeGroup: findType("List<HTreeGroup*>*"),
      legacy_List_legacy_List_legacy_VP8FInfo: findType("List<List<VP8FInfo*>*>*"),
      legacy_List_legacy_List_legacy_int: findType("List<List<int*>*>*"),
      legacy_List_legacy_PsdChannel: findType("List<PsdChannel*>*"),
      legacy_List_legacy_PsdLayer: findType("List<PsdLayer*>*"),
      legacy_List_legacy_Uint32List: findType("List<Uint32List*>*"),
      legacy_List_legacy_Uint8List: findType("List<Uint8List*>*"),
      legacy_List_legacy_VP8BandProbas: findType("List<VP8BandProbas*>*"),
      legacy_List_legacy_VP8FInfo: findType("List<VP8FInfo*>*"),
      legacy_List_legacy_VP8MB: findType("List<VP8MB*>*"),
      legacy_List_legacy_VP8MBData: findType("List<VP8MBData*>*"),
      legacy_List_legacy_VP8TopSamples: findType("List<VP8TopSamples*>*"),
      legacy_List_legacy__PizChannelData: findType("List<_PizChannelData*>*"),
      legacy_List_legacy_double: findType("List<double*>*"),
      legacy_List_legacy_int: findType("List<int*>*"),
      legacy_MessageEvent: findType("MessageEvent*"),
      legacy_Never: findType("0&*"),
      legacy_Object: findType("Object*"),
      legacy_PsdChannel: findType("PsdChannel*"),
      legacy_PsdImageResource: findType("PsdImageResource*"),
      legacy_PsdLayerAdditionalData: findType("PsdLayerAdditionalData*"),
      legacy_PsdLayerData: findType("PsdLayerData*"),
      legacy_String: findType("String*"),
      legacy_TiffEntry: findType("TiffEntry*"),
      legacy_TypedData: findType("TypedData*"),
      legacy_Uint8List: findType("Uint8List*"),
      legacy_int: findType("int*"),
      legacy_void_Function_legacy_int: findType("~(int*)*"),
      nullable_EventTarget: findType("EventTarget?"),
      nullable_Future_Null: findType("Future<Null>?"),
      nullable_Object: findType("Object?"),
      nullable__FutureListener_dynamic_dynamic: findType("_FutureListener<@,@>?"),
      nullable_dynamic_Function_Event: findType("@(Event)?"),
      nullable_void_Function: findType("~()?"),
      nullable_void_Function_legacy_MessageEvent: findType("~(MessageEvent*)?"),
      num: findType("num"),
      void: findType("~"),
      void_Function: findType("~()")
    };
  })();
  (function constants() {
    var makeConstList = hunkHelpers.makeConstList;
    C.DedicatedWorkerGlobalScope_methods = W.DedicatedWorkerGlobalScope.prototype;
    C.Interceptor_methods = J.Interceptor.prototype;
    C.JSArray_methods = J.JSArray.prototype;
    C.JSDouble_methods = J.JSDouble.prototype;
    C.JSInt_methods = J.JSInt.prototype;
    C.JSNull_methods = J.JSNull.prototype;
    C.JSNumber_methods = J.JSNumber.prototype;
    C.JSString_methods = J.JSString.prototype;
    C.JavaScriptFunction_methods = J.JavaScriptFunction.prototype;
    C.NativeInt16List_methods = H.NativeInt16List.prototype;
    C.NativeUint16List_methods = H.NativeUint16List.prototype;
    C.NativeUint32List_methods = H.NativeUint32List.prototype;
    C.NativeUint8List_methods = H.NativeUint8List.prototype;
    C.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
    C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
    C.BitmapCompression_0 = new L.BitmapCompression("BitmapCompression.BI_BITFIELDS");
    C.BitmapCompression_1 = new L.BitmapCompression("BitmapCompression.NONE");
    C.BlendMode_1 = new U.BlendMode();
    C.C_EmptyIterator = new H.EmptyIterator(H.findType("EmptyIterator<Null>"));
    C.C_JS_CONST = function getTagFallback(o) {
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
    C.C_JS_CONST0 = function() {
  var toStringFunction = Object.prototype.toString;
  function getTag(o) {
    var s = toStringFunction.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = toStringFunction.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (self.HTMLElement && object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: getTag,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
    C.C_JS_CONST6 = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
    C.C_JS_CONST1 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
    C.C_JS_CONST2 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
    C.C_JS_CONST5 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
    C.C_JS_CONST4 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
    C.C_JS_CONST3 = function(hooks) { return hooks; }
;
    C.C_OutOfMemoryError = new P.OutOfMemoryError();
    C.C__RootZone = new P._RootZone();
    C.C__StringStackTrace = new P._StringStackTrace();
    C.Channels_0 = new U.Channels("Channels.rgb");
    C.Channels_1 = new U.Channels("Channels.rgba");
    C.DisposeMode_1 = new U.DisposeMode();
    C.Flip_0 = new N.Flip("Flip.horizontal");
    C.Flip_1 = new N.Flip("Flip.vertical");
    C.Flip_2 = new N.Flip("Flip.both");
    C.Format_0 = new U.Format("Format.argb");
    C.Format_1 = new U.Format("Format.abgr");
    C.Format_2 = new U.Format("Format.rgba");
    C.Format_3 = new U.Format("Format.bgra");
    C.Format_4 = new U.Format("Format.rgb");
    C.Format_5 = new U.Format("Format.bgr");
    C.Format_6 = new U.Format("Format.luminance");
    C.Interpolation_0 = new X.Interpolation("Interpolation.nearest");
    C.Interpolation_1 = new X.Interpolation("Interpolation.linear");
    C.Interpolation_2 = new X.Interpolation("Interpolation.cubic");
    C.List_0W6 = H.setRuntimeTypeInfo(makeConstList([V.vp8_filter_VP8Filter_DC8uv$closure(), V.vp8_filter_VP8Filter_TM8uv$closure(), V.vp8_filter_VP8Filter_VE8uv$closure(), V.vp8_filter_VP8Filter_HE8uv$closure(), V.vp8_filter_VP8Filter_DC8uvNoTop$closure(), V.vp8_filter_VP8Filter_DC8uvNoLeft$closure(), V.vp8_filter_VP8Filter_DC8uvNoTopLeft$closure()]), type$.JSArray_of_legacy_void_Function_legacy_InputBuffer);
    C.List_0_2_8 = H.setRuntimeTypeInfo(makeConstList([0, 2, 8]), type$.JSArray_legacy_int);
    C.List_0_4_2_1 = H.setRuntimeTypeInfo(makeConstList([0, 4, 2, 1]), type$.JSArray_legacy_int);
    C.List_292_260_226_226 = H.setRuntimeTypeInfo(makeConstList([292, 260, 226, 226]), type$.JSArray_legacy_int);
    C.List_2Bc = H.setRuntimeTypeInfo(makeConstList([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8]), type$.JSArray_legacy_int);
    C.List_2Vk = H.setRuntimeTypeInfo(makeConstList([137, 80, 78, 71, 13, 10, 26, 10]), type$.JSArray_legacy_int);
    C.List_2_3_7 = H.setRuntimeTypeInfo(makeConstList([2, 3, 7]), type$.JSArray_legacy_int);
    C.List_3_3_11 = H.setRuntimeTypeInfo(makeConstList([3, 3, 11]), type$.JSArray_legacy_int);
    C.List_511_1023_2047_4095 = H.setRuntimeTypeInfo(makeConstList([511, 1023, 2047, 4095]), type$.JSArray_legacy_int);
    C.List_U2p = H.setRuntimeTypeInfo(makeConstList([231, 120, 48, 89, 115, 113, 120, 152, 112]), type$.JSArray_legacy_int);
    C.List_yXZ = H.setRuntimeTypeInfo(makeConstList([152, 179, 64, 126, 170, 118, 46, 70, 95]), type$.JSArray_legacy_int);
    C.List_yXZ0 = H.setRuntimeTypeInfo(makeConstList([175, 69, 143, 80, 85, 82, 72, 155, 103]), type$.JSArray_legacy_int);
    C.List_yXZ1 = H.setRuntimeTypeInfo(makeConstList([56, 58, 10, 171, 218, 189, 17, 13, 152]), type$.JSArray_legacy_int);
    C.List_yXZ2 = H.setRuntimeTypeInfo(makeConstList([114, 26, 17, 163, 44, 195, 21, 10, 173]), type$.JSArray_legacy_int);
    C.List_yXZ3 = H.setRuntimeTypeInfo(makeConstList([121, 24, 80, 195, 26, 62, 44, 64, 85]), type$.JSArray_legacy_int);
    C.List_yXZ4 = H.setRuntimeTypeInfo(makeConstList([144, 71, 10, 38, 171, 213, 144, 34, 26]), type$.JSArray_legacy_int);
    C.List_yXZ5 = H.setRuntimeTypeInfo(makeConstList([170, 46, 55, 19, 136, 160, 33, 206, 71]), type$.JSArray_legacy_int);
    C.List_yXZ6 = H.setRuntimeTypeInfo(makeConstList([63, 20, 8, 114, 114, 208, 12, 9, 226]), type$.JSArray_legacy_int);
    C.List_yXZ7 = H.setRuntimeTypeInfo(makeConstList([81, 40, 11, 96, 182, 84, 29, 16, 36]), type$.JSArray_legacy_int);
    C.List_sty0 = H.setRuntimeTypeInfo(makeConstList([C.List_U2p, C.List_yXZ, C.List_yXZ0, C.List_yXZ1, C.List_yXZ2, C.List_yXZ3, C.List_yXZ4, C.List_yXZ5, C.List_yXZ6, C.List_yXZ7]), type$.JSArray_legacy_List_legacy_int);
    C.List_yXZ8 = H.setRuntimeTypeInfo(makeConstList([134, 183, 89, 137, 98, 101, 106, 165, 148]), type$.JSArray_legacy_int);
    C.List_yXZ9 = H.setRuntimeTypeInfo(makeConstList([72, 187, 100, 130, 157, 111, 32, 75, 80]), type$.JSArray_legacy_int);
    C.List_yXZ10 = H.setRuntimeTypeInfo(makeConstList([66, 102, 167, 99, 74, 62, 40, 234, 128]), type$.JSArray_legacy_int);
    C.List_kfn = H.setRuntimeTypeInfo(makeConstList([41, 53, 9, 178, 241, 141, 26, 8, 107]), type$.JSArray_legacy_int);
    C.List_yXZ11 = H.setRuntimeTypeInfo(makeConstList([74, 43, 26, 146, 73, 166, 49, 23, 157]), type$.JSArray_legacy_int);
    C.List_yXZ12 = H.setRuntimeTypeInfo(makeConstList([65, 38, 105, 160, 51, 52, 31, 115, 128]), type$.JSArray_legacy_int);
    C.List_eDA = H.setRuntimeTypeInfo(makeConstList([104, 79, 12, 27, 217, 255, 87, 17, 7]), type$.JSArray_legacy_int);
    C.List_yXZ13 = H.setRuntimeTypeInfo(makeConstList([87, 68, 71, 44, 114, 51, 15, 186, 23]), type$.JSArray_legacy_int);
    C.List_yXZ14 = H.setRuntimeTypeInfo(makeConstList([47, 41, 14, 110, 182, 183, 21, 17, 194]), type$.JSArray_legacy_int);
    C.List_yXZ15 = H.setRuntimeTypeInfo(makeConstList([66, 45, 25, 102, 197, 189, 23, 18, 22]), type$.JSArray_legacy_int);
    C.List_L3W = H.setRuntimeTypeInfo(makeConstList([C.List_yXZ8, C.List_yXZ9, C.List_yXZ10, C.List_kfn, C.List_yXZ11, C.List_yXZ12, C.List_eDA, C.List_yXZ13, C.List_yXZ14, C.List_yXZ15]), type$.JSArray_legacy_List_legacy_int);
    C.List_yXZ16 = H.setRuntimeTypeInfo(makeConstList([88, 88, 147, 150, 42, 46, 45, 196, 205]), type$.JSArray_legacy_int);
    C.List_yXZ17 = H.setRuntimeTypeInfo(makeConstList([43, 97, 183, 117, 85, 38, 35, 179, 61]), type$.JSArray_legacy_int);
    C.List_yXZ18 = H.setRuntimeTypeInfo(makeConstList([39, 53, 200, 87, 26, 21, 43, 232, 171]), type$.JSArray_legacy_int);
    C.List_yXZ19 = H.setRuntimeTypeInfo(makeConstList([56, 34, 51, 104, 114, 102, 29, 93, 77]), type$.JSArray_legacy_int);
    C.List_yXZ20 = H.setRuntimeTypeInfo(makeConstList([39, 28, 85, 171, 58, 165, 90, 98, 64]), type$.JSArray_legacy_int);
    C.List_yXZ21 = H.setRuntimeTypeInfo(makeConstList([34, 22, 116, 206, 23, 34, 43, 166, 73]), type$.JSArray_legacy_int);
    C.List_yXZ22 = H.setRuntimeTypeInfo(makeConstList([107, 54, 32, 26, 51, 1, 81, 43, 31]), type$.JSArray_legacy_int);
    C.List_yXZ23 = H.setRuntimeTypeInfo(makeConstList([68, 25, 106, 22, 64, 171, 36, 225, 114]), type$.JSArray_legacy_int);
    C.List_yXZ24 = H.setRuntimeTypeInfo(makeConstList([34, 19, 21, 102, 132, 188, 16, 76, 124]), type$.JSArray_legacy_int);
    C.List_yXZ25 = H.setRuntimeTypeInfo(makeConstList([62, 18, 78, 95, 85, 57, 50, 48, 51]), type$.JSArray_legacy_int);
    C.List_ECY = H.setRuntimeTypeInfo(makeConstList([C.List_yXZ16, C.List_yXZ17, C.List_yXZ18, C.List_yXZ19, C.List_yXZ20, C.List_yXZ21, C.List_yXZ22, C.List_yXZ23, C.List_yXZ24, C.List_yXZ25]), type$.JSArray_legacy_List_legacy_int);
    C.List_yXZ26 = H.setRuntimeTypeInfo(makeConstList([193, 101, 35, 159, 215, 111, 89, 46, 111]), type$.JSArray_legacy_int);
    C.List_yXZ27 = H.setRuntimeTypeInfo(makeConstList([60, 148, 31, 172, 219, 228, 21, 18, 111]), type$.JSArray_legacy_int);
    C.List_eDA0 = H.setRuntimeTypeInfo(makeConstList([112, 113, 77, 85, 179, 255, 38, 120, 114]), type$.JSArray_legacy_int);
    C.List_kfn0 = H.setRuntimeTypeInfo(makeConstList([40, 42, 1, 196, 245, 209, 10, 25, 109]), type$.JSArray_legacy_int);
    C.List_yXZ28 = H.setRuntimeTypeInfo(makeConstList([88, 43, 29, 140, 166, 213, 37, 43, 154]), type$.JSArray_legacy_int);
    C.List_yXZ29 = H.setRuntimeTypeInfo(makeConstList([61, 63, 30, 155, 67, 45, 68, 1, 209]), type$.JSArray_legacy_int);
    C.List_yXZ30 = H.setRuntimeTypeInfo(makeConstList([100, 80, 8, 43, 154, 1, 51, 26, 71]), type$.JSArray_legacy_int);
    C.List_kfn1 = H.setRuntimeTypeInfo(makeConstList([142, 78, 78, 16, 255, 128, 34, 197, 171]), type$.JSArray_legacy_int);
    C.List_yXZ31 = H.setRuntimeTypeInfo(makeConstList([41, 40, 5, 102, 211, 183, 4, 1, 221]), type$.JSArray_legacy_int);
    C.List_yXZ32 = H.setRuntimeTypeInfo(makeConstList([51, 50, 17, 168, 209, 192, 23, 25, 82]), type$.JSArray_legacy_int);
    C.List_JO4 = H.setRuntimeTypeInfo(makeConstList([C.List_yXZ26, C.List_yXZ27, C.List_eDA0, C.List_kfn0, C.List_yXZ28, C.List_yXZ29, C.List_yXZ30, C.List_kfn1, C.List_yXZ31, C.List_yXZ32]), type$.JSArray_legacy_List_legacy_int);
    C.List_knt1 = H.setRuntimeTypeInfo(makeConstList([138, 31, 36, 171, 27, 166, 38, 44, 229]), type$.JSArray_legacy_int);
    C.List_yXZ33 = H.setRuntimeTypeInfo(makeConstList([67, 87, 58, 169, 82, 115, 26, 59, 179]), type$.JSArray_legacy_int);
    C.List_yXZ34 = H.setRuntimeTypeInfo(makeConstList([63, 59, 90, 180, 59, 166, 93, 73, 154]), type$.JSArray_legacy_int);
    C.List_yXZ35 = H.setRuntimeTypeInfo(makeConstList([40, 40, 21, 116, 143, 209, 34, 39, 175]), type$.JSArray_legacy_int);
    C.List_yXZ36 = H.setRuntimeTypeInfo(makeConstList([47, 15, 16, 183, 34, 223, 49, 45, 183]), type$.JSArray_legacy_int);
    C.List_yXZ37 = H.setRuntimeTypeInfo(makeConstList([46, 17, 33, 183, 6, 98, 15, 32, 183]), type$.JSArray_legacy_int);
    C.List_yXZ38 = H.setRuntimeTypeInfo(makeConstList([57, 46, 22, 24, 128, 1, 54, 17, 37]), type$.JSArray_legacy_int);
    C.List_yXZ39 = H.setRuntimeTypeInfo(makeConstList([65, 32, 73, 115, 28, 128, 23, 128, 205]), type$.JSArray_legacy_int);
    C.List_yXZ40 = H.setRuntimeTypeInfo(makeConstList([40, 3, 9, 115, 51, 192, 18, 6, 223]), type$.JSArray_legacy_int);
    C.List_yXZ41 = H.setRuntimeTypeInfo(makeConstList([87, 37, 9, 115, 59, 77, 64, 21, 47]), type$.JSArray_legacy_int);
    C.List_wEo = H.setRuntimeTypeInfo(makeConstList([C.List_knt1, C.List_yXZ33, C.List_yXZ34, C.List_yXZ35, C.List_yXZ36, C.List_yXZ37, C.List_yXZ38, C.List_yXZ39, C.List_yXZ40, C.List_yXZ41]), type$.JSArray_legacy_List_legacy_int);
    C.List_yXZ42 = H.setRuntimeTypeInfo(makeConstList([104, 55, 44, 218, 9, 54, 53, 130, 226]), type$.JSArray_legacy_int);
    C.List_yXZ43 = H.setRuntimeTypeInfo(makeConstList([64, 90, 70, 205, 40, 41, 23, 26, 57]), type$.JSArray_legacy_int);
    C.List_yXZ44 = H.setRuntimeTypeInfo(makeConstList([54, 57, 112, 184, 5, 41, 38, 166, 213]), type$.JSArray_legacy_int);
    C.List_yXZ45 = H.setRuntimeTypeInfo(makeConstList([30, 34, 26, 133, 152, 116, 10, 32, 134]), type$.JSArray_legacy_int);
    C.List_knt2 = H.setRuntimeTypeInfo(makeConstList([39, 19, 53, 221, 26, 114, 32, 73, 255]), type$.JSArray_legacy_int);
    C.List_yXZ46 = H.setRuntimeTypeInfo(makeConstList([31, 9, 65, 234, 2, 15, 1, 118, 73]), type$.JSArray_legacy_int);
    C.List_eDA1 = H.setRuntimeTypeInfo(makeConstList([75, 32, 12, 51, 192, 255, 160, 43, 51]), type$.JSArray_legacy_int);
    C.List_yXZ47 = H.setRuntimeTypeInfo(makeConstList([88, 31, 35, 67, 102, 85, 55, 186, 85]), type$.JSArray_legacy_int);
    C.List_yXZ48 = H.setRuntimeTypeInfo(makeConstList([56, 21, 23, 111, 59, 205, 45, 37, 192]), type$.JSArray_legacy_int);
    C.List_yXZ49 = H.setRuntimeTypeInfo(makeConstList([55, 38, 70, 124, 73, 102, 1, 34, 98]), type$.JSArray_legacy_int);
    C.List_0 = H.setRuntimeTypeInfo(makeConstList([C.List_yXZ42, C.List_yXZ43, C.List_yXZ44, C.List_yXZ45, C.List_knt2, C.List_yXZ46, C.List_eDA1, C.List_yXZ47, C.List_yXZ48, C.List_yXZ49]), type$.JSArray_legacy_List_legacy_int);
    C.List_yXZ50 = H.setRuntimeTypeInfo(makeConstList([125, 98, 42, 88, 104, 85, 117, 175, 82]), type$.JSArray_legacy_int);
    C.List_yXZ51 = H.setRuntimeTypeInfo(makeConstList([95, 84, 53, 89, 128, 100, 113, 101, 45]), type$.JSArray_legacy_int);
    C.List_yXZ52 = H.setRuntimeTypeInfo(makeConstList([75, 79, 123, 47, 51, 128, 81, 171, 1]), type$.JSArray_legacy_int);
    C.List_yXZ53 = H.setRuntimeTypeInfo(makeConstList([57, 17, 5, 71, 102, 57, 53, 41, 49]), type$.JSArray_legacy_int);
    C.List_yXZ54 = H.setRuntimeTypeInfo(makeConstList([38, 33, 13, 121, 57, 73, 26, 1, 85]), type$.JSArray_legacy_int);
    C.List_yXZ55 = H.setRuntimeTypeInfo(makeConstList([41, 10, 67, 138, 77, 110, 90, 47, 114]), type$.JSArray_legacy_int);
    C.List_eDA2 = H.setRuntimeTypeInfo(makeConstList([115, 21, 2, 10, 102, 255, 166, 23, 6]), type$.JSArray_legacy_int);
    C.List_yXZ56 = H.setRuntimeTypeInfo(makeConstList([101, 29, 16, 10, 85, 128, 101, 196, 26]), type$.JSArray_legacy_int);
    C.List_yXZ57 = H.setRuntimeTypeInfo(makeConstList([57, 18, 10, 102, 102, 213, 34, 20, 43]), type$.JSArray_legacy_int);
    C.List_yXZ58 = H.setRuntimeTypeInfo(makeConstList([117, 20, 15, 36, 163, 128, 68, 1, 26]), type$.JSArray_legacy_int);
    C.List_a5W = H.setRuntimeTypeInfo(makeConstList([C.List_yXZ50, C.List_yXZ51, C.List_yXZ52, C.List_yXZ53, C.List_yXZ54, C.List_yXZ55, C.List_eDA2, C.List_yXZ56, C.List_yXZ57, C.List_yXZ58]), type$.JSArray_legacy_List_legacy_int);
    C.List_h47 = H.setRuntimeTypeInfo(makeConstList([102, 61, 71, 37, 34, 53, 31, 243, 192]), type$.JSArray_legacy_int);
    C.List_yXZ59 = H.setRuntimeTypeInfo(makeConstList([69, 60, 71, 38, 73, 119, 28, 222, 37]), type$.JSArray_legacy_int);
    C.List_h470 = H.setRuntimeTypeInfo(makeConstList([68, 45, 128, 34, 1, 47, 11, 245, 171]), type$.JSArray_legacy_int);
    C.List_yXZ60 = H.setRuntimeTypeInfo(makeConstList([62, 17, 19, 70, 146, 85, 55, 62, 70]), type$.JSArray_legacy_int);
    C.List_yXZ61 = H.setRuntimeTypeInfo(makeConstList([37, 43, 37, 154, 100, 163, 85, 160, 1]), type$.JSArray_legacy_int);
    C.List_yXZ62 = H.setRuntimeTypeInfo(makeConstList([63, 9, 92, 136, 28, 64, 32, 201, 85]), type$.JSArray_legacy_int);
    C.List_eDA3 = H.setRuntimeTypeInfo(makeConstList([75, 15, 9, 9, 64, 255, 184, 119, 16]), type$.JSArray_legacy_int);
    C.List_eDA4 = H.setRuntimeTypeInfo(makeConstList([86, 6, 28, 5, 64, 255, 25, 248, 1]), type$.JSArray_legacy_int);
    C.List_eDA5 = H.setRuntimeTypeInfo(makeConstList([56, 8, 17, 132, 137, 255, 55, 116, 128]), type$.JSArray_legacy_int);
    C.List_yXZ63 = H.setRuntimeTypeInfo(makeConstList([58, 15, 20, 82, 135, 57, 26, 121, 40]), type$.JSArray_legacy_int);
    C.List_6oq = H.setRuntimeTypeInfo(makeConstList([C.List_h47, C.List_yXZ59, C.List_h470, C.List_yXZ60, C.List_yXZ61, C.List_yXZ62, C.List_eDA3, C.List_eDA4, C.List_eDA5, C.List_yXZ63]), type$.JSArray_legacy_List_legacy_int);
    C.List_yXZ64 = H.setRuntimeTypeInfo(makeConstList([164, 50, 31, 137, 154, 133, 25, 35, 218]), type$.JSArray_legacy_int);
    C.List_yXZ65 = H.setRuntimeTypeInfo(makeConstList([51, 103, 44, 131, 131, 123, 31, 6, 158]), type$.JSArray_legacy_int);
    C.List_yXZ66 = H.setRuntimeTypeInfo(makeConstList([86, 40, 64, 135, 148, 224, 45, 183, 128]), type$.JSArray_legacy_int);
    C.List_yXZ67 = H.setRuntimeTypeInfo(makeConstList([22, 26, 17, 131, 240, 154, 14, 1, 209]), type$.JSArray_legacy_int);
    C.List_yXZ68 = H.setRuntimeTypeInfo(makeConstList([45, 16, 21, 91, 64, 222, 7, 1, 197]), type$.JSArray_legacy_int);
    C.List_yXZ69 = H.setRuntimeTypeInfo(makeConstList([56, 21, 39, 155, 60, 138, 23, 102, 213]), type$.JSArray_legacy_int);
    C.List_eDA6 = H.setRuntimeTypeInfo(makeConstList([83, 12, 13, 54, 192, 255, 68, 47, 28]), type$.JSArray_legacy_int);
    C.List_yXZ70 = H.setRuntimeTypeInfo(makeConstList([85, 26, 85, 85, 128, 128, 32, 146, 171]), type$.JSArray_legacy_int);
    C.List_yXZ71 = H.setRuntimeTypeInfo(makeConstList([18, 11, 7, 63, 144, 171, 4, 4, 246]), type$.JSArray_legacy_int);
    C.List_yXZ72 = H.setRuntimeTypeInfo(makeConstList([35, 27, 10, 146, 174, 171, 12, 26, 128]), type$.JSArray_legacy_int);
    C.List_a5W0 = H.setRuntimeTypeInfo(makeConstList([C.List_yXZ64, C.List_yXZ65, C.List_yXZ66, C.List_yXZ67, C.List_yXZ68, C.List_yXZ69, C.List_eDA6, C.List_yXZ70, C.List_yXZ71, C.List_yXZ72]), type$.JSArray_legacy_List_legacy_int);
    C.List_yXZ73 = H.setRuntimeTypeInfo(makeConstList([190, 80, 35, 99, 180, 80, 126, 54, 45]), type$.JSArray_legacy_int);
    C.List_yXZ74 = H.setRuntimeTypeInfo(makeConstList([85, 126, 47, 87, 176, 51, 41, 20, 32]), type$.JSArray_legacy_int);
    C.List_yXZ75 = H.setRuntimeTypeInfo(makeConstList([101, 75, 128, 139, 118, 146, 116, 128, 85]), type$.JSArray_legacy_int);
    C.List_yXZ76 = H.setRuntimeTypeInfo(makeConstList([56, 41, 15, 176, 236, 85, 37, 9, 62]), type$.JSArray_legacy_int);
    C.List_eDA7 = H.setRuntimeTypeInfo(makeConstList([71, 30, 17, 119, 118, 255, 17, 18, 138]), type$.JSArray_legacy_int);
    C.List_yXZ77 = H.setRuntimeTypeInfo(makeConstList([101, 38, 60, 138, 55, 70, 43, 26, 142]), type$.JSArray_legacy_int);
    C.List_eDA8 = H.setRuntimeTypeInfo(makeConstList([146, 36, 19, 30, 171, 255, 97, 27, 20]), type$.JSArray_legacy_int);
    C.List_yXZ78 = H.setRuntimeTypeInfo(makeConstList([138, 45, 61, 62, 219, 1, 81, 188, 64]), type$.JSArray_legacy_int);
    C.List_yXZ79 = H.setRuntimeTypeInfo(makeConstList([32, 41, 20, 117, 151, 142, 20, 21, 163]), type$.JSArray_legacy_int);
    C.List_yXZ80 = H.setRuntimeTypeInfo(makeConstList([112, 19, 12, 61, 195, 128, 48, 4, 24]), type$.JSArray_legacy_int);
    C.List_RrN = H.setRuntimeTypeInfo(makeConstList([C.List_yXZ73, C.List_yXZ74, C.List_yXZ75, C.List_yXZ76, C.List_eDA7, C.List_yXZ77, C.List_eDA8, C.List_yXZ78, C.List_yXZ79, C.List_yXZ80]), type$.JSArray_legacy_List_legacy_int);
    C.List_799 = H.setRuntimeTypeInfo(makeConstList([C.List_sty0, C.List_L3W, C.List_ECY, C.List_JO4, C.List_wEo, C.List_0, C.List_a5W, C.List_6oq, C.List_a5W0, C.List_RrN]), type$.JSArray_legacy_List_legacy_List_legacy_int);
    C.List_89P = H.setRuntimeTypeInfo(makeConstList([3226, 6412, 200, 168, 38, 38, 134, 134, 100, 100, 100, 100, 68, 68, 68, 68]), type$.JSArray_legacy_int);
    C.List_8_8_4_2 = H.setRuntimeTypeInfo(makeConstList([8, 8, 4, 2]), type$.JSArray_legacy_int);
    C.List_8aB = H.setRuntimeTypeInfo(makeConstList([V.vp8_filter_VP8Filter_DC16$closure(), V.vp8_filter_VP8Filter_TM16$closure(), V.vp8_filter_VP8Filter_VE16$closure(), V.vp8_filter_VP8Filter_HE16$closure(), V.vp8_filter_VP8Filter_DC16NoTop$closure(), V.vp8_filter_VP8Filter_DC16NoLeft$closure(), V.vp8_filter_VP8Filter_DC16NoTopLeft$closure()]), type$.JSArray_of_legacy_void_Function_legacy_InputBuffer);
    C.List_8co1 = H.setRuntimeTypeInfo(makeConstList([4, 5, 6, 7, 8, 9, 10, 10, 11, 12, 13, 14, 15, 16, 17, 17, 18, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 25, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 93, 95, 96, 98, 100, 101, 102, 104, 106, 108, 110, 112, 114, 116, 118, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 143, 145, 148, 151, 154, 157]), type$.JSArray_legacy_int);
    C.List_8co0 = H.setRuntimeTypeInfo(makeConstList([7, 6, 6, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]), type$.JSArray_legacy_int);
    C.List_8co = H.setRuntimeTypeInfo(makeConstList([80, 88, 23, 71, 30, 30, 62, 62, 4, 4, 4, 4, 4, 4, 4, 4, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41]), type$.JSArray_legacy_int);
    C.List_AKW = H.setRuntimeTypeInfo(makeConstList([0, 1, 2, 3, 17, 4, 5, 33, 49, 6, 18, 65, 81, 7, 97, 113, 19, 34, 50, 129, 8, 20, 66, 145, 161, 177, 193, 9, 35, 51, 82, 240, 21, 98, 114, 209, 10, 22, 36, 52, 225, 37, 241, 23, 24, 25, 26, 38, 39, 40, 41, 42, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 117, 118, 119, 120, 121, 122, 130, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196, 197, 198, 199, 200, 201, 202, 210, 211, 212, 213, 214, 215, 216, 217, 218, 226, 227, 228, 229, 230, 231, 232, 233, 234, 242, 243, 244, 245, 246, 247, 248, 249, 250]), type$.JSArray_legacy_int);
    C.List_AYZ = H.setRuntimeTypeInfo(makeConstList([24, 7, 23, 25, 40, 6, 39, 41, 22, 26, 38, 42, 56, 5, 55, 57, 21, 27, 54, 58, 37, 43, 72, 4, 71, 73, 20, 28, 53, 59, 70, 74, 36, 44, 88, 69, 75, 52, 60, 3, 87, 89, 19, 29, 86, 90, 35, 45, 68, 76, 85, 91, 51, 61, 104, 2, 103, 105, 18, 30, 102, 106, 34, 46, 84, 92, 67, 77, 101, 107, 50, 62, 120, 1, 119, 121, 83, 93, 17, 31, 100, 108, 66, 78, 118, 122, 33, 47, 117, 123, 49, 63, 99, 109, 82, 94, 0, 116, 124, 65, 79, 16, 32, 98, 110, 48, 115, 125, 81, 95, 64, 114, 126, 97, 111, 80, 113, 127, 96, 112]), type$.JSArray_legacy_int);
    C.List_AZw = H.setRuntimeTypeInfo(makeConstList([0, 1, 8, 16, 9, 2, 3, 10, 17, 24, 32, 25, 18, 11, 4, 5, 12, 19, 26, 33, 40, 48, 41, 34, 27, 20, 13, 6, 7, 14, 21, 28, 35, 42, 49, 56, 57, 50, 43, 36, 29, 22, 15, 23, 30, 37, 44, 51, 58, 59, 52, 45, 38, 31, 39, 46, 53, 60, 61, 54, 47, 55, 62, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63]), type$.JSArray_legacy_int);
    C.List_AiM = H.setRuntimeTypeInfo(makeConstList([4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 119, 122, 125, 128, 131, 134, 137, 140, 143, 146, 149, 152, 155, 158, 161, 164, 167, 170, 173, 177, 181, 185, 189, 193, 197, 201, 205, 209, 213, 217, 221, 225, 229, 234, 239, 245, 249, 254, 259, 264, 269, 274, 279, 284]), type$.JSArray_legacy_int);
    C.List_B8J = H.setRuntimeTypeInfo(makeConstList([0, 1996959894, 3993919788, 2567524794, 124634137, 1886057615, 3915621685, 2657392035, 249268274, 2044508324, 3772115230, 2547177864, 162941995, 2125561021, 3887607047, 2428444049, 498536548, 1789927666, 4089016648, 2227061214, 450548861, 1843258603, 4107580753, 2211677639, 325883990, 1684777152, 4251122042, 2321926636, 335633487, 1661365465, 4195302755, 2366115317, 997073096, 1281953886, 3579855332, 2724688242, 1006888145, 1258607687, 3524101629, 2768942443, 901097722, 1119000684, 3686517206, 2898065728, 853044451, 1172266101, 3705015759, 2882616665, 651767980, 1373503546, 3369554304, 3218104598, 565507253, 1454621731, 3485111705, 3099436303, 671266974, 1594198024, 3322730930, 2970347812, 795835527, 1483230225, 3244367275, 3060149565, 1994146192, 31158534, 2563907772, 4023717930, 1907459465, 112637215, 2680153253, 3904427059, 2013776290, 251722036, 2517215374, 3775830040, 2137656763, 141376813, 2439277719, 3865271297, 1802195444, 476864866, 2238001368, 4066508878, 1812370925, 453092731, 2181625025, 4111451223, 1706088902, 314042704, 2344532202, 4240017532, 1658658271, 366619977, 2362670323, 4224994405, 1303535960, 984961486, 2747007092, 3569037538, 1256170817, 1037604311, 2765210733, 3554079995, 1131014506, 879679996, 2909243462, 3663771856, 1141124467, 855842277, 2852801631, 3708648649, 1342533948, 654459306, 3188396048, 3373015174, 1466479909, 544179635, 3110523913, 3462522015, 1591671054, 702138776, 2966460450, 3352799412, 1504918807, 783551873, 3082640443, 3233442989, 3988292384, 2596254646, 62317068, 1957810842, 3939845945, 2647816111, 81470997, 1943803523, 3814918930, 2489596804, 225274430, 2053790376, 3826175755, 2466906013, 167816743, 2097651377, 4027552580, 2265490386, 503444072, 1762050814, 4150417245, 2154129355, 426522225, 1852507879, 4275313526, 2312317920, 282753626, 1742555852, 4189708143, 2394877945, 397917763, 1622183637, 3604390888, 2714866558, 953729732, 1340076626, 3518719985, 2797360999, 1068828381, 1219638859, 3624741850, 2936675148, 906185462, 1090812512, 3747672003, 2825379669, 829329135, 1181335161, 3412177804, 3160834842, 628085408, 1382605366, 3423369109, 3138078467, 570562233, 1426400815, 3317316542, 2998733608, 733239954, 1555261956, 3268935591, 3050360625, 752459403, 1541320221, 2607071920, 3965973030, 1969922972, 40735498, 2617837225, 3943577151, 1913087877, 83908371, 2512341634, 3803740692, 2075208622, 213261112, 2463272603, 3855990285, 2094854071, 198958881, 2262029012, 4057260610, 1759359992, 534414190, 2176718541, 4139329115, 1873836001, 414664567, 2282248934, 4279200368, 1711684554, 285281116, 2405801727, 4167216745, 1634467795, 376229701, 2685067896, 3608007406, 1308918612, 956543938, 2808555105, 3495958263, 1231636301, 1047427035, 2932959818, 3654703836, 1088359270, 936918000, 2847714899, 3736837829, 1202900863, 817233897, 3183342108, 3401237130, 1404277552, 615818150, 3134207493, 3453421203, 1423857449, 601450431, 3009837614, 3294710456, 1567103746, 711928724, 3020668471, 3272380065, 1510334235, 755167117]), type$.JSArray_legacy_int);
    C.List_DKo = H.setRuntimeTypeInfo(makeConstList([0, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767, 65535, 131071, 262143, 524287, 1048575, 2097151, 4194303, 8388607, 16777215, 33554431, 67108863, 134217727, 268435455, 536870911, 1073741823, 2147483647, 4294967295]), type$.JSArray_legacy_int);
    C.List_F1L = H.setRuntimeTypeInfo(makeConstList([0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0]), type$.JSArray_legacy_int);
    C.List_F1L2 = H.setRuntimeTypeInfo(makeConstList([0, 0, 2, 1, 2, 4, 4, 3, 4, 7, 5, 4, 4, 0, 1, 2, 119]), type$.JSArray_legacy_int);
    C.List_F1L1 = H.setRuntimeTypeInfo(makeConstList([0, 0, 2, 1, 3, 3, 2, 4, 3, 5, 5, 4, 4, 0, 0, 1, 125]), type$.JSArray_legacy_int);
    C.List_F1L0 = H.setRuntimeTypeInfo(makeConstList([0, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0]), type$.JSArray_legacy_int);
    C.List_F1L3 = H.setRuntimeTypeInfo(makeConstList([0, 1, 2, 3, 6, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6, 7, 0]), type$.JSArray_legacy_int);
    C.List_G61 = H.setRuntimeTypeInfo(makeConstList([1, 2, 3, 0, 4, 17, 5, 18, 33, 49, 65, 6, 19, 81, 97, 7, 34, 113, 20, 50, 129, 145, 161, 8, 35, 66, 177, 193, 21, 82, 209, 240, 36, 51, 98, 114, 130, 9, 10, 22, 23, 24, 25, 26, 37, 38, 39, 40, 41, 42, 52, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 117, 118, 119, 120, 121, 122, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196, 197, 198, 199, 200, 201, 202, 210, 211, 212, 213, 214, 215, 216, 217, 218, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250]), type$.JSArray_legacy_int);
    C.List_HHa = H.setRuntimeTypeInfo(makeConstList([null, N.webp_filters_WebPFilters_horizontalUnfilter$closure(), N.webp_filters_WebPFilters_verticalUnfilter$closure(), N.webp_filters_WebPFilters_gradientUnfilter$closure()]), H.findType("JSArray<~(int*,int*,int*,int*,int*,Uint8List*)*>"));
    C.List_K2a = H.setRuntimeTypeInfo(makeConstList([1, 1.387039845, 1.306562965, 1.175875602, 1, 0.785694958, 0.5411961, 0.275899379]), H.findType("JSArray<double*>"));
    C.List_MEg = H.setRuntimeTypeInfo(makeConstList([28679, 28679, 31752, -32759, -31735, -30711, -29687, -28663, 29703, 29703, 30727, 30727, -27639, -26615, -25591, -24567]), type$.JSArray_legacy_int);
    C.List_q8u = H.setRuntimeTypeInfo(makeConstList([255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_legacy_int);
    C.List_2du = H.setRuntimeTypeInfo(makeConstList([C.List_q8u, C.List_q8u, C.List_q8u]), type$.JSArray_legacy_List_legacy_int);
    C.List_n3E = H.setRuntimeTypeInfo(makeConstList([176, 246, 255, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_legacy_int);
    C.List_U8c = H.setRuntimeTypeInfo(makeConstList([223, 241, 252, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_legacy_int);
    C.List_q8u0 = H.setRuntimeTypeInfo(makeConstList([249, 253, 253, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_legacy_int);
    C.List_EkO = H.setRuntimeTypeInfo(makeConstList([C.List_n3E, C.List_U8c, C.List_q8u0]), type$.JSArray_legacy_List_legacy_int);
    C.List_mXg = H.setRuntimeTypeInfo(makeConstList([255, 244, 252, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_legacy_int);
    C.List_sav = H.setRuntimeTypeInfo(makeConstList([234, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_legacy_int);
    C.List_q8u1 = H.setRuntimeTypeInfo(makeConstList([253, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_legacy_int);
    C.List_ezx = H.setRuntimeTypeInfo(makeConstList([C.List_mXg, C.List_sav, C.List_q8u1]), type$.JSArray_legacy_List_legacy_int);
    C.List_mXg0 = H.setRuntimeTypeInfo(makeConstList([255, 246, 254, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_legacy_int);
    C.List_wX4 = H.setRuntimeTypeInfo(makeConstList([239, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_legacy_int);
    C.List_U8c0 = H.setRuntimeTypeInfo(makeConstList([254, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_legacy_int);
    C.List_Q1p = H.setRuntimeTypeInfo(makeConstList([C.List_mXg0, C.List_wX4, C.List_U8c0]), type$.JSArray_legacy_List_legacy_int);
    C.List_mXg1 = H.setRuntimeTypeInfo(makeConstList([255, 248, 254, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_legacy_int);
    C.List_wX40 = H.setRuntimeTypeInfo(makeConstList([251, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_legacy_int);
    C.List_ycb = H.setRuntimeTypeInfo(makeConstList([C.List_mXg1, C.List_wX40, C.List_q8u]), type$.JSArray_legacy_List_legacy_int);
    C.List_wX41 = H.setRuntimeTypeInfo(makeConstList([255, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_legacy_int);
    C.List_mXg2 = H.setRuntimeTypeInfo(makeConstList([251, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_legacy_int);
    C.List_AuU = H.setRuntimeTypeInfo(makeConstList([C.List_wX41, C.List_mXg2, C.List_U8c0]), type$.JSArray_legacy_List_legacy_int);
    C.List_ekJ = H.setRuntimeTypeInfo(makeConstList([255, 254, 253, 255, 254, 255, 255, 255, 255, 255, 255]), type$.JSArray_legacy_int);
    C.List_vHK = H.setRuntimeTypeInfo(makeConstList([250, 255, 254, 255, 254, 255, 255, 255, 255, 255, 255]), type$.JSArray_legacy_int);
    C.List_Mic = H.setRuntimeTypeInfo(makeConstList([254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_legacy_int);
    C.List_3oi = H.setRuntimeTypeInfo(makeConstList([C.List_ekJ, C.List_vHK, C.List_Mic]), type$.JSArray_legacy_List_legacy_int);
    C.List_uwP = H.setRuntimeTypeInfo(makeConstList([C.List_2du, C.List_EkO, C.List_ezx, C.List_Q1p, C.List_ycb, C.List_AuU, C.List_3oi, C.List_2du]), type$.JSArray_legacy_List_legacy_List_legacy_int);
    C.List_Mic0 = H.setRuntimeTypeInfo(makeConstList([217, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_legacy_int);
    C.List_ku2 = H.setRuntimeTypeInfo(makeConstList([225, 252, 241, 253, 255, 255, 254, 255, 255, 255, 255]), type$.JSArray_legacy_int);
    C.List_unK = H.setRuntimeTypeInfo(makeConstList([234, 250, 241, 250, 253, 255, 253, 254, 255, 255, 255]), type$.JSArray_legacy_int);
    C.List_EuK = H.setRuntimeTypeInfo(makeConstList([C.List_Mic0, C.List_ku2, C.List_unK]), type$.JSArray_legacy_List_legacy_int);
    C.List_H37 = H.setRuntimeTypeInfo(makeConstList([255, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_legacy_int);
    C.List_sav0 = H.setRuntimeTypeInfo(makeConstList([223, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_legacy_int);
    C.List_00 = H.setRuntimeTypeInfo(makeConstList([238, 253, 254, 254, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_legacy_int);
    C.List_U05 = H.setRuntimeTypeInfo(makeConstList([C.List_H37, C.List_sav0, C.List_00]), type$.JSArray_legacy_List_legacy_int);
    C.List_H370 = H.setRuntimeTypeInfo(makeConstList([249, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_legacy_int);
    C.List_wEo0 = H.setRuntimeTypeInfo(makeConstList([C.List_mXg1, C.List_H370, C.List_q8u]), type$.JSArray_legacy_List_legacy_int);
    C.List_q8u2 = H.setRuntimeTypeInfo(makeConstList([255, 253, 255, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_legacy_int);
    C.List_H371 = H.setRuntimeTypeInfo(makeConstList([247, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_legacy_int);
    C.List_HmY = H.setRuntimeTypeInfo(makeConstList([C.List_q8u2, C.List_H371, C.List_q8u]), type$.JSArray_legacy_List_legacy_int);
    C.List_Mic1 = H.setRuntimeTypeInfo(makeConstList([252, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_legacy_int);
    C.List_qJr = H.setRuntimeTypeInfo(makeConstList([C.List_wX41, C.List_Mic1, C.List_q8u]), type$.JSArray_legacy_List_legacy_int);
    C.List_mXg3 = H.setRuntimeTypeInfo(makeConstList([255, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_legacy_int);
    C.List_oIk = H.setRuntimeTypeInfo(makeConstList([C.List_mXg3, C.List_q8u1, C.List_q8u]), type$.JSArray_legacy_List_legacy_int);
    C.List_H372 = H.setRuntimeTypeInfo(makeConstList([255, 254, 253, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_legacy_int);
    C.List_Mic2 = H.setRuntimeTypeInfo(makeConstList([250, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_legacy_int);
    C.List_23h = H.setRuntimeTypeInfo(makeConstList([C.List_H372, C.List_Mic2, C.List_Mic]), type$.JSArray_legacy_List_legacy_int);
    C.List_Crw = H.setRuntimeTypeInfo(makeConstList([C.List_EuK, C.List_U05, C.List_wEo0, C.List_HmY, C.List_qJr, C.List_oIk, C.List_23h, C.List_2du]), type$.JSArray_legacy_List_legacy_List_legacy_int);
    C.List_U8c1 = H.setRuntimeTypeInfo(makeConstList([186, 251, 250, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_legacy_int);
    C.List_01 = H.setRuntimeTypeInfo(makeConstList([234, 251, 244, 254, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_legacy_int);
    C.List_IyW = H.setRuntimeTypeInfo(makeConstList([251, 251, 243, 253, 254, 255, 254, 255, 255, 255, 255]), type$.JSArray_legacy_int);
    C.List_ujV = H.setRuntimeTypeInfo(makeConstList([C.List_U8c1, C.List_01, C.List_IyW]), type$.JSArray_legacy_List_legacy_int);
    C.List_U8c2 = H.setRuntimeTypeInfo(makeConstList([236, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_legacy_int);
    C.List_A8Z = H.setRuntimeTypeInfo(makeConstList([251, 253, 253, 254, 254, 255, 255, 255, 255, 255, 255]), type$.JSArray_legacy_int);
    C.List_eFE = H.setRuntimeTypeInfo(makeConstList([C.List_wX41, C.List_U8c2, C.List_A8Z]), type$.JSArray_legacy_List_legacy_int);
    C.List_sav1 = H.setRuntimeTypeInfo(makeConstList([254, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_legacy_int);
    C.List_ezx0 = H.setRuntimeTypeInfo(makeConstList([C.List_mXg3, C.List_sav1, C.List_q8u]), type$.JSArray_legacy_List_legacy_int);
    C.List_n3E0 = H.setRuntimeTypeInfo(makeConstList([254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_legacy_int);
    C.List_QXJ = H.setRuntimeTypeInfo(makeConstList([C.List_H37, C.List_n3E0, C.List_Mic]), type$.JSArray_legacy_List_legacy_int);
    C.List_yzJ = H.setRuntimeTypeInfo(makeConstList([C.List_q8u, C.List_Mic, C.List_q8u]), type$.JSArray_legacy_List_legacy_int);
    C.List_QcX = H.setRuntimeTypeInfo(makeConstList([C.List_ujV, C.List_eFE, C.List_ezx0, C.List_QXJ, C.List_yzJ, C.List_2du, C.List_2du, C.List_2du]), type$.JSArray_legacy_List_legacy_List_legacy_int);
    C.List_Mic3 = H.setRuntimeTypeInfo(makeConstList([248, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_legacy_int);
    C.List_AsR = H.setRuntimeTypeInfo(makeConstList([250, 254, 252, 254, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_legacy_int);
    C.List_n3E1 = H.setRuntimeTypeInfo(makeConstList([248, 254, 249, 253, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_legacy_int);
    C.List_gkc = H.setRuntimeTypeInfo(makeConstList([C.List_Mic3, C.List_AsR, C.List_n3E1]), type$.JSArray_legacy_List_legacy_int);
    C.List_q8u3 = H.setRuntimeTypeInfo(makeConstList([255, 253, 253, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_legacy_int);
    C.List_Mic4 = H.setRuntimeTypeInfo(makeConstList([246, 253, 253, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_legacy_int);
    C.List_02 = H.setRuntimeTypeInfo(makeConstList([252, 254, 251, 254, 254, 255, 255, 255, 255, 255, 255]), type$.JSArray_legacy_int);
    C.List_03 = H.setRuntimeTypeInfo(makeConstList([C.List_q8u3, C.List_Mic4, C.List_02]), type$.JSArray_legacy_List_legacy_int);
    C.List_mXg4 = H.setRuntimeTypeInfo(makeConstList([255, 254, 252, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_legacy_int);
    C.List_n3E2 = H.setRuntimeTypeInfo(makeConstList([248, 254, 253, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_legacy_int);
    C.List_m9F = H.setRuntimeTypeInfo(makeConstList([253, 255, 254, 254, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_legacy_int);
    C.List_C3E = H.setRuntimeTypeInfo(makeConstList([C.List_mXg4, C.List_n3E2, C.List_m9F]), type$.JSArray_legacy_List_legacy_int);
    C.List_wX42 = H.setRuntimeTypeInfo(makeConstList([255, 251, 254, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_legacy_int);
    C.List_wX43 = H.setRuntimeTypeInfo(makeConstList([245, 251, 254, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_legacy_int);
    C.List_wX44 = H.setRuntimeTypeInfo(makeConstList([253, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_legacy_int);
    C.List_swR = H.setRuntimeTypeInfo(makeConstList([C.List_wX42, C.List_wX43, C.List_wX44]), type$.JSArray_legacy_List_legacy_int);
    C.List_q8u4 = H.setRuntimeTypeInfo(makeConstList([255, 251, 253, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_legacy_int);
    C.List_U8c3 = H.setRuntimeTypeInfo(makeConstList([252, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_legacy_int);
    C.List_uQV = H.setRuntimeTypeInfo(makeConstList([C.List_q8u4, C.List_U8c3, C.List_H37]), type$.JSArray_legacy_List_legacy_int);
    C.List_H373 = H.setRuntimeTypeInfo(makeConstList([255, 252, 255, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_legacy_int);
    C.List_wX45 = H.setRuntimeTypeInfo(makeConstList([249, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_legacy_int);
    C.List_wX46 = H.setRuntimeTypeInfo(makeConstList([255, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_legacy_int);
    C.List_46y = H.setRuntimeTypeInfo(makeConstList([C.List_H373, C.List_wX45, C.List_wX46]), type$.JSArray_legacy_List_legacy_int);
    C.List_q8u5 = H.setRuntimeTypeInfo(makeConstList([255, 255, 253, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_legacy_int);
    C.List_yzJ0 = H.setRuntimeTypeInfo(makeConstList([C.List_q8u5, C.List_Mic2, C.List_q8u]), type$.JSArray_legacy_List_legacy_int);
    C.List_88p = H.setRuntimeTypeInfo(makeConstList([C.List_gkc, C.List_03, C.List_C3E, C.List_swR, C.List_uQV, C.List_46y, C.List_yzJ0, C.List_yzJ]), type$.JSArray_legacy_List_legacy_List_legacy_int);
    C.List_MIe = H.setRuntimeTypeInfo(makeConstList([C.List_uwP, C.List_Crw, C.List_QcX, C.List_88p]), type$.JSArray_legacy_List_legacy_List_legacy_List_legacy_int);
    C.List_Qw3 = H.setRuntimeTypeInfo(makeConstList([0, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095]), type$.JSArray_legacy_int);
    C.List_2Vk0 = H.setRuntimeTypeInfo(makeConstList([128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_gkc0 = H.setRuntimeTypeInfo(makeConstList([C.List_2Vk0, C.List_2Vk0, C.List_2Vk0]), type$.JSArray_legacy_List_legacy_int);
    C.List_cdS = H.setRuntimeTypeInfo(makeConstList([253, 136, 254, 255, 228, 219, 128, 128, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_app = H.setRuntimeTypeInfo(makeConstList([189, 129, 242, 255, 227, 213, 255, 219, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_yFh = H.setRuntimeTypeInfo(makeConstList([106, 126, 227, 252, 214, 209, 255, 255, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_y5k = H.setRuntimeTypeInfo(makeConstList([C.List_cdS, C.List_app, C.List_yFh]), type$.JSArray_legacy_List_legacy_int);
    C.List_INA = H.setRuntimeTypeInfo(makeConstList([1, 98, 248, 255, 236, 226, 255, 255, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_e4d = H.setRuntimeTypeInfo(makeConstList([181, 133, 238, 254, 221, 234, 255, 154, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_app0 = H.setRuntimeTypeInfo(makeConstList([78, 134, 202, 247, 198, 180, 255, 219, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_iLh = H.setRuntimeTypeInfo(makeConstList([C.List_INA, C.List_e4d, C.List_app0]), type$.JSArray_legacy_List_legacy_int);
    C.List_MOR = H.setRuntimeTypeInfo(makeConstList([1, 185, 249, 255, 243, 255, 128, 128, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_iUw = H.setRuntimeTypeInfo(makeConstList([184, 150, 247, 255, 236, 224, 128, 128, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_Eba = H.setRuntimeTypeInfo(makeConstList([77, 110, 216, 255, 236, 230, 128, 128, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_VS7 = H.setRuntimeTypeInfo(makeConstList([C.List_MOR, C.List_iUw, C.List_Eba]), type$.JSArray_legacy_List_legacy_int);
    C.List_MOR0 = H.setRuntimeTypeInfo(makeConstList([1, 101, 251, 255, 241, 255, 128, 128, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_wnc = H.setRuntimeTypeInfo(makeConstList([170, 139, 241, 252, 236, 209, 255, 255, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_XwU = H.setRuntimeTypeInfo(makeConstList([37, 116, 196, 243, 228, 255, 255, 255, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_HTJ = H.setRuntimeTypeInfo(makeConstList([C.List_MOR0, C.List_wnc, C.List_XwU]), type$.JSArray_legacy_List_legacy_int);
    C.List_1yC = H.setRuntimeTypeInfo(makeConstList([1, 204, 254, 255, 245, 255, 128, 128, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_Eba0 = H.setRuntimeTypeInfo(makeConstList([207, 160, 250, 255, 238, 128, 128, 128, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_iUw0 = H.setRuntimeTypeInfo(makeConstList([102, 103, 231, 255, 211, 171, 128, 128, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_4QF = H.setRuntimeTypeInfo(makeConstList([C.List_1yC, C.List_Eba0, C.List_iUw0]), type$.JSArray_legacy_List_legacy_int);
    C.List_uXo = H.setRuntimeTypeInfo(makeConstList([1, 152, 252, 255, 240, 255, 128, 128, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_iUw1 = H.setRuntimeTypeInfo(makeConstList([177, 135, 243, 255, 234, 225, 128, 128, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_Eba1 = H.setRuntimeTypeInfo(makeConstList([80, 129, 211, 255, 194, 224, 128, 128, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_8Pu = H.setRuntimeTypeInfo(makeConstList([C.List_uXo, C.List_iUw1, C.List_Eba1]), type$.JSArray_legacy_List_legacy_int);
    C.List_2hT = H.setRuntimeTypeInfo(makeConstList([1, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_2hT0 = H.setRuntimeTypeInfo(makeConstList([246, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_10r = H.setRuntimeTypeInfo(makeConstList([255, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_Snu = H.setRuntimeTypeInfo(makeConstList([C.List_2hT, C.List_2hT0, C.List_10r]), type$.JSArray_legacy_List_legacy_int);
    C.List_23h0 = H.setRuntimeTypeInfo(makeConstList([C.List_gkc0, C.List_y5k, C.List_iLh, C.List_VS7, C.List_HTJ, C.List_4QF, C.List_8Pu, C.List_Snu]), type$.JSArray_legacy_List_legacy_List_legacy_int);
    C.List_2hT1 = H.setRuntimeTypeInfo(makeConstList([198, 35, 237, 223, 193, 187, 162, 160, 145, 155, 62]), type$.JSArray_legacy_int);
    C.List_2Vk1 = H.setRuntimeTypeInfo(makeConstList([131, 45, 198, 221, 172, 176, 220, 157, 252, 221, 1]), type$.JSArray_legacy_int);
    C.List_kOG = H.setRuntimeTypeInfo(makeConstList([68, 47, 146, 208, 149, 167, 221, 162, 255, 223, 128]), type$.JSArray_legacy_int);
    C.List_BDr = H.setRuntimeTypeInfo(makeConstList([C.List_2hT1, C.List_2Vk1, C.List_kOG]), type$.JSArray_legacy_List_legacy_int);
    C.List_qNA = H.setRuntimeTypeInfo(makeConstList([1, 149, 241, 255, 221, 224, 255, 255, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_app1 = H.setRuntimeTypeInfo(makeConstList([184, 141, 234, 253, 222, 220, 255, 199, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_kr3 = H.setRuntimeTypeInfo(makeConstList([81, 99, 181, 242, 176, 190, 249, 202, 255, 255, 128]), type$.JSArray_legacy_int);
    C.List_Hcu = H.setRuntimeTypeInfo(makeConstList([C.List_qNA, C.List_app1, C.List_kr3]), type$.JSArray_legacy_List_legacy_int);
    C.List_oqK = H.setRuntimeTypeInfo(makeConstList([1, 129, 232, 253, 214, 197, 242, 196, 255, 255, 128]), type$.JSArray_legacy_int);
    C.List_e4d0 = H.setRuntimeTypeInfo(makeConstList([99, 121, 210, 250, 201, 198, 255, 202, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_kr30 = H.setRuntimeTypeInfo(makeConstList([23, 91, 163, 242, 170, 187, 247, 210, 255, 255, 128]), type$.JSArray_legacy_int);
    C.List_zAX = H.setRuntimeTypeInfo(makeConstList([C.List_oqK, C.List_e4d0, C.List_kr30]), type$.JSArray_legacy_List_legacy_int);
    C.List_uXo0 = H.setRuntimeTypeInfo(makeConstList([1, 200, 246, 255, 234, 255, 128, 128, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_YAl = H.setRuntimeTypeInfo(makeConstList([109, 178, 241, 255, 231, 245, 255, 255, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_INA0 = H.setRuntimeTypeInfo(makeConstList([44, 130, 201, 253, 205, 192, 255, 255, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_QOg = H.setRuntimeTypeInfo(makeConstList([C.List_uXo0, C.List_YAl, C.List_INA0]), type$.JSArray_legacy_List_legacy_int);
    C.List_niO = H.setRuntimeTypeInfo(makeConstList([1, 132, 239, 251, 219, 209, 255, 165, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_INA1 = H.setRuntimeTypeInfo(makeConstList([94, 136, 225, 251, 218, 190, 255, 255, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_app2 = H.setRuntimeTypeInfo(makeConstList([22, 100, 174, 245, 186, 161, 255, 199, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_i7r = H.setRuntimeTypeInfo(makeConstList([C.List_niO, C.List_INA1, C.List_app2]), type$.JSArray_legacy_List_legacy_int);
    C.List_xw8 = H.setRuntimeTypeInfo(makeConstList([1, 182, 249, 255, 232, 235, 128, 128, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_iUw2 = H.setRuntimeTypeInfo(makeConstList([124, 143, 241, 255, 227, 234, 128, 128, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_app3 = H.setRuntimeTypeInfo(makeConstList([35, 77, 181, 251, 193, 211, 255, 205, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_sQ3 = H.setRuntimeTypeInfo(makeConstList([C.List_xw8, C.List_iUw2, C.List_app3]), type$.JSArray_legacy_List_legacy_int);
    C.List_UkC = H.setRuntimeTypeInfo(makeConstList([1, 157, 247, 255, 236, 231, 255, 255, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_qNA0 = H.setRuntimeTypeInfo(makeConstList([121, 141, 235, 255, 225, 227, 255, 255, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_app4 = H.setRuntimeTypeInfo(makeConstList([45, 99, 188, 251, 195, 217, 255, 224, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_ACG = H.setRuntimeTypeInfo(makeConstList([C.List_UkC, C.List_qNA0, C.List_app4]), type$.JSArray_legacy_List_legacy_int);
    C.List_xw80 = H.setRuntimeTypeInfo(makeConstList([1, 1, 251, 255, 213, 255, 128, 128, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_e3N = H.setRuntimeTypeInfo(makeConstList([203, 1, 248, 255, 255, 128, 128, 128, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_uXo1 = H.setRuntimeTypeInfo(makeConstList([137, 1, 177, 255, 224, 255, 128, 128, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_UMT = H.setRuntimeTypeInfo(makeConstList([C.List_xw80, C.List_e3N, C.List_uXo1]), type$.JSArray_legacy_List_legacy_int);
    C.List_IJC = H.setRuntimeTypeInfo(makeConstList([C.List_BDr, C.List_Hcu, C.List_zAX, C.List_QOg, C.List_i7r, C.List_sQ3, C.List_ACG, C.List_UMT]), type$.JSArray_legacy_List_legacy_List_legacy_int);
    C.List_oyU = H.setRuntimeTypeInfo(makeConstList([253, 9, 248, 251, 207, 208, 255, 192, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_fnl = H.setRuntimeTypeInfo(makeConstList([175, 13, 224, 243, 193, 185, 249, 198, 255, 255, 128]), type$.JSArray_legacy_int);
    C.List_kOG0 = H.setRuntimeTypeInfo(makeConstList([73, 17, 171, 221, 161, 179, 236, 167, 255, 234, 128]), type$.JSArray_legacy_int);
    C.List_04 = H.setRuntimeTypeInfo(makeConstList([C.List_oyU, C.List_fnl, C.List_kOG0]), type$.JSArray_legacy_List_legacy_int);
    C.List_qNA1 = H.setRuntimeTypeInfo(makeConstList([1, 95, 247, 253, 212, 183, 255, 255, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_qph = H.setRuntimeTypeInfo(makeConstList([239, 90, 244, 250, 211, 209, 255, 255, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_yFh0 = H.setRuntimeTypeInfo(makeConstList([155, 77, 195, 248, 188, 195, 255, 255, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_S0k = H.setRuntimeTypeInfo(makeConstList([C.List_qNA1, C.List_qph, C.List_yFh0]), type$.JSArray_legacy_List_legacy_int);
    C.List_niO0 = H.setRuntimeTypeInfo(makeConstList([1, 24, 239, 251, 218, 219, 255, 205, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_Eba2 = H.setRuntimeTypeInfo(makeConstList([201, 51, 219, 255, 196, 186, 128, 128, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_app5 = H.setRuntimeTypeInfo(makeConstList([69, 46, 190, 239, 201, 218, 255, 228, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_gfn = H.setRuntimeTypeInfo(makeConstList([C.List_niO0, C.List_Eba2, C.List_app5]), type$.JSArray_legacy_List_legacy_int);
    C.List_8eb = H.setRuntimeTypeInfo(makeConstList([1, 191, 251, 255, 255, 128, 128, 128, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_xw81 = H.setRuntimeTypeInfo(makeConstList([223, 165, 249, 255, 213, 255, 128, 128, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_e3N0 = H.setRuntimeTypeInfo(makeConstList([141, 124, 248, 255, 255, 128, 128, 128, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_EJ0 = H.setRuntimeTypeInfo(makeConstList([C.List_8eb, C.List_xw81, C.List_e3N0]), type$.JSArray_legacy_List_legacy_int);
    C.List_e3N1 = H.setRuntimeTypeInfo(makeConstList([1, 16, 248, 255, 255, 128, 128, 128, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_uXo2 = H.setRuntimeTypeInfo(makeConstList([190, 36, 230, 255, 236, 255, 128, 128, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_2hT2 = H.setRuntimeTypeInfo(makeConstList([149, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_WtZ = H.setRuntimeTypeInfo(makeConstList([C.List_e3N1, C.List_uXo2, C.List_2hT2]), type$.JSArray_legacy_List_legacy_int);
    C.List_2hT3 = H.setRuntimeTypeInfo(makeConstList([1, 226, 255, 128, 128, 128, 128, 128, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_Jio = H.setRuntimeTypeInfo(makeConstList([247, 192, 255, 128, 128, 128, 128, 128, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_2hT4 = H.setRuntimeTypeInfo(makeConstList([240, 128, 255, 128, 128, 128, 128, 128, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_wsa = H.setRuntimeTypeInfo(makeConstList([C.List_2hT3, C.List_Jio, C.List_2hT4]), type$.JSArray_legacy_List_legacy_int);
    C.List_e3N2 = H.setRuntimeTypeInfo(makeConstList([1, 134, 252, 255, 255, 128, 128, 128, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_e3N3 = H.setRuntimeTypeInfo(makeConstList([213, 62, 250, 255, 255, 128, 128, 128, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_2hT5 = H.setRuntimeTypeInfo(makeConstList([55, 93, 255, 128, 128, 128, 128, 128, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_OBP = H.setRuntimeTypeInfo(makeConstList([C.List_e3N2, C.List_e3N3, C.List_2hT5]), type$.JSArray_legacy_List_legacy_int);
    C.List_Net = H.setRuntimeTypeInfo(makeConstList([C.List_04, C.List_S0k, C.List_gfn, C.List_EJ0, C.List_WtZ, C.List_wsa, C.List_OBP, C.List_gkc0]), type$.JSArray_legacy_List_legacy_List_legacy_int);
    C.List_ZEx = H.setRuntimeTypeInfo(makeConstList([202, 24, 213, 235, 186, 191, 220, 160, 240, 175, 255]), type$.JSArray_legacy_int);
    C.List_kOG1 = H.setRuntimeTypeInfo(makeConstList([126, 38, 182, 232, 169, 184, 228, 174, 255, 187, 128]), type$.JSArray_legacy_int);
    C.List_kOG2 = H.setRuntimeTypeInfo(makeConstList([61, 46, 138, 219, 151, 178, 240, 170, 255, 216, 128]), type$.JSArray_legacy_int);
    C.List_wsa0 = H.setRuntimeTypeInfo(makeConstList([C.List_ZEx, C.List_kOG1, C.List_kOG2]), type$.JSArray_legacy_List_legacy_int);
    C.List_kr31 = H.setRuntimeTypeInfo(makeConstList([1, 112, 230, 250, 199, 191, 247, 159, 255, 255, 128]), type$.JSArray_legacy_int);
    C.List_e4d1 = H.setRuntimeTypeInfo(makeConstList([166, 109, 228, 252, 211, 215, 255, 174, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_kr32 = H.setRuntimeTypeInfo(makeConstList([39, 77, 162, 232, 172, 180, 245, 178, 255, 255, 128]), type$.JSArray_legacy_int);
    C.List_UaZ = H.setRuntimeTypeInfo(makeConstList([C.List_kr31, C.List_e4d1, C.List_kr32]), type$.JSArray_legacy_List_legacy_int);
    C.List_kr33 = H.setRuntimeTypeInfo(makeConstList([1, 52, 220, 246, 198, 199, 249, 220, 255, 255, 128]), type$.JSArray_legacy_int);
    C.List_oqK0 = H.setRuntimeTypeInfo(makeConstList([124, 74, 191, 243, 183, 193, 250, 221, 255, 255, 128]), type$.JSArray_legacy_int);
    C.List_kr34 = H.setRuntimeTypeInfo(makeConstList([24, 71, 130, 219, 154, 170, 243, 182, 255, 255, 128]), type$.JSArray_legacy_int);
    C.List_i09 = H.setRuntimeTypeInfo(makeConstList([C.List_kr33, C.List_oqK0, C.List_kr34]), type$.JSArray_legacy_List_legacy_int);
    C.List_app6 = H.setRuntimeTypeInfo(makeConstList([1, 182, 225, 249, 219, 240, 255, 224, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_e4d2 = H.setRuntimeTypeInfo(makeConstList([149, 150, 226, 252, 216, 205, 255, 171, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_XT3 = H.setRuntimeTypeInfo(makeConstList([28, 108, 170, 242, 183, 194, 254, 223, 255, 255, 128]), type$.JSArray_legacy_int);
    C.List_OIF = H.setRuntimeTypeInfo(makeConstList([C.List_app6, C.List_e4d2, C.List_XT3]), type$.JSArray_legacy_List_legacy_int);
    C.List_e4d3 = H.setRuntimeTypeInfo(makeConstList([1, 81, 230, 252, 204, 203, 255, 192, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_INA2 = H.setRuntimeTypeInfo(makeConstList([123, 102, 209, 247, 188, 196, 255, 233, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_app7 = H.setRuntimeTypeInfo(makeConstList([20, 95, 153, 243, 164, 173, 255, 203, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_CKI = H.setRuntimeTypeInfo(makeConstList([C.List_e4d3, C.List_INA2, C.List_app7]), type$.JSArray_legacy_List_legacy_int);
    C.List_Eba3 = H.setRuntimeTypeInfo(makeConstList([1, 222, 248, 255, 216, 213, 128, 128, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_IVU = H.setRuntimeTypeInfo(makeConstList([168, 175, 246, 252, 235, 205, 255, 255, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_INA3 = H.setRuntimeTypeInfo(makeConstList([47, 116, 215, 255, 211, 212, 255, 255, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_SnA = H.setRuntimeTypeInfo(makeConstList([C.List_Eba3, C.List_IVU, C.List_INA3]), type$.JSArray_legacy_List_legacy_int);
    C.List_INA4 = H.setRuntimeTypeInfo(makeConstList([1, 121, 236, 253, 212, 214, 255, 255, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_e4d4 = H.setRuntimeTypeInfo(makeConstList([141, 84, 213, 252, 201, 202, 255, 219, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_e4d5 = H.setRuntimeTypeInfo(makeConstList([42, 80, 160, 240, 162, 185, 255, 205, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_xw82 = H.setRuntimeTypeInfo(makeConstList([C.List_INA4, C.List_e4d4, C.List_e4d5]), type$.JSArray_legacy_List_legacy_int);
    C.List_2hT6 = H.setRuntimeTypeInfo(makeConstList([244, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_2hT7 = H.setRuntimeTypeInfo(makeConstList([238, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128]), type$.JSArray_legacy_int);
    C.List_Q1p0 = H.setRuntimeTypeInfo(makeConstList([C.List_2hT, C.List_2hT6, C.List_2hT7]), type$.JSArray_legacy_List_legacy_int);
    C.List_uLM = H.setRuntimeTypeInfo(makeConstList([C.List_wsa0, C.List_UaZ, C.List_i09, C.List_OIF, C.List_CKI, C.List_SnA, C.List_xw82, C.List_Q1p0]), type$.JSArray_legacy_List_legacy_List_legacy_int);
    C.List_S8N = H.setRuntimeTypeInfo(makeConstList([C.List_23h0, C.List_IJC, C.List_Net, C.List_uLM]), type$.JSArray_legacy_List_legacy_List_legacy_List_legacy_int);
    C.List_UiL = H.setRuntimeTypeInfo(makeConstList([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), type$.JSArray_legacy_int);
    C.List_VSP = H.setRuntimeTypeInfo(makeConstList([6430, 6400, 6400, 6400, 3225, 3225, 3225, 3225, 944, 944, 944, 944, 976, 976, 976, 976, 1456, 1456, 1456, 1456, 1488, 1488, 1488, 1488, 718, 718, 718, 718, 718, 718, 718, 718, 750, 750, 750, 750, 750, 750, 750, 750, 1520, 1520, 1520, 1520, 1552, 1552, 1552, 1552, 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 654, 654, 654, 654, 654, 654, 654, 654, 1072, 1072, 1072, 1072, 1104, 1104, 1104, 1104, 1136, 1136, 1136, 1136, 1168, 1168, 1168, 1168, 1200, 1200, 1200, 1200, 1232, 1232, 1232, 1232, 622, 622, 622, 622, 622, 622, 622, 622, 1008, 1008, 1008, 1008, 1040, 1040, 1040, 1040, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 1712, 1712, 1712, 1712, 1744, 1744, 1744, 1744, 846, 846, 846, 846, 846, 846, 846, 846, 1264, 1264, 1264, 1264, 1296, 1296, 1296, 1296, 1328, 1328, 1328, 1328, 1360, 1360, 1360, 1360, 1392, 1392, 1392, 1392, 1424, 1424, 1424, 1424, 686, 686, 686, 686, 686, 686, 686, 686, 910, 910, 910, 910, 910, 910, 910, 910, 1968, 1968, 1968, 1968, 2000, 2000, 2000, 2000, 2032, 2032, 2032, 2032, 16, 16, 16, 16, 10257, 10257, 10257, 10257, 12305, 12305, 12305, 12305, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 878, 878, 878, 878, 878, 878, 878, 878, 1904, 1904, 1904, 1904, 1936, 1936, 1936, 1936, -18413, -18413, -16365, -16365, -14317, -14317, -10221, -10221, 590, 590, 590, 590, 590, 590, 590, 590, 782, 782, 782, 782, 782, 782, 782, 782, 1584, 1584, 1584, 1584, 1616, 1616, 1616, 1616, 1648, 1648, 1648, 1648, 1680, 1680, 1680, 1680, 814, 814, 814, 814, 814, 814, 814, 814, 1776, 1776, 1776, 1776, 1808, 1808, 1808, 1808, 1840, 1840, 1840, 1840, 1872, 1872, 1872, 1872, 6157, 6157, 6157, 6157, 6157, 6157, 6157, 6157, 6157, 6157, 6157, 6157, 6157, 6157, 6157, 6157, -12275, -12275, -12275, -12275, -12275, -12275, -12275, -12275, -12275, -12275, -12275, -12275, -12275, -12275, -12275, -12275, 14353, 14353, 14353, 14353, 16401, 16401, 16401, 16401, 22547, 22547, 24595, 24595, 20497, 20497, 20497, 20497, 18449, 18449, 18449, 18449, 26643, 26643, 28691, 28691, 30739, 30739, -32749, -32749, -30701, -30701, -28653, -28653, -26605, -26605, -24557, -24557, -22509, -22509, -20461, -20461, 8207, 8207, 8207, 8207, 8207, 8207, 8207, 8207, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232]), type$.JSArray_legacy_int);
    C.List_VvJ = H.setRuntimeTypeInfo(makeConstList([0, -128, 64, -64, 32, -96, 96, -32, 16, -112, 80, -48, 48, -80, 112, -16, 8, -120, 72, -56, 40, -88, 104, -24, 24, -104, 88, -40, 56, -72, 120, -8, 4, -124, 68, -60, 36, -92, 100, -28, 20, -108, 84, -44, 52, -76, 116, -12, 12, -116, 76, -52, 44, -84, 108, -20, 28, -100, 92, -36, 60, -68, 124, -4, 2, -126, 66, -62, 34, -94, 98, -30, 18, -110, 82, -46, 50, -78, 114, -14, 10, -118, 74, -54, 42, -86, 106, -22, 26, -102, 90, -38, 58, -70, 122, -6, 6, -122, 70, -58, 38, -90, 102, -26, 22, -106, 86, -42, 54, -74, 118, -10, 14, -114, 78, -50, 46, -82, 110, -18, 30, -98, 94, -34, 62, -66, 126, -2, 1, -127, 65, -63, 33, -95, 97, -31, 17, -111, 81, -47, 49, -79, 113, -15, 9, -119, 73, -55, 41, -87, 105, -23, 25, -103, 89, -39, 57, -71, 121, -7, 5, -123, 69, -59, 37, -91, 101, -27, 21, -107, 85, -43, 53, -75, 117, -11, 13, -115, 77, -51, 45, -83, 109, -19, 29, -99, 93, -35, 61, -67, 125, -3, 3, -125, 67, -61, 35, -93, 99, -29, 19, -109, 83, -45, 51, -77, 115, -13, 11, -117, 75, -53, 43, -85, 107, -21, 27, -101, 91, -37, 59, -69, 123, -5, 7, -121, 71, -57, 39, -89, 103, -25, 23, -105, 87, -41, 55, -73, 119, -9, 15, -113, 79, -49, 47, -81, 111, -17, 31, -97, 95, -33, 63, -65, 127, -1]), type$.JSArray_legacy_int);
    C.List_X3d0 = H.setRuntimeTypeInfo(makeConstList([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13]), type$.JSArray_legacy_int);
    C.List_X3d = H.setRuntimeTypeInfo(makeConstList([5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]), type$.JSArray_legacy_int);
    C.List_Y3m = H.setRuntimeTypeInfo(makeConstList([-0.0, 1, -1, 2, -2, 3, 4, 6, -3, 5, -4, -5, -6, 7, -7, 8, -8, -9]), type$.JSArray_legacy_int);
    C.List_cGl1 = H.setRuntimeTypeInfo(makeConstList([0, 1, 4, 8, 5, 2, 3, 6, 9, 12, 13, 10, 7, 11, 14, 15]), type$.JSArray_legacy_int);
    C.List_cGl0 = H.setRuntimeTypeInfo(makeConstList([0, 4, 8, 12, 128, 132, 136, 140, 256, 260, 264, 268, 384, 388, 392, 396]), type$.JSArray_legacy_int);
    C.List_cGl = H.setRuntimeTypeInfo(makeConstList([0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]), type$.JSArray_legacy_int);
    C.List_eea = H.setRuntimeTypeInfo(makeConstList([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0]), type$.JSArray_legacy_int);
    C.List_i3t = H.setRuntimeTypeInfo(makeConstList([1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577]), type$.JSArray_legacy_int);
    C.List_kcl = H.setRuntimeTypeInfo(makeConstList([0, 1, 5, 6, 14, 15, 27, 28, 2, 4, 7, 13, 16, 26, 29, 42, 3, 8, 12, 17, 25, 30, 41, 43, 9, 11, 18, 24, 31, 40, 44, 53, 10, 19, 23, 32, 39, 45, 52, 54, 20, 22, 33, 38, 46, 51, 55, 60, 21, 34, 37, 47, 50, 56, 59, 61, 35, 36, 48, 49, 57, 58, 62, 63]), type$.JSArray_legacy_int);
    C.List_kcl0 = H.setRuntimeTypeInfo(makeConstList([16, 11, 10, 16, 24, 40, 51, 61, 12, 12, 14, 19, 26, 58, 60, 55, 14, 13, 16, 24, 40, 57, 69, 56, 14, 17, 22, 29, 51, 87, 80, 62, 18, 22, 37, 56, 68, 109, 103, 77, 24, 35, 55, 64, 81, 104, 113, 92, 49, 64, 78, 87, 103, 121, 120, 101, 72, 92, 95, 98, 112, 100, 103, 99]), type$.JSArray_legacy_int);
    C.List_kcl1 = H.setRuntimeTypeInfo(makeConstList([17, 18, 24, 47, 99, 99, 99, 99, 18, 21, 26, 66, 99, 99, 99, 99, 24, 26, 56, 99, 99, 99, 99, 99, 47, 66, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]), type$.JSArray_legacy_int);
    C.List_knt = H.setRuntimeTypeInfo(makeConstList([0, 1, 3, 7, 15, 31, 63, 127, 255]), type$.JSArray_legacy_int);
    C.List_knt0 = H.setRuntimeTypeInfo(makeConstList([0, 128, 192, 224, 240, 248, 252, 254, 255]), type$.JSArray_legacy_int);
    C.List_mC8 = H.setRuntimeTypeInfo(makeConstList([0, 1, 1, 2, 4, 8, 1, 1, 2, 4, 8, 4, 8]), type$.JSArray_legacy_int);
    C.List_nLG = H.setRuntimeTypeInfo(makeConstList([62, 62, 30, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 588, 588, 588, 588, 588, 588, 588, 588, 1680, 1680, 20499, 22547, 24595, 26643, 1776, 1776, 1808, 1808, -24557, -22509, -20461, -18413, 1904, 1904, 1936, 1936, -16365, -14317, 782, 782, 782, 782, 814, 814, 814, 814, -12269, -10221, 10257, 10257, 12305, 12305, 14353, 14353, 16403, 18451, 1712, 1712, 1744, 1744, 28691, 30739, -32749, -30701, -28653, -26605, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 750, 750, 750, 750, 1616, 1616, 1648, 1648, 1424, 1424, 1456, 1456, 1488, 1488, 1520, 1520, 1840, 1840, 1872, 1872, 1968, 1968, 8209, 8209, 524, 524, 524, 524, 524, 524, 524, 524, 556, 556, 556, 556, 556, 556, 556, 556, 1552, 1552, 1584, 1584, 2000, 2000, 2032, 2032, 976, 976, 1008, 1008, 1040, 1040, 1072, 1072, 1296, 1296, 1328, 1328, 718, 718, 718, 718, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 4113, 4113, 6161, 6161, 848, 848, 880, 880, 912, 912, 944, 944, 622, 622, 622, 622, 654, 654, 654, 654, 1104, 1104, 1136, 1136, 1168, 1168, 1200, 1200, 1232, 1232, 1264, 1264, 686, 686, 686, 686, 1360, 1360, 1392, 1392, 12, 12, 12, 12, 12, 12, 12, 12, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390]), type$.JSArray_legacy_int);
    C.List_qQn = H.setRuntimeTypeInfo(makeConstList([3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258]), type$.JSArray_legacy_int);
    C.List_173_148_140 = H.setRuntimeTypeInfo(makeConstList([173, 148, 140]), type$.JSArray_legacy_int);
    C.List_176_155_140_135 = H.setRuntimeTypeInfo(makeConstList([176, 155, 140, 135]), type$.JSArray_legacy_int);
    C.List_yTu0 = H.setRuntimeTypeInfo(makeConstList([180, 157, 141, 134, 130]), type$.JSArray_legacy_int);
    C.List_2hT8 = H.setRuntimeTypeInfo(makeConstList([254, 254, 243, 230, 196, 177, 153, 140, 133, 130, 129]), type$.JSArray_legacy_int);
    C.List_sao = H.setRuntimeTypeInfo(makeConstList([C.List_173_148_140, C.List_176_155_140_135, C.List_yTu0, C.List_2hT8]), type$.JSArray_legacy_List_legacy_int);
    C.List_sty = H.setRuntimeTypeInfo(makeConstList([V.vp8_filter_VP8Filter_DC4$closure(), V.vp8_filter_VP8Filter_TM4$closure(), V.vp8_filter_VP8Filter_VE4$closure(), V.vp8_filter_VP8Filter_HE4$closure(), V.vp8_filter_VP8Filter_RD4$closure(), V.vp8_filter_VP8Filter_VR4$closure(), V.vp8_filter_VP8Filter_LD4$closure(), V.vp8_filter_VP8Filter_VL4$closure(), V.vp8_filter_VP8Filter_HD4$closure(), V.vp8_filter_VP8Filter_HU4$closure()]), type$.JSArray_of_legacy_void_Function_legacy_InputBuffer);
    C.List_uSC = H.setRuntimeTypeInfo(makeConstList([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]), type$.JSArray_legacy_int);
    C.List_uSC0 = H.setRuntimeTypeInfo(makeConstList([17, 18, 0, 1, 2, 3, 4, 5, 16, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]), type$.JSArray_legacy_int);
    C.List_wmc = H.setRuntimeTypeInfo(makeConstList([127, 127, 191, 127, 159, 191, 223, 127, 143, 159, 175, 191, 207, 223, 239, 127, 135, 143, 151, 159, 167, 175, 183, 191, 199, 207, 215, 223, 231, 239, 247, 127, 131, 135, 139, 143, 147, 151, 155, 159, 163, 167, 171, 175, 179, 183, 187, 191, 195, 199, 203, 207, 211, 215, 219, 223, 227, 231, 235, 239, 243, 247, 251, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 127]), type$.JSArray_legacy_int);
    C.List_yTu = H.setRuntimeTypeInfo(makeConstList([280, 256, 256, 256, 40]), type$.JSArray_legacy_int);
    C.List_yYQ = H.setRuntimeTypeInfo(makeConstList([0, 1, 1, 2, 4, 8, 1, 1, 2, 4, 8, 4, 8, 0]), type$.JSArray_legacy_int);
    C.Map_6zffn = new H.GeneralConstantMap([315, "artist", 258, "bitsPerSample", 265, "cellLength", 264, "cellWidth", 320, "colorMap", 259, "compression", 306, "dateTime", 34665, "exifIFD", 338, "extraSamples", 266, "fillOrder", 289, "freeByteCounts", 288, "freeOffsets", 291, "grayResponseCurve", 290, "grayResponseUnit", 316, "hostComputer", 34675, "iccProfile", 270, "imageDescription", 257, "imageLength", 256, "imageWidth", 33723, "iptc", 271, "make", 281, "maxSampleValue", 280, "minSampleValue", 272, "model", 254, "newSubfileType", 274, "orientation", 262, "photometricInterpretation", 34377, "photoshop", 284, "planarConfiguration", 317, "predictor", 296, "resolutionUnit", 278, "rowsPerStrip", 277, "samplesPerPixel", 305, "software", 279, "stripByteCounts", 273, "stropOffsets", 255, "subfileType", 292, "t4Options", 293, "t6Options", 263, "thresholding", 322, "tileWidth", 323, "tileLength", 324, "tileOffsets", 325, "tileByteCounts", 700, "xmp", 282, "xResolution", 283, "yResolution", 529, "yCbCrCoefficients", 530, "yCbCrSubsampling", 531, "yCbCrPositioning", 339, "sampleFormat"], H.findType("GeneralConstantMap<int*,String*>"));
  })();
  (function staticFields() {
    $._JS_INTEROP_INTERCEPTOR_TAG = null;
    $.Closure_functionCounter = 0;
    $.BoundClosure_selfFieldNameCache = null;
    $.BoundClosure_receiverFieldNameCache = null;
    $.getTagFunction = null;
    $.alternateTagFunction = null;
    $.prototypeForTagFunction = null;
    $.dispatchRecordsForInstanceTags = null;
    $.interceptorsForUncacheableTags = null;
    $.initNativeDispatchFlag = null;
    $._nextCallback = null;
    $._lastCallback = null;
    $._lastPriorityCallback = null;
    $._isInCallbackLoop = false;
    $.Zone__current = C.C__RootZone;
    $._toStringVisiting = H.setRuntimeTypeInfo([], H.findType("JSArray<Object>"));
    $._dctClip = null;
    $.VP8Filter__tablesInitialized = false;
    $.VP8LTransform_PREDICTORS = H.setRuntimeTypeInfo([R.vp8l_transform_VP8LTransform__predictor0$closure(), R.vp8l_transform_VP8LTransform__predictor1$closure(), R.vp8l_transform_VP8LTransform__predictor2$closure(), R.vp8l_transform_VP8LTransform__predictor3$closure(), R.vp8l_transform_VP8LTransform__predictor4$closure(), R.vp8l_transform_VP8LTransform__predictor5$closure(), R.vp8l_transform_VP8LTransform__predictor6$closure(), R.vp8l_transform_VP8LTransform__predictor7$closure(), R.vp8l_transform_VP8LTransform__predictor8$closure(), R.vp8l_transform_VP8LTransform__predictor9$closure(), R.vp8l_transform_VP8LTransform__predictor10$closure(), R.vp8l_transform_VP8LTransform__predictor11$closure(), R.vp8l_transform_VP8LTransform__predictor12$closure(), R.vp8l_transform_VP8LTransform__predictor13$closure(), R.vp8l_transform_VP8LTransform__predictor0$closure(), R.vp8l_transform_VP8LTransform__predictor0$closure()], H.findType("JSArray<int*(Uint32List*,int*,int*)*>"));
    $.Half__toFloatUint32 = null;
    $.Half__toFloatFloat32 = null;
    $.Half__eLut = null;
  })();
  (function lazyInitializers() {
    var _lazyFinal = hunkHelpers.lazyFinal,
      _lazyOld = hunkHelpers.lazyOld;
    _lazyFinal($, "DART_CLOSURE_PROPERTY_NAME", "$get$DART_CLOSURE_PROPERTY_NAME", function() {
      return H.getIsolateAffinityTag("_$dart_dartClosure");
    });
    _lazyFinal($, "TypeErrorDecoder_noSuchMethodPattern", "$get$TypeErrorDecoder_noSuchMethodPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({
        toString: function() {
          return "$receiver$";
        }
      }));
    });
    _lazyFinal($, "TypeErrorDecoder_notClosurePattern", "$get$TypeErrorDecoder_notClosurePattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({$method$: null,
        toString: function() {
          return "$receiver$";
        }
      }));
    });
    _lazyFinal($, "TypeErrorDecoder_nullCallPattern", "$get$TypeErrorDecoder_nullCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
    });
    _lazyFinal($, "TypeErrorDecoder_nullLiteralCallPattern", "$get$TypeErrorDecoder_nullLiteralCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        var $argumentsExpr$ = '$arguments$';
        try {
          null.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazyFinal($, "TypeErrorDecoder_undefinedCallPattern", "$get$TypeErrorDecoder_undefinedCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
    });
    _lazyFinal($, "TypeErrorDecoder_undefinedLiteralCallPattern", "$get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        var $argumentsExpr$ = '$arguments$';
        try {
          (void 0).$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazyFinal($, "TypeErrorDecoder_nullPropertyPattern", "$get$TypeErrorDecoder_nullPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
    });
    _lazyFinal($, "TypeErrorDecoder_nullLiteralPropertyPattern", "$get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        try {
          null.$method$;
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazyFinal($, "TypeErrorDecoder_undefinedPropertyPattern", "$get$TypeErrorDecoder_undefinedPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
    });
    _lazyFinal($, "TypeErrorDecoder_undefinedLiteralPropertyPattern", "$get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        try {
          (void 0).$method$;
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazyFinal($, "_AsyncRun__scheduleImmediateClosure", "$get$_AsyncRun__scheduleImmediateClosure", function() {
      return P._AsyncRun__initializeScheduleImmediate();
    });
    _lazyOld($, "VP8Filter_abs0", "$get$VP8Filter_abs0", function() {
      return H.NativeUint8List_NativeUint8List(511);
    });
    _lazyOld($, "VP8Filter_abs1", "$get$VP8Filter_abs1", function() {
      return H.NativeUint8List_NativeUint8List(511);
    });
    _lazyOld($, "VP8Filter_sclip1", "$get$VP8Filter_sclip1", function() {
      return H.NativeInt8List_NativeInt8List(2041);
    });
    _lazyOld($, "VP8Filter_sclip2", "$get$VP8Filter_sclip2", function() {
      return H.NativeInt8List_NativeInt8List(225);
    });
    _lazyOld($, "VP8Filter_clip1", "$get$VP8Filter_clip1", function() {
      return H.NativeUint8List_NativeUint8List(766);
    });
    _lazyOld($, "__uint8", "$get$__uint8", function() {
      return H.NativeUint8List_NativeUint8List(1);
    });
    _lazyOld($, "__uint8ToInt8", "$get$__uint8ToInt8", function() {
      var t1 = $.$get$__uint8().buffer;
      H._checkViewArguments(t1, 0, null);
      t1 = new Int8Array(t1, 0);
      return t1;
    });
    _lazyOld($, "__uint16", "$get$__uint16", function() {
      return H.NativeUint16List_NativeUint16List(1);
    });
    _lazyOld($, "__uint16ToInt16", "$get$__uint16ToInt16", function() {
      var t1 = $.$get$__uint16().buffer;
      H._checkViewArguments(t1, 0, null);
      t1 = new Int16Array(t1, 0);
      return t1;
    });
    _lazyOld($, "__uint32", "$get$__uint32", function() {
      return H.NativeUint32List_NativeUint32List(1);
    });
    _lazyOld($, "__uint32ToInt32", "$get$__uint32ToInt32", function() {
      var t1 = $.$get$__uint32().buffer;
      H._checkViewArguments(t1, 0, null);
      t1 = new Int32Array(t1, 0);
      return t1;
    });
    _lazyOld($, "__uint32ToFloat32", "$get$__uint32ToFloat32", function() {
      return P.Float32List_Float32List$view($.$get$__uint32().buffer);
    });
    _lazyOld($, "__int32", "$get$__int32", function() {
      return H.NativeInt32List_NativeInt32List(1);
    });
    _lazyOld($, "__int32ToUint32", "$get$__int32ToUint32", function() {
      return P.Uint32List_Uint32List$view($.$get$__int32().buffer, 0);
    });
    _lazyOld($, "__float32", "$get$__float32", function() {
      return H.NativeFloat32List_NativeFloat32List(1);
    });
    _lazyOld($, "__float32ToUint32", "$get$__float32ToUint32", function() {
      return P.Uint32List_Uint32List$view($.$get$__float32().buffer, 0);
    });
    _lazyOld($, "__uint64", "$get$__uint64", function() {
      return P.Uint64List_Uint64List(1);
    });
    _lazyOld($, "__uint64ToFloat64", "$get$__uint64ToFloat64", function() {
      var t1 = $.$get$__uint64();
      return P.Float64List_Float64List$view(t1.get$buffer(t1));
    });
  })();
  (function nativeSupport() {
    !function() {
      var intern = function(s) {
        var o = {};
        o[s] = 1;
        return Object.keys(hunkHelpers.convertToFastObject(o))[0];
      };
      init.getIsolateTag = function(name) {
        return intern("___dart_" + name + init.isolateTag);
      };
      var tableProperty = "___dart_isolate_tags_";
      var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
      var rootProperty = "_ZxYxX";
      for (var i = 0;; i++) {
        var property = intern(rootProperty + "_" + i + "_");
        if (!(property in usedProperties)) {
          usedProperties[property] = 1;
          init.isolateTag = property;
          break;
        }
      }
      init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
    }();
    hunkHelpers.setOrUpdateInterceptorsByTag({DOMError: J.Interceptor, MediaError: J.Interceptor, NavigatorUserMediaError: J.Interceptor, OverconstrainedError: J.Interceptor, PositionError: J.Interceptor, SQLError: J.Interceptor, ArrayBuffer: H.NativeByteBuffer, DataView: H.NativeTypedData, ArrayBufferView: H.NativeTypedData, Float32Array: H.NativeFloat32List, Float64Array: H.NativeFloat64List, Int16Array: H.NativeInt16List, Int32Array: H.NativeInt32List, Int8Array: H.NativeInt8List, Uint16Array: H.NativeUint16List, Uint32Array: H.NativeUint32List, Uint8ClampedArray: H.NativeUint8ClampedList, CanvasPixelArray: H.NativeUint8ClampedList, Uint8Array: H.NativeUint8List, Blob: W.Blob, DedicatedWorkerGlobalScope: W.DedicatedWorkerGlobalScope, DOMException: W.DomException, AbortPaymentEvent: W.Event, AnimationEvent: W.Event, AnimationPlaybackEvent: W.Event, ApplicationCacheErrorEvent: W.Event, BackgroundFetchClickEvent: W.Event, BackgroundFetchEvent: W.Event, BackgroundFetchFailEvent: W.Event, BackgroundFetchedEvent: W.Event, BeforeInstallPromptEvent: W.Event, BeforeUnloadEvent: W.Event, BlobEvent: W.Event, CanMakePaymentEvent: W.Event, ClipboardEvent: W.Event, CloseEvent: W.Event, CompositionEvent: W.Event, CustomEvent: W.Event, DeviceMotionEvent: W.Event, DeviceOrientationEvent: W.Event, ErrorEvent: W.Event, ExtendableEvent: W.Event, ExtendableMessageEvent: W.Event, FetchEvent: W.Event, FocusEvent: W.Event, FontFaceSetLoadEvent: W.Event, ForeignFetchEvent: W.Event, GamepadEvent: W.Event, HashChangeEvent: W.Event, InstallEvent: W.Event, KeyboardEvent: W.Event, MediaEncryptedEvent: W.Event, MediaKeyMessageEvent: W.Event, MediaQueryListEvent: W.Event, MediaStreamEvent: W.Event, MediaStreamTrackEvent: W.Event, MIDIConnectionEvent: W.Event, MIDIMessageEvent: W.Event, MouseEvent: W.Event, DragEvent: W.Event, MutationEvent: W.Event, NotificationEvent: W.Event, PageTransitionEvent: W.Event, PaymentRequestEvent: W.Event, PaymentRequestUpdateEvent: W.Event, PointerEvent: W.Event, PopStateEvent: W.Event, PresentationConnectionAvailableEvent: W.Event, PresentationConnectionCloseEvent: W.Event, ProgressEvent: W.Event, PromiseRejectionEvent: W.Event, PushEvent: W.Event, RTCDataChannelEvent: W.Event, RTCDTMFToneChangeEvent: W.Event, RTCPeerConnectionIceEvent: W.Event, RTCTrackEvent: W.Event, SecurityPolicyViolationEvent: W.Event, SensorErrorEvent: W.Event, SpeechRecognitionError: W.Event, SpeechRecognitionEvent: W.Event, SpeechSynthesisEvent: W.Event, StorageEvent: W.Event, SyncEvent: W.Event, TextEvent: W.Event, TouchEvent: W.Event, TrackEvent: W.Event, TransitionEvent: W.Event, WebKitTransitionEvent: W.Event, UIEvent: W.Event, VRDeviceEvent: W.Event, VRDisplayEvent: W.Event, VRSessionEvent: W.Event, WheelEvent: W.Event, MojoInterfaceRequestEvent: W.Event, ResourceProgressEvent: W.Event, USBConnectionEvent: W.Event, IDBVersionChangeEvent: W.Event, AudioProcessingEvent: W.Event, OfflineAudioCompletionEvent: W.Event, WebGLContextEvent: W.Event, Event: W.Event, InputEvent: W.Event, SubmitEvent: W.Event, EventTarget: W.EventTarget, File: W.File, MessageEvent: W.MessageEvent, MessagePort: W.MessagePort, WorkerGlobalScope: W.WorkerGlobalScope});
    hunkHelpers.setOrUpdateLeafTags({DOMError: true, MediaError: true, NavigatorUserMediaError: true, OverconstrainedError: true, PositionError: true, SQLError: true, ArrayBuffer: true, DataView: true, ArrayBufferView: false, Float32Array: true, Float64Array: true, Int16Array: true, Int32Array: true, Int8Array: true, Uint16Array: true, Uint32Array: true, Uint8ClampedArray: true, CanvasPixelArray: true, Uint8Array: false, Blob: false, DedicatedWorkerGlobalScope: true, DOMException: true, AbortPaymentEvent: true, AnimationEvent: true, AnimationPlaybackEvent: true, ApplicationCacheErrorEvent: true, BackgroundFetchClickEvent: true, BackgroundFetchEvent: true, BackgroundFetchFailEvent: true, BackgroundFetchedEvent: true, BeforeInstallPromptEvent: true, BeforeUnloadEvent: true, BlobEvent: true, CanMakePaymentEvent: true, ClipboardEvent: true, CloseEvent: true, CompositionEvent: true, CustomEvent: true, DeviceMotionEvent: true, DeviceOrientationEvent: true, ErrorEvent: true, ExtendableEvent: true, ExtendableMessageEvent: true, FetchEvent: true, FocusEvent: true, FontFaceSetLoadEvent: true, ForeignFetchEvent: true, GamepadEvent: true, HashChangeEvent: true, InstallEvent: true, KeyboardEvent: true, MediaEncryptedEvent: true, MediaKeyMessageEvent: true, MediaQueryListEvent: true, MediaStreamEvent: true, MediaStreamTrackEvent: true, MIDIConnectionEvent: true, MIDIMessageEvent: true, MouseEvent: true, DragEvent: true, MutationEvent: true, NotificationEvent: true, PageTransitionEvent: true, PaymentRequestEvent: true, PaymentRequestUpdateEvent: true, PointerEvent: true, PopStateEvent: true, PresentationConnectionAvailableEvent: true, PresentationConnectionCloseEvent: true, ProgressEvent: true, PromiseRejectionEvent: true, PushEvent: true, RTCDataChannelEvent: true, RTCDTMFToneChangeEvent: true, RTCPeerConnectionIceEvent: true, RTCTrackEvent: true, SecurityPolicyViolationEvent: true, SensorErrorEvent: true, SpeechRecognitionError: true, SpeechRecognitionEvent: true, SpeechSynthesisEvent: true, StorageEvent: true, SyncEvent: true, TextEvent: true, TouchEvent: true, TrackEvent: true, TransitionEvent: true, WebKitTransitionEvent: true, UIEvent: true, VRDeviceEvent: true, VRDisplayEvent: true, VRSessionEvent: true, WheelEvent: true, MojoInterfaceRequestEvent: true, ResourceProgressEvent: true, USBConnectionEvent: true, IDBVersionChangeEvent: true, AudioProcessingEvent: true, OfflineAudioCompletionEvent: true, WebGLContextEvent: true, Event: false, InputEvent: false, SubmitEvent: false, EventTarget: false, File: true, MessageEvent: true, MessagePort: true, WorkerGlobalScope: false});
    H.NativeTypedArray.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H.NativeTypedArrayOfDouble.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H.NativeTypedArrayOfInt.$nativeSuperclassTag = "ArrayBufferView";
  })();
  Function.prototype.call$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$0 = function() {
    return this();
  };
  Function.prototype.call$2 = function(a, b) {
    return this(a, b);
  };
  Function.prototype.call$1$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$3 = function(a, b, c) {
    return this(a, b, c);
  };
  Function.prototype.call$4 = function(a, b, c, d) {
    return this(a, b, c, d);
  };
  Function.prototype.call$5 = function(a, b, c, d, e) {
    return this(a, b, c, d, e);
  };
  Function.prototype.call$6 = function(a, b, c, d, e, f) {
    return this(a, b, c, d, e, f);
  };
  convertAllToFastObject(holders);
  convertToFastObject($);
  (function(callback) {
    if (typeof document === "undefined") {
      callback(null);
      return;
    }
    if (typeof document.currentScript != 'undefined') {
      callback(document.currentScript);
      return;
    }
    var scripts = document.scripts;
    function onLoad(event) {
      for (var i = 0; i < scripts.length; ++i)
        scripts[i].removeEventListener("load", onLoad, false);
      callback(event.target);
    }
    for (var i = 0; i < scripts.length; ++i)
      scripts[i].addEventListener("load", onLoad, false);
  })(function(currentScript) {
    init.currentScript = currentScript;
    if (typeof dartMainRunner === "function")
      dartMainRunner(B.main, []);
    else
      B.main([]);
  });
})();

//# sourceMappingURL=worker.js.map
